
/Users/justinegagnepain/Documents/concordia_classes/CART_461_Tangible_Media_Studio/mistaken_realities_latest/target/2.0.1/argon/mistaken_realities_latest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002094  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e558  000d60b4  0001e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6120  000d6120  00026120  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6148  000d6148  00026148  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00142e32  00000000  00000000  0002614c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015bc8  00000000  00000000  00168f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b377  00000000  00000000  0017eb46  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028b0  00000000  00000000  001a9ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000077d8  00000000  00000000  001ac76d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037441  00000000  00000000  001b3f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000370c9  00000000  00000000  001eb386  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b88d  00000000  00000000  0022244f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006dd0  00000000  00000000  0032dcdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 feb7 	bl	d5da0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 febf 	bl	d5dbc <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e558 	.word	0x2003e558
   d4048:	000d60b4 	.word	0x000d60b4
   d404c:	2003e5c4 	.word	0x2003e5c4
   d4050:	2003e5c4 	.word	0x2003e5c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fbcf 	bl	d5800 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6088 	.word	0x000d6088
   d407c:	000d60ac 	.word	0x000d60ac

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b890 	b.w	d41a4 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8bf 	bl	d4208 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bb79 	b.w	d5784 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bbf1 	b.w	d4878 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bbf7 	b.w	d4888 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d40aa:	4770      	bx	lr

000d40ac <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d40ac:	b510      	push	{r4, lr}
   d40ae:	4b06      	ldr	r3, [pc, #24]	; (d40c8 <_ZN3UDPD1Ev+0x1c>)
   d40b0:	6003      	str	r3, [r0, #0]
   d40b2:	3364      	adds	r3, #100	; 0x64
   d40b4:	4604      	mov	r4, r0
   d40b6:	6103      	str	r3, [r0, #16]
   d40b8:	f000 ffd4 	bl	d5064 <_ZN3UDP4stopEv>
   d40bc:	4620      	mov	r0, r4
   d40be:	f001 f997 	bl	d53f0 <_ZN3UDP13releaseBufferEv>
   d40c2:	4620      	mov	r0, r4
   d40c4:	bd10      	pop	{r4, pc}
   d40c6:	bf00      	nop
   d40c8:	000d5f88 	.word	0x000d5f88

000d40cc <_ZN9IPAddressD0Ev>:
   d40cc:	b510      	push	{r4, lr}
   d40ce:	2118      	movs	r1, #24
   d40d0:	4604      	mov	r4, r0
   d40d2:	f001 fc6e 	bl	d59b2 <_ZdlPvj>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}

000d40da <_ZN3UDPD0Ev>:
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	f7ff ffe5 	bl	d40ac <_ZN3UDPD1Ev>
   d40e2:	4620      	mov	r0, r4
   d40e4:	214c      	movs	r1, #76	; 0x4c
   d40e6:	f001 fc64 	bl	d59b2 <_ZdlPvj>
   d40ea:	4620      	mov	r0, r4
   d40ec:	bd10      	pop	{r4, pc}
	...

000d40f0 <_Z12connectToLANv>:
IPAddress remoteIP(192, 168, 1, 9);
/* PORTS FOR INCOMING & OUTGOIN9 DATA */
unsigned int outPort = 8000;

void connectToLAN()
{
   d40f0:	b530      	push	{r4, r5, lr}
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d40f2:	4c14      	ldr	r4, [pc, #80]	; (d4144 <_Z12connectToLANv+0x54>)
   d40f4:	2300      	movs	r3, #0
   d40f6:	6860      	ldr	r0, [r4, #4]
   d40f8:	b087      	sub	sp, #28
   d40fa:	461a      	mov	r2, r3
   d40fc:	4619      	mov	r1, r3
   d40fe:	f000 fb6b 	bl	d47d8 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4102:	2200      	movs	r2, #0
   d4104:	6860      	ldr	r0, [r4, #4]
   d4106:	4611      	mov	r1, r2
   d4108:	f000 fb7e 	bl	d4808 <network_ready>
    /* IF ARGON ALREADY CONFIGURED FOR SSID/ROUTER - THEN THIS */
    /* TRY CONNECT TO SSID - ROUTER */
    WiFi.connect();
    /* WAIT UNTIL DHCP SERVICE ASSIGNS ARGON IPADDRESS */
    while (!WiFi.ready())
   d410c:	2800      	cmp	r0, #0
   d410e:	d0f8      	beq.n	d4102 <_Z12connectToLANv+0x12>
        ;

    delay(5);
   d4110:	2005      	movs	r0, #5
   d4112:	f000 fbd1 	bl	d48b8 <delay>
    /* GET HOST (ARGON) ASSIGNED IP */
    Serial.print("ARGON IP (DHCP): ");
   d4116:	f001 faab 	bl	d5670 <_Z16_fetch_usbserialv>
   d411a:	490b      	ldr	r1, [pc, #44]	; (d4148 <_Z12connectToLANv+0x58>)
   d411c:	f000 fdd6 	bl	d4ccc <_ZN5Print5printEPKc>
    //argonIP = WiFi.localIP();
    //sprintf(argonIPAddress, "%d.%d.%d.%d", argonIP[0], argonIP[1], argonIP[2], argonIP[3]);
    Serial.println(WiFi.localIP());
   d4120:	f001 faa6 	bl	d5670 <_Z16_fetch_usbserialv>
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4124:	2200      	movs	r2, #0
   d4126:	4611      	mov	r1, r2
   d4128:	4605      	mov	r5, r0
   d412a:	6860      	ldr	r0, [r4, #4]
   d412c:	f000 fb4c 	bl	d47c8 <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
   d4130:	1c81      	adds	r1, r0, #2
   d4132:	4668      	mov	r0, sp
   d4134:	f000 fca6 	bl	d4a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4138:	4669      	mov	r1, sp
   d413a:	4628      	mov	r0, r5
   d413c:	f000 fde9 	bl	d4d12 <_ZN5Print7printlnERK9Printable>
}
   d4140:	b007      	add	sp, #28
   d4142:	bd30      	pop	{r4, r5, pc}
   d4144:	2003e7b8 	.word	0x2003e7b8
   d4148:	000d5e48 	.word	0x000d5e48

000d414c <_Z11sendOSCDataf>:

void sendOSCData(float x)
{
   d414c:	b530      	push	{r4, r5, lr}
   d414e:	b09f      	sub	sp, #124	; 0x7c
    OSCMessage outMessage("/touch");
   d4150:	490f      	ldr	r1, [pc, #60]	; (d4190 <_Z11sendOSCDataf+0x44>)
{
   d4152:	ed8d 0a01 	vstr	s0, [sp, #4]
    OSCMessage outMessage("/touch");
   d4156:	a809      	add	r0, sp, #36	; 0x24
   d4158:	f000 f8aa 	bl	d42b0 <_ZN10OSCMessageC1EPKc>
class IPAddress : public Printable {
   d415c:	4d0d      	ldr	r5, [pc, #52]	; (d4194 <_Z11sendOSCDataf+0x48>)
    outMessage.addFloat(x);
   d415e:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4162:	a809      	add	r0, sp, #36	; 0x24
   d4164:	f000 f8e3 	bl	d432e <_ZN10OSCMessage8addFloatEf>
   d4168:	4b0b      	ldr	r3, [pc, #44]	; (d4198 <_Z11sendOSCDataf+0x4c>)
   d416a:	9303      	str	r3, [sp, #12]
   d416c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d416e:	ac04      	add	r4, sp, #16
   d4170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4172:	682b      	ldr	r3, [r5, #0]
   d4174:	7023      	strb	r3, [r4, #0]
    outMessage.send(Udp, remoteIP, outPort);
   d4176:	4b09      	ldr	r3, [pc, #36]	; (d419c <_Z11sendOSCDataf+0x50>)
   d4178:	4909      	ldr	r1, [pc, #36]	; (d41a0 <_Z11sendOSCDataf+0x54>)
   d417a:	681b      	ldr	r3, [r3, #0]
   d417c:	aa03      	add	r2, sp, #12
   d417e:	a809      	add	r0, sp, #36	; 0x24
   d4180:	f000 f900 	bl	d4384 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
    OSCMessage outMessage("/touch");
   d4184:	a809      	add	r0, sp, #36	; 0x24
   d4186:	f000 f8b5 	bl	d42f4 <_ZN10OSCMessageD1Ev>
}
   d418a:	b01f      	add	sp, #124	; 0x7c
   d418c:	bd30      	pop	{r4, r5, pc}
   d418e:	bf00      	nop
   d4190:	000d5e5a 	.word	0x000d5e5a
   d4194:	2003e630 	.word	0x2003e630
   d4198:	000d5f20 	.word	0x000d5f20
   d419c:	2003e558 	.word	0x2003e558
   d41a0:	2003e5c8 	.word	0x2003e5c8

000d41a4 <setup>:

void setup()
{
   d41a4:	b510      	push	{r4, lr}

    uint8_t ver;

    // Initialize Serial port
    Serial.begin(9600);
   d41a6:	f001 fa63 	bl	d5670 <_Z16_fetch_usbserialv>
    Serial.println();
    Serial.println("-----------------------------------");
   d41aa:	4c14      	ldr	r4, [pc, #80]	; (d41fc <setup+0x58>)
    Serial.begin(9600);
   d41ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41b0:	f001 fa52 	bl	d5658 <_ZN9USBSerial5beginEl>
    Serial.println();
   d41b4:	f001 fa5c 	bl	d5670 <_Z16_fetch_usbserialv>
   d41b8:	f000 fd95 	bl	d4ce6 <_ZN5Print7printlnEv>
    Serial.println("-----------------------------------");
   d41bc:	f001 fa58 	bl	d5670 <_Z16_fetch_usbserialv>
   d41c0:	4621      	mov	r1, r4
   d41c2:	f000 fd9c 	bl	d4cfe <_ZN5Print7printlnEPKc>
    Serial.println("Mistaken Realities");
   d41c6:	f001 fa53 	bl	d5670 <_Z16_fetch_usbserialv>
   d41ca:	490d      	ldr	r1, [pc, #52]	; (d4200 <setup+0x5c>)
   d41cc:	f000 fd97 	bl	d4cfe <_ZN5Print7printlnEPKc>
    Serial.println("-----------------------------------");
   d41d0:	f001 fa4e 	bl	d5670 <_Z16_fetch_usbserialv>
   d41d4:	4621      	mov	r1, r4
   d41d6:	f000 fd92 	bl	d4cfe <_ZN5Print7printlnEPKc>

    /* INPUT: PUSH BUTTON */
    pinMode(B_TN, INPUT_PULLUP); // NO RESISTOR
   d41da:	2102      	movs	r1, #2
   d41dc:	4608      	mov	r0, r1
   d41de:	f001 fb7f 	bl	d58e0 <pinMode>

    connectToLAN();
   d41e2:	f7ff ff85 	bl	d40f0 <_Z12connectToLANv>
    /* START UDP SERVICE - USED BY SIMPLE-OSC */

    delay(5); // Force Serial.println in void setup()
   d41e6:	2005      	movs	r0, #5
   d41e8:	f000 fb66 	bl	d48b8 <delay>
    Serial.println("Completed void setup");
   d41ec:	f001 fa40 	bl	d5670 <_Z16_fetch_usbserialv>
}
   d41f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Completed void setup");
   d41f4:	4903      	ldr	r1, [pc, #12]	; (d4204 <setup+0x60>)
   d41f6:	f000 bd82 	b.w	d4cfe <_ZN5Print7printlnEPKc>
   d41fa:	bf00      	nop
   d41fc:	000d5e61 	.word	0x000d5e61
   d4200:	000d5e85 	.word	0x000d5e85
   d4204:	000d5e98 	.word	0x000d5e98

000d4208 <loop>:

void loop()
{
   d4208:	b508      	push	{r3, lr}
    if (digitalRead(B_TN) == LOW)
   d420a:	2002      	movs	r0, #2
   d420c:	f001 fb79 	bl	d5902 <digitalRead>
   d4210:	b960      	cbnz	r0, d422c <loop+0x24>
    {
        Serial.println("I'm pressing");
   d4212:	f001 fa2d 	bl	d5670 <_Z16_fetch_usbserialv>
   d4216:	4908      	ldr	r1, [pc, #32]	; (d4238 <loop+0x30>)
   d4218:	f000 fd71 	bl	d4cfe <_ZN5Print7printlnEPKc>
        sendOSCData(1);
   d421c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d4220:	f7ff ff94 	bl	d414c <_Z11sendOSCDataf>
        /* REQUEST LOCATION FROM GOOGLE */
        delay(1000);
   d4224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4228:	f000 fb46 	bl	d48b8 <delay>
    }

    sendOSCData(1.0);
    // If there is position data available, read and print it
}
   d422c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sendOSCData(1.0);
   d4230:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d4234:	f7ff bf8a 	b.w	d414c <_Z11sendOSCDataf>
   d4238:	000d5ead 	.word	0x000d5ead

000d423c <_GLOBAL__sub_I_touchStates>:
{
    Wire.beginTransmission(address);
    Wire.write(r);
    Wire.write(v);
    Wire.endTransmission();
}
   d423c:	b573      	push	{r0, r1, r4, r5, r6, lr}
UDP Udp;
   d423e:	4d12      	ldr	r5, [pc, #72]	; (d4288 <_GLOBAL__sub_I_touchStates+0x4c>)
   d4240:	4c12      	ldr	r4, [pc, #72]	; (d428c <_GLOBAL__sub_I_touchStates+0x50>)
IPAddress argonIP;
   d4242:	4e13      	ldr	r6, [pc, #76]	; (d4290 <_GLOBAL__sub_I_touchStates+0x54>)
UDP Udp;
   d4244:	4628      	mov	r0, r5
   d4246:	f001 f8b3 	bl	d53b0 <_ZN3UDPC1Ev>
   d424a:	4628      	mov	r0, r5
IPAddress argonIP;
   d424c:	4d11      	ldr	r5, [pc, #68]	; (d4294 <_GLOBAL__sub_I_touchStates+0x58>)
UDP Udp;
   d424e:	4912      	ldr	r1, [pc, #72]	; (d4298 <_GLOBAL__sub_I_touchStates+0x5c>)
   d4250:	4622      	mov	r2, r4
   d4252:	f001 fba9 	bl	d59a8 <__aeabi_atexit>
IPAddress argonIP;
   d4256:	4628      	mov	r0, r5
   d4258:	f000 fc06 	bl	d4a68 <_ZN9IPAddressC1Ev>
   d425c:	4622      	mov	r2, r4
   d425e:	4631      	mov	r1, r6
   d4260:	4628      	mov	r0, r5
IPAddress remoteIP(192, 168, 1, 9);
   d4262:	4d0e      	ldr	r5, [pc, #56]	; (d429c <_GLOBAL__sub_I_touchStates+0x60>)
IPAddress argonIP;
   d4264:	f001 fba0 	bl	d59a8 <__aeabi_atexit>
IPAddress remoteIP(192, 168, 1, 9);
   d4268:	2309      	movs	r3, #9
   d426a:	9300      	str	r3, [sp, #0]
   d426c:	22a8      	movs	r2, #168	; 0xa8
   d426e:	2301      	movs	r3, #1
   d4270:	21c0      	movs	r1, #192	; 0xc0
   d4272:	4628      	mov	r0, r5
   d4274:	f000 fc3c 	bl	d4af0 <_ZN9IPAddressC1Ehhhh>
   d4278:	4622      	mov	r2, r4
   d427a:	4631      	mov	r1, r6
   d427c:	4628      	mov	r0, r5
}
   d427e:	b002      	add	sp, #8
   d4280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IPAddress remoteIP(192, 168, 1, 9);
   d4284:	f001 bb90 	b.w	d59a8 <__aeabi_atexit>
   d4288:	2003e5c8 	.word	0x2003e5c8
   d428c:	2003e5c4 	.word	0x2003e5c4
   d4290:	000d40ab 	.word	0x000d40ab
   d4294:	2003e614 	.word	0x2003e614
   d4298:	000d40ad 	.word	0x000d40ad
   d429c:	2003e62c 	.word	0x2003e62c

000d42a0 <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
   d42a0:	2300      	movs	r3, #0
    inputDatas = NULL;
    incomingBufferSize = 0;
    
    outputDatas = NULL;
    outputDatasSize = 0;
   d42a2:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    incomingBuffer = NULL;
   d42a6:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
   d42a8:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
   d42aa:	6043      	str	r3, [r0, #4]
}
   d42ac:	4770      	bx	lr
	...

000d42b0 <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage(const char * address)
   d42b0:	b570      	push	{r4, r5, r6, lr}
   d42b2:	4604      	mov	r4, r0
   d42b4:	460d      	mov	r5, r1
   d42b6:	3008      	adds	r0, #8
   d42b8:	490d      	ldr	r1, [pc, #52]	; (d42f0 <_ZN10OSCMessageC1EPKc+0x40>)
   d42ba:	f000 fdbc 	bl	d4e36 <_ZN6StringC1EPKc>
   d42be:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d42c2:	490b      	ldr	r1, [pc, #44]	; (d42f0 <_ZN10OSCMessageC1EPKc+0x40>)
   d42c4:	f104 0018 	add.w	r0, r4, #24
   d42c8:	f000 fdb5 	bl	d4e36 <_ZN6StringC1EPKc>
   d42cc:	4908      	ldr	r1, [pc, #32]	; (d42f0 <_ZN10OSCMessageC1EPKc+0x40>)
   d42ce:	4630      	mov	r0, r6
   d42d0:	f000 fdb1 	bl	d4e36 <_ZN6StringC1EPKc>
   d42d4:	4906      	ldr	r1, [pc, #24]	; (d42f0 <_ZN10OSCMessageC1EPKc+0x40>)
   d42d6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d42da:	f000 fdac 	bl	d4e36 <_ZN6StringC1EPKc>
    setupMessage();
   d42de:	4620      	mov	r0, r4
   d42e0:	f7ff ffde 	bl	d42a0 <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
   d42e4:	4629      	mov	r1, r5
   d42e6:	4630      	mov	r0, r6
   d42e8:	f000 fdb9 	bl	d4e5e <_ZN6StringaSEPKc>
}
   d42ec:	4620      	mov	r0, r4
   d42ee:	bd70      	pop	{r4, r5, r6, pc}
   d42f0:	000d5e59 	.word	0x000d5e59

000d42f4 <_ZN10OSCMessageD1Ev>:

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d42f4:	b510      	push	{r4, lr}
   d42f6:	4604      	mov	r4, r0
{
    free(incomingBuffer);
   d42f8:	6800      	ldr	r0, [r0, #0]
   d42fa:	f000 fac5 	bl	d4888 <free>
    free(inputDatas);
   d42fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4300:	f000 fac2 	bl	d4888 <free>
    free(outputDatas);
   d4304:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4306:	f000 fabf 	bl	d4888 <free>
OSCMessage::~OSCMessage()
   d430a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d430e:	f000 fd47 	bl	d4da0 <_ZN6StringD1Ev>
   d4312:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4316:	f000 fd43 	bl	d4da0 <_ZN6StringD1Ev>
   d431a:	f104 0018 	add.w	r0, r4, #24
   d431e:	f000 fd3f 	bl	d4da0 <_ZN6StringD1Ev>
   d4322:	f104 0008 	add.w	r0, r4, #8
   d4326:	f000 fd3b 	bl	d4da0 <_ZN6StringD1Ev>
}
   d432a:	4620      	mov	r0, r4
   d432c:	bd10      	pop	{r4, pc}

000d432e <_ZN10OSCMessage8addFloatEf>:
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d432e:	b538      	push	{r3, r4, r5, lr}
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d4330:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
   d4332:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d4334:	3104      	adds	r1, #4
   d4336:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   d4338:	ee10 5a10 	vmov	r5, s0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d433c:	f000 faac 	bl	d4898 <realloc>
   d4340:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d4342:	b1e8      	cbz	r0, d4380 <_ZN10OSCMessage8addFloatEf+0x52>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
   d4344:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4346:	f3c5 6107 	ubfx	r1, r5, #24, #8
   d434a:	5481      	strb	r1, [r0, r2]
        outputDatas[outputDatasSize+1] = u.b[2];
   d434c:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4350:	440a      	add	r2, r1
   d4352:	f3c5 4107 	ubfx	r1, r5, #16, #8
   d4356:	7051      	strb	r1, [r2, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
   d4358:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d435c:	440a      	add	r2, r1
   d435e:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d4362:	7091      	strb	r1, [r2, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
   d4364:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4368:	440a      	add	r2, r1
        outputDatasSize += 4;
        outputTypes.concat('f');
   d436a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        outputDatas[outputDatasSize+3] = u.b[0];
   d436e:	70d5      	strb	r5, [r2, #3]
        outputDatasSize += 4;
   d4370:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4372:	3304      	adds	r3, #4
   d4374:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
   d4376:	2166      	movs	r1, #102	; 0x66
    }
}
   d4378:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputTypes.concat('f');
   d437c:	f000 bd98 	b.w	d4eb0 <_ZN6String6concatEc>
}
   d4380:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4384 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d4384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4388:	b08b      	sub	sp, #44	; 0x2c
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d438a:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
   d438e:	af00      	add	r7, sp, #0
   d4390:	4680      	mov	r8, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4392:	4648      	mov	r0, r9
{
   d4394:	460d      	mov	r5, r1
   d4396:	e9c7 3202 	strd	r3, r2, [r7, #8]
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d439a:	f001 fd43 	bl	d5e24 <strlen>
   d439e:	4606      	mov	r6, r0
   d43a0:	3003      	adds	r0, #3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d43a2:	0880      	lsrs	r0, r0, #2
   d43a4:	f001 fc4c 	bl	d5c40 <__aeabi_ui2d>
   d43a8:	4b3f      	ldr	r3, [pc, #252]	; (d44a8 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d43aa:	2200      	movs	r2, #0
   d43ac:	f001 fb0c 	bl	d59c8 <__adddf3>
   d43b0:	f001 fcc0 	bl	d5d34 <__aeabi_d2iz>
   d43b4:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
    int addresszeroCount = addressBitCount-strlen(outputAddress);
   d43b8:	ebc6 0680 	rsb	r6, r6, r0, lsl #2
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d43bc:	0084      	lsls	r4, r0, #2
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d43be:	4650      	mov	r0, sl
   d43c0:	f001 fd30 	bl	d5e24 <strlen>
    int outputBufferSize = addressBitCount+1;//address+padding+comma
   d43c4:	3401      	adds	r4, #1
    outputBufferSize += strlen(outputTypes);
   d43c6:	4683      	mov	fp, r0
   d43c8:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
   d43ca:	3001      	adds	r0, #1
   d43cc:	0880      	lsrs	r0, r0, #2
   d43ce:	f001 fc37 	bl	d5c40 <__aeabi_ui2d>
   d43d2:	4b35      	ldr	r3, [pc, #212]	; (d44a8 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d43d4:	2200      	movs	r2, #0
   d43d6:	f001 faf7 	bl	d59c8 <__adddf3>
   d43da:	f001 fcab 	bl	d5d34 <__aeabi_d2iz>
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d43de:	f1cb 0303 	rsb	r3, fp, #3
   d43e2:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
   d43e6:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
   d43ea:	603b      	str	r3, [r7, #0]
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
   d43ec:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
   d43ee:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
   d43f0:	1de2      	adds	r2, r4, #7
   d43f2:	f022 0207 	bic.w	r2, r2, #7
   d43f6:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
   d43fa:	2100      	movs	r1, #0
   d43fc:	4622      	mov	r2, r4
   d43fe:	4668      	mov	r0, sp
   d4400:	f001 fcdc 	bl	d5dbc <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
   d4404:	4648      	mov	r0, r9
   d4406:	f001 fd0d 	bl	d5e24 <strlen>
   d440a:	4649      	mov	r1, r9
   d440c:	4602      	mov	r2, r0
   d440e:	4668      	mov	r0, sp
   d4410:	f001 fcc6 	bl	d5da0 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
   d4414:	4648      	mov	r0, r9
   d4416:	f001 fd05 	bl	d5e24 <strlen>
   d441a:	eb0d 0206 	add.w	r2, sp, r6
   d441e:	212c      	movs	r1, #44	; 0x2c
   d4420:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
   d4422:	4648      	mov	r0, r9
   d4424:	f001 fcfe 	bl	d5e24 <strlen>
   d4428:	6078      	str	r0, [r7, #4]
   d442a:	4650      	mov	r0, sl
   d442c:	f001 fcfa 	bl	d5e24 <strlen>
   d4430:	6879      	ldr	r1, [r7, #4]
   d4432:	3101      	adds	r1, #1
   d4434:	4602      	mov	r2, r0
   d4436:	1988      	adds	r0, r1, r6
   d4438:	4468      	add	r0, sp
   d443a:	4651      	mov	r1, sl
   d443c:	f001 fcb0 	bl	d5da0 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
   d4440:	4648      	mov	r0, r9
   d4442:	f001 fcef 	bl	d5e24 <strlen>
   d4446:	4681      	mov	r9, r0
   d4448:	4650      	mov	r0, sl
   d444a:	f001 fceb 	bl	d5e24 <strlen>
   d444e:	4448      	add	r0, r9
   d4450:	3001      	adds	r0, #1
   d4452:	683b      	ldr	r3, [r7, #0]
   d4454:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   d4458:	4430      	add	r0, r6
   d445a:	4458      	add	r0, fp
   d445c:	461a      	mov	r2, r3
   d445e:	4468      	add	r0, sp
   d4460:	f001 fc9e 	bl	d5da0 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
   d4464:	682b      	ldr	r3, [r5, #0]
   d4466:	68fe      	ldr	r6, [r7, #12]
   d4468:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d446c:	4b0f      	ldr	r3, [pc, #60]	; (d44ac <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d446e:	613b      	str	r3, [r7, #16]
   d4470:	3604      	adds	r6, #4
   d4472:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4474:	f107 0c14 	add.w	ip, r7, #20
   d4478:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d447c:	6833      	ldr	r3, [r6, #0]
   d447e:	f88c 3000 	strb.w	r3, [ip]
   d4482:	893a      	ldrh	r2, [r7, #8]
   d4484:	f107 0110 	add.w	r1, r7, #16
   d4488:	4628      	mov	r0, r5
   d448a:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
   d448c:	682b      	ldr	r3, [r5, #0]
   d448e:	4622      	mov	r2, r4
   d4490:	4669      	mov	r1, sp
   d4492:	68db      	ldr	r3, [r3, #12]
   d4494:	4628      	mov	r0, r5
   d4496:	4798      	blx	r3
    udp.endPacket();
   d4498:	682b      	ldr	r3, [r5, #0]
   d449a:	4628      	mov	r0, r5
   d449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d449e:	4798      	blx	r3
}
   d44a0:	372c      	adds	r7, #44	; 0x2c
   d44a2:	46bd      	mov	sp, r7
   d44a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d44a8:	3fe00000 	.word	0x3fe00000
   d44ac:	000d5f20 	.word	0x000d5f20

000d44b0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d44b0:	b508      	push	{r3, lr}
   d44b2:	4b02      	ldr	r3, [pc, #8]	; (d44bc <os_mutex_recursive_create+0xc>)
   d44b4:	681b      	ldr	r3, [r3, #0]
   d44b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d44b8:	9301      	str	r3, [sp, #4]
   d44ba:	bd08      	pop	{r3, pc}
   d44bc:	00030248 	.word	0x00030248

000d44c0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d44c0:	b508      	push	{r3, lr}
   d44c2:	4b02      	ldr	r3, [pc, #8]	; (d44cc <os_mutex_recursive_destroy+0xc>)
   d44c4:	681b      	ldr	r3, [r3, #0]
   d44c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d44c8:	9301      	str	r3, [sp, #4]
   d44ca:	bd08      	pop	{r3, pc}
   d44cc:	00030248 	.word	0x00030248

000d44d0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d44d0:	b508      	push	{r3, lr}
   d44d2:	4b02      	ldr	r3, [pc, #8]	; (d44dc <HAL_RNG_GetRandomNumber+0xc>)
   d44d4:	681b      	ldr	r3, [r3, #0]
   d44d6:	685b      	ldr	r3, [r3, #4]
   d44d8:	9301      	str	r3, [sp, #4]
   d44da:	bd08      	pop	{r3, pc}
   d44dc:	00030218 	.word	0x00030218

000d44e0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d44e0:	b508      	push	{r3, lr}
   d44e2:	4b02      	ldr	r3, [pc, #8]	; (d44ec <HAL_Timer_Get_Milli_Seconds+0xc>)
   d44e4:	681b      	ldr	r3, [r3, #0]
   d44e6:	695b      	ldr	r3, [r3, #20]
   d44e8:	9301      	str	r3, [sp, #4]
   d44ea:	bd08      	pop	{r3, pc}
   d44ec:	00030218 	.word	0x00030218

000d44f0 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d44f0:	b508      	push	{r3, lr}
   d44f2:	4b02      	ldr	r3, [pc, #8]	; (d44fc <HAL_Pin_Mode+0xc>)
   d44f4:	681b      	ldr	r3, [r3, #0]
   d44f6:	689b      	ldr	r3, [r3, #8]
   d44f8:	9301      	str	r3, [sp, #4]
   d44fa:	bd08      	pop	{r3, pc}
   d44fc:	0003022c 	.word	0x0003022c

000d4500 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4500:	b508      	push	{r3, lr}
   d4502:	4b02      	ldr	r3, [pc, #8]	; (d450c <HAL_Get_Pin_Mode+0xc>)
   d4504:	681b      	ldr	r3, [r3, #0]
   d4506:	68db      	ldr	r3, [r3, #12]
   d4508:	9301      	str	r3, [sp, #4]
   d450a:	bd08      	pop	{r3, pc}
   d450c:	0003022c 	.word	0x0003022c

000d4510 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4510:	b508      	push	{r3, lr}
   d4512:	4b02      	ldr	r3, [pc, #8]	; (d451c <HAL_GPIO_Read+0xc>)
   d4514:	681b      	ldr	r3, [r3, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	9301      	str	r3, [sp, #4]
   d451a:	bd08      	pop	{r3, pc}
   d451c:	0003022c 	.word	0x0003022c

000d4520 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4520:	b508      	push	{r3, lr}
   d4522:	4b02      	ldr	r3, [pc, #8]	; (d452c <hal_i2c_write+0xc>)
   d4524:	681b      	ldr	r3, [r3, #0]
   d4526:	6a1b      	ldr	r3, [r3, #32]
   d4528:	9301      	str	r3, [sp, #4]
   d452a:	bd08      	pop	{r3, pc}
   d452c:	00030228 	.word	0x00030228

000d4530 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4530:	b508      	push	{r3, lr}
   d4532:	4b02      	ldr	r3, [pc, #8]	; (d453c <hal_i2c_available+0xc>)
   d4534:	681b      	ldr	r3, [r3, #0]
   d4536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4538:	9301      	str	r3, [sp, #4]
   d453a:	bd08      	pop	{r3, pc}
   d453c:	00030228 	.word	0x00030228

000d4540 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4540:	b508      	push	{r3, lr}
   d4542:	4b02      	ldr	r3, [pc, #8]	; (d454c <hal_i2c_read+0xc>)
   d4544:	681b      	ldr	r3, [r3, #0]
   d4546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4548:	9301      	str	r3, [sp, #4]
   d454a:	bd08      	pop	{r3, pc}
   d454c:	00030228 	.word	0x00030228

000d4550 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4550:	b508      	push	{r3, lr}
   d4552:	4b02      	ldr	r3, [pc, #8]	; (d455c <hal_i2c_peek+0xc>)
   d4554:	681b      	ldr	r3, [r3, #0]
   d4556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4558:	9301      	str	r3, [sp, #4]
   d455a:	bd08      	pop	{r3, pc}
   d455c:	00030228 	.word	0x00030228

000d4560 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4560:	b508      	push	{r3, lr}
   d4562:	4b02      	ldr	r3, [pc, #8]	; (d456c <hal_i2c_flush+0xc>)
   d4564:	681b      	ldr	r3, [r3, #0]
   d4566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4568:	9301      	str	r3, [sp, #4]
   d456a:	bd08      	pop	{r3, pc}
   d456c:	00030228 	.word	0x00030228

000d4570 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4570:	b508      	push	{r3, lr}
   d4572:	4b02      	ldr	r3, [pc, #8]	; (d457c <hal_i2c_is_enabled+0xc>)
   d4574:	681b      	ldr	r3, [r3, #0]
   d4576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4578:	9301      	str	r3, [sp, #4]
   d457a:	bd08      	pop	{r3, pc}
   d457c:	00030228 	.word	0x00030228

000d4580 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4580:	b508      	push	{r3, lr}
   d4582:	4b02      	ldr	r3, [pc, #8]	; (d458c <hal_i2c_init+0xc>)
   d4584:	681b      	ldr	r3, [r3, #0]
   d4586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4588:	9301      	str	r3, [sp, #4]
   d458a:	bd08      	pop	{r3, pc}
   d458c:	00030228 	.word	0x00030228

000d4590 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4590:	b508      	push	{r3, lr}
   d4592:	4b02      	ldr	r3, [pc, #8]	; (d459c <if_index_to_name+0xc>)
   d4594:	681b      	ldr	r3, [r3, #0]
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	9301      	str	r3, [sp, #4]
   d459a:	bd08      	pop	{r3, pc}
   d459c:	0003026c 	.word	0x0003026c

000d45a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d45a0:	b508      	push	{r3, lr}
   d45a2:	4b02      	ldr	r3, [pc, #8]	; (d45ac <inet_inet_ntop+0xc>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	695b      	ldr	r3, [r3, #20]
   d45a8:	9301      	str	r3, [sp, #4]
   d45aa:	bd08      	pop	{r3, pc}
   d45ac:	00030264 	.word	0x00030264

000d45b0 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d45b0:	b508      	push	{r3, lr}
   d45b2:	4b02      	ldr	r3, [pc, #8]	; (d45bc <inet_htonl+0xc>)
   d45b4:	681b      	ldr	r3, [r3, #0]
   d45b6:	6a1b      	ldr	r3, [r3, #32]
   d45b8:	9301      	str	r3, [sp, #4]
   d45ba:	bd08      	pop	{r3, pc}
   d45bc:	00030264 	.word	0x00030264

000d45c0 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d45c0:	b508      	push	{r3, lr}
   d45c2:	4b02      	ldr	r3, [pc, #8]	; (d45cc <inet_ntohs+0xc>)
   d45c4:	681b      	ldr	r3, [r3, #0]
   d45c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45c8:	9301      	str	r3, [sp, #4]
   d45ca:	bd08      	pop	{r3, pc}
   d45cc:	00030264 	.word	0x00030264

000d45d0 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d45d0:	b508      	push	{r3, lr}
   d45d2:	4b02      	ldr	r3, [pc, #8]	; (d45dc <inet_htons+0xc>)
   d45d4:	681b      	ldr	r3, [r3, #0]
   d45d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45d8:	9301      	str	r3, [sp, #4]
   d45da:	bd08      	pop	{r3, pc}
   d45dc:	00030264 	.word	0x00030264

000d45e0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <netdb_freeaddrinfo+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	689b      	ldr	r3, [r3, #8]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030268 	.word	0x00030268

000d45f0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <netdb_getaddrinfo+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	68db      	ldr	r3, [r3, #12]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030268 	.word	0x00030268

000d4600 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <sock_bind+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	685b      	ldr	r3, [r3, #4]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030238 	.word	0x00030238

000d4610 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <sock_setsockopt+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	699b      	ldr	r3, [r3, #24]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030238 	.word	0x00030238

000d4620 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <sock_close+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	69db      	ldr	r3, [r3, #28]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030238 	.word	0x00030238

000d4630 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <sock_recvfrom+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030238 	.word	0x00030238

000d4640 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <sock_sendto+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030238 	.word	0x00030238

000d4650 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <sock_socket+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030238 	.word	0x00030238

000d4660 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <hal_spi_init+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	69db      	ldr	r3, [r3, #28]
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030230 	.word	0x00030230

000d4670 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <hal_spi_is_enabled+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6a1b      	ldr	r3, [r3, #32]
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030230 	.word	0x00030230

000d4680 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <hal_usart_init+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	681b      	ldr	r3, [r3, #0]
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	0003023c 	.word	0x0003023c

000d4690 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <hal_usart_write+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	68db      	ldr	r3, [r3, #12]
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	0003023c 	.word	0x0003023c

000d46a0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <hal_usart_available+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	691b      	ldr	r3, [r3, #16]
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	0003023c 	.word	0x0003023c

000d46b0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <hal_usart_read+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	695b      	ldr	r3, [r3, #20]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003023c 	.word	0x0003023c

000d46c0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <hal_usart_peek+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	699b      	ldr	r3, [r3, #24]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003023c 	.word	0x0003023c

000d46d0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <hal_usart_flush+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	69db      	ldr	r3, [r3, #28]
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003023c 	.word	0x0003023c

000d46e0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <hal_usart_is_enabled+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6a1b      	ldr	r3, [r3, #32]
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003023c 	.word	0x0003023c

000d46f0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d46f0:	b508      	push	{r3, lr}
   d46f2:	4b02      	ldr	r3, [pc, #8]	; (d46fc <hal_usart_available_data_for_write+0xc>)
   d46f4:	681b      	ldr	r3, [r3, #0]
   d46f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46f8:	9301      	str	r3, [sp, #4]
   d46fa:	bd08      	pop	{r3, pc}
   d46fc:	0003023c 	.word	0x0003023c

000d4700 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4700:	b508      	push	{r3, lr}
   d4702:	4b02      	ldr	r3, [pc, #8]	; (d470c <HAL_USB_USART_Init+0xc>)
   d4704:	681b      	ldr	r3, [r3, #0]
   d4706:	681b      	ldr	r3, [r3, #0]
   d4708:	9301      	str	r3, [sp, #4]
   d470a:	bd08      	pop	{r3, pc}
   d470c:	0003024c 	.word	0x0003024c

000d4710 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4710:	b508      	push	{r3, lr}
   d4712:	4b02      	ldr	r3, [pc, #8]	; (d471c <HAL_USB_USART_Begin+0xc>)
   d4714:	681b      	ldr	r3, [r3, #0]
   d4716:	685b      	ldr	r3, [r3, #4]
   d4718:	9301      	str	r3, [sp, #4]
   d471a:	bd08      	pop	{r3, pc}
   d471c:	0003024c 	.word	0x0003024c

000d4720 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4720:	b508      	push	{r3, lr}
   d4722:	4b02      	ldr	r3, [pc, #8]	; (d472c <HAL_USB_USART_Available_Data+0xc>)
   d4724:	681b      	ldr	r3, [r3, #0]
   d4726:	691b      	ldr	r3, [r3, #16]
   d4728:	9301      	str	r3, [sp, #4]
   d472a:	bd08      	pop	{r3, pc}
   d472c:	0003024c 	.word	0x0003024c

000d4730 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4730:	b508      	push	{r3, lr}
   d4732:	4b02      	ldr	r3, [pc, #8]	; (d473c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	695b      	ldr	r3, [r3, #20]
   d4738:	9301      	str	r3, [sp, #4]
   d473a:	bd08      	pop	{r3, pc}
   d473c:	0003024c 	.word	0x0003024c

000d4740 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4740:	b508      	push	{r3, lr}
   d4742:	4b02      	ldr	r3, [pc, #8]	; (d474c <HAL_USB_USART_Receive_Data+0xc>)
   d4744:	681b      	ldr	r3, [r3, #0]
   d4746:	699b      	ldr	r3, [r3, #24]
   d4748:	9301      	str	r3, [sp, #4]
   d474a:	bd08      	pop	{r3, pc}
   d474c:	0003024c 	.word	0x0003024c

000d4750 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b02      	ldr	r3, [pc, #8]	; (d475c <HAL_USB_USART_Send_Data+0xc>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	69db      	ldr	r3, [r3, #28]
   d4758:	9301      	str	r3, [sp, #4]
   d475a:	bd08      	pop	{r3, pc}
   d475c:	0003024c 	.word	0x0003024c

000d4760 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4760:	b508      	push	{r3, lr}
   d4762:	4b02      	ldr	r3, [pc, #8]	; (d476c <HAL_USB_USART_Flush_Data+0xc>)
   d4764:	681b      	ldr	r3, [r3, #0]
   d4766:	6a1b      	ldr	r3, [r3, #32]
   d4768:	9301      	str	r3, [sp, #4]
   d476a:	bd08      	pop	{r3, pc}
   d476c:	0003024c 	.word	0x0003024c

000d4770 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4770:	b508      	push	{r3, lr}
   d4772:	4b02      	ldr	r3, [pc, #8]	; (d477c <set_system_mode+0xc>)
   d4774:	681b      	ldr	r3, [r3, #0]
   d4776:	685b      	ldr	r3, [r3, #4]
   d4778:	9301      	str	r3, [sp, #4]
   d477a:	bd08      	pop	{r3, pc}
   d477c:	00030220 	.word	0x00030220

000d4780 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4780:	b508      	push	{r3, lr}
   d4782:	4b02      	ldr	r3, [pc, #8]	; (d478c <system_delay_ms+0xc>)
   d4784:	681b      	ldr	r3, [r3, #0]
   d4786:	695b      	ldr	r3, [r3, #20]
   d4788:	9301      	str	r3, [sp, #4]
   d478a:	bd08      	pop	{r3, pc}
   d478c:	00030220 	.word	0x00030220

000d4790 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4790:	b508      	push	{r3, lr}
   d4792:	4b03      	ldr	r3, [pc, #12]	; (d47a0 <system_ctrl_set_app_request_handler+0x10>)
   d4794:	681b      	ldr	r3, [r3, #0]
   d4796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d479a:	9301      	str	r3, [sp, #4]
   d479c:	bd08      	pop	{r3, pc}
   d479e:	0000      	.short	0x0000
   d47a0:	00030220 	.word	0x00030220

000d47a4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b03      	ldr	r3, [pc, #12]	; (d47b4 <system_ctrl_set_result+0x10>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47ae:	9301      	str	r3, [sp, #4]
   d47b0:	bd08      	pop	{r3, pc}
   d47b2:	0000      	.short	0x0000
   d47b4:	00030220 	.word	0x00030220

000d47b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030244 	.word	0x00030244

000d47c8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <network_config+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	681b      	ldr	r3, [r3, #0]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030240 	.word	0x00030240

000d47d8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <network_connect+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	685b      	ldr	r3, [r3, #4]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030240 	.word	0x00030240

000d47e8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <network_connecting+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	689b      	ldr	r3, [r3, #8]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030240 	.word	0x00030240

000d47f8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <network_disconnect+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	68db      	ldr	r3, [r3, #12]
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030240 	.word	0x00030240

000d4808 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <network_ready+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	691b      	ldr	r3, [r3, #16]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030240 	.word	0x00030240

000d4818 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <network_on+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	695b      	ldr	r3, [r3, #20]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030240 	.word	0x00030240

000d4828 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <network_off+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	699b      	ldr	r3, [r3, #24]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030240 	.word	0x00030240

000d4838 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <network_listen+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	69db      	ldr	r3, [r3, #28]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030240 	.word	0x00030240

000d4848 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <network_listening+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6a1b      	ldr	r3, [r3, #32]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030240 	.word	0x00030240

000d4858 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <network_set_listen_timeout+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030240 	.word	0x00030240

000d4868 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <network_get_listen_timeout+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030240 	.word	0x00030240

000d4878 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <malloc+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	681b      	ldr	r3, [r3, #0]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003021c 	.word	0x0003021c

000d4888 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <free+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	685b      	ldr	r3, [r3, #4]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003021c 	.word	0x0003021c

000d4898 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <realloc+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	689b      	ldr	r3, [r3, #8]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003021c 	.word	0x0003021c

000d48a8 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <newlib_impure_ptr_callback+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003021c 	.word	0x0003021c

000d48b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d48b8:	2100      	movs	r1, #0
   d48ba:	f7ff bf61 	b.w	d4780 <system_delay_ms>

000d48be <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48be:	b510      	push	{r4, lr}
   d48c0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48c2:	6800      	ldr	r0, [r0, #0]
   d48c4:	b108      	cbz	r0, d48ca <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48c6:	f7ff fdfb 	bl	d44c0 <os_mutex_recursive_destroy>
    }
   d48ca:	4620      	mov	r0, r4
   d48cc:	bd10      	pop	{r4, pc}
	...

000d48d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48d0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d48d2:	4c06      	ldr	r4, [pc, #24]	; (d48ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48d4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d48d6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d48d8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d48da:	f7ff fde9 	bl	d44b0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d48de:	4620      	mov	r0, r4
   d48e0:	4a03      	ldr	r2, [pc, #12]	; (d48f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48e2:	4904      	ldr	r1, [pc, #16]	; (d48f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d48e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d48e8:	f001 b85e 	b.w	d59a8 <__aeabi_atexit>
   d48ec:	2003e644 	.word	0x2003e644
   d48f0:	2003e5c4 	.word	0x2003e5c4
   d48f4:	000d48bf 	.word	0x000d48bf

000d48f8 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48fa:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d48fc:	4604      	mov	r4, r0
      if (_M_manager)
   d48fe:	b113      	cbz	r3, d4906 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4900:	2203      	movs	r2, #3
   d4902:	4601      	mov	r1, r0
   d4904:	4798      	blx	r3
    }
   d4906:	4620      	mov	r0, r4
   d4908:	bd10      	pop	{r4, pc}

000d490a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d490a:	2200      	movs	r2, #0
   d490c:	6840      	ldr	r0, [r0, #4]
   d490e:	4611      	mov	r1, r2
   d4910:	f7ff bf9a 	b.w	d4848 <network_listening>

000d4914 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4914:	2200      	movs	r2, #0
   d4916:	6840      	ldr	r0, [r0, #4]
   d4918:	4611      	mov	r1, r2
   d491a:	f7ff bfa5 	b.w	d4868 <network_get_listen_timeout>

000d491e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d491e:	6840      	ldr	r0, [r0, #4]
   d4920:	2200      	movs	r2, #0
   d4922:	f7ff bf99 	b.w	d4858 <network_set_listen_timeout>

000d4926 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4926:	6840      	ldr	r0, [r0, #4]
   d4928:	2200      	movs	r2, #0
   d492a:	f081 0101 	eor.w	r1, r1, #1
   d492e:	f7ff bf83 	b.w	d4838 <network_listen>

000d4932 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4932:	2300      	movs	r3, #0
   d4934:	6840      	ldr	r0, [r0, #4]
   d4936:	461a      	mov	r2, r3
   d4938:	4619      	mov	r1, r3
   d493a:	f7ff bf75 	b.w	d4828 <network_off>

000d493e <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d493e:	2300      	movs	r3, #0
   d4940:	6840      	ldr	r0, [r0, #4]
   d4942:	461a      	mov	r2, r3
   d4944:	4619      	mov	r1, r3
   d4946:	f7ff bf67 	b.w	d4818 <network_on>

000d494a <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d494a:	2200      	movs	r2, #0
   d494c:	6840      	ldr	r0, [r0, #4]
   d494e:	4611      	mov	r1, r2
   d4950:	f7ff bf5a 	b.w	d4808 <network_ready>

000d4954 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4954:	2200      	movs	r2, #0
   d4956:	6840      	ldr	r0, [r0, #4]
   d4958:	4611      	mov	r1, r2
   d495a:	f7ff bf45 	b.w	d47e8 <network_connecting>

000d495e <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d495e:	6840      	ldr	r0, [r0, #4]
   d4960:	2200      	movs	r2, #0
   d4962:	2102      	movs	r1, #2
   d4964:	f7ff bf48 	b.w	d47f8 <network_disconnect>

000d4968 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4968:	2300      	movs	r3, #0
   d496a:	6840      	ldr	r0, [r0, #4]
   d496c:	461a      	mov	r2, r3
   d496e:	f7ff bf33 	b.w	d47d8 <network_connect>
	...

000d4974 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4974:	4b02      	ldr	r3, [pc, #8]	; (d4980 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4976:	2203      	movs	r2, #3
   d4978:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d497a:	4a02      	ldr	r2, [pc, #8]	; (d4984 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d497c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d497e:	4770      	bx	lr
   d4980:	2003e648 	.word	0x2003e648
   d4984:	000d5ec4 	.word	0x000d5ec4

000d4988 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4988:	4770      	bx	lr

000d498a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d498a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d498c:	4606      	mov	r6, r0
   d498e:	4615      	mov	r5, r2
   d4990:	460c      	mov	r4, r1
   d4992:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4994:	42bc      	cmp	r4, r7
   d4996:	d006      	beq.n	d49a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4998:	6833      	ldr	r3, [r6, #0]
   d499a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d499e:	689b      	ldr	r3, [r3, #8]
   d49a0:	4630      	mov	r0, r6
   d49a2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d49a4:	e7f6      	b.n	d4994 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d49a6:	4628      	mov	r0, r5
   d49a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49aa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d49aa:	7c00      	ldrb	r0, [r0, #16]
   d49ac:	2200      	movs	r2, #0
   d49ae:	f7ff bdb7 	b.w	d4520 <hal_i2c_write>

000d49b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d49b2:	7c00      	ldrb	r0, [r0, #16]
   d49b4:	2100      	movs	r1, #0
   d49b6:	f7ff bdbb 	b.w	d4530 <hal_i2c_available>

000d49ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d49ba:	7c00      	ldrb	r0, [r0, #16]
   d49bc:	2100      	movs	r1, #0
   d49be:	f7ff bdbf 	b.w	d4540 <hal_i2c_read>

000d49c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d49c2:	7c00      	ldrb	r0, [r0, #16]
   d49c4:	2100      	movs	r1, #0
   d49c6:	f7ff bdc3 	b.w	d4550 <hal_i2c_peek>

000d49ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d49ca:	7c00      	ldrb	r0, [r0, #16]
   d49cc:	2100      	movs	r1, #0
   d49ce:	f7ff bdc7 	b.w	d4560 <hal_i2c_flush>

000d49d2 <_ZN7TwoWireD0Ev>:
   d49d2:	b510      	push	{r4, lr}
   d49d4:	2114      	movs	r1, #20
   d49d6:	4604      	mov	r4, r0
   d49d8:	f000 ffeb 	bl	d59b2 <_ZdlPvj>
   d49dc:	4620      	mov	r0, r4
   d49de:	bd10      	pop	{r4, pc}

000d49e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d49e0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49e6:	4604      	mov	r4, r0
   d49e8:	4608      	mov	r0, r1
   d49ea:	2100      	movs	r1, #0
   d49ec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d49f0:	4b03      	ldr	r3, [pc, #12]	; (d4a00 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d49f2:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d49f4:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d49f6:	4611      	mov	r1, r2
   d49f8:	f7ff fdc2 	bl	d4580 <hal_i2c_init>
}
   d49fc:	4620      	mov	r0, r4
   d49fe:	bd10      	pop	{r4, pc}
   d4a00:	000d5ef8 	.word	0x000d5ef8

000d4a04 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a04:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a06:	7d03      	ldrb	r3, [r0, #20]
   d4a08:	2b06      	cmp	r3, #6
{
   d4a0a:	b08d      	sub	sp, #52	; 0x34
   d4a0c:	460e      	mov	r6, r1
   d4a0e:	f100 0704 	add.w	r7, r0, #4
   d4a12:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4a16:	d012      	beq.n	d4a3e <_ZNK9IPAddress7printToER5Print+0x3a>
   d4a18:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4a1c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a20:	220a      	movs	r2, #10
   d4a22:	4630      	mov	r0, r6
   d4a24:	f000 f97f 	bl	d4d26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a28:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a2a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4a2c:	d019      	beq.n	d4a62 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4a2e:	2c00      	cmp	r4, #0
   d4a30:	d0f4      	beq.n	d4a1c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4a32:	212e      	movs	r1, #46	; 0x2e
   d4a34:	4630      	mov	r0, r6
   d4a36:	f000 f94d 	bl	d4cd4 <_ZN5Print5printEc>
   d4a3a:	4404      	add	r4, r0
   d4a3c:	e7ee      	b.n	d4a1c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a3e:	232f      	movs	r3, #47	; 0x2f
   d4a40:	466a      	mov	r2, sp
   d4a42:	4639      	mov	r1, r7
   d4a44:	200a      	movs	r0, #10
		buf[0] = 0;
   d4a46:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a4a:	f7ff fda9 	bl	d45a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4a4e:	4668      	mov	r0, sp
   d4a50:	f001 f9e8 	bl	d5e24 <strlen>
   d4a54:	6833      	ldr	r3, [r6, #0]
   d4a56:	4602      	mov	r2, r0
   d4a58:	68db      	ldr	r3, [r3, #12]
   d4a5a:	4669      	mov	r1, sp
   d4a5c:	4630      	mov	r0, r6
   d4a5e:	4798      	blx	r3
   d4a60:	4604      	mov	r4, r0
    }
    return n;
}
   d4a62:	4620      	mov	r0, r4
   d4a64:	b00d      	add	sp, #52	; 0x34
   d4a66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a68 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4a68:	b510      	push	{r4, lr}
   d4a6a:	4b05      	ldr	r3, [pc, #20]	; (d4a80 <_ZN9IPAddressC1Ev+0x18>)
   d4a6c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a6e:	2211      	movs	r2, #17
   d4a70:	f840 3b04 	str.w	r3, [r0], #4
   d4a74:	2100      	movs	r1, #0
   d4a76:	f001 f9a1 	bl	d5dbc <memset>
}
   d4a7a:	4620      	mov	r0, r4
   d4a7c:	bd10      	pop	{r4, pc}
   d4a7e:	bf00      	nop
   d4a80:	000d5f20 	.word	0x000d5f20

000d4a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4a84:	4603      	mov	r3, r0
   d4a86:	4a07      	ldr	r2, [pc, #28]	; (d4aa4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4a88:	b510      	push	{r4, lr}
   d4a8a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4a8e:	f101 0210 	add.w	r2, r1, #16
   d4a92:	f851 4b04 	ldr.w	r4, [r1], #4
   d4a96:	f843 4b04 	str.w	r4, [r3], #4
   d4a9a:	4291      	cmp	r1, r2
   d4a9c:	d1f9      	bne.n	d4a92 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4a9e:	780a      	ldrb	r2, [r1, #0]
   d4aa0:	701a      	strb	r2, [r3, #0]
}
   d4aa2:	bd10      	pop	{r4, pc}
   d4aa4:	000d5f20 	.word	0x000d5f20

000d4aa8 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d4aa8:	7d03      	ldrb	r3, [r0, #20]
   d4aaa:	2b04      	cmp	r3, #4
   d4aac:	d104      	bne.n	d4ab8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d4aae:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4ab0:	3800      	subs	r0, #0
   d4ab2:	bf18      	it	ne
   d4ab4:	2001      	movne	r0, #1
   d4ab6:	4770      	bx	lr
    } else if (version() == 6) {
   d4ab8:	2b06      	cmp	r3, #6
   d4aba:	d107      	bne.n	d4acc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4abc:	6843      	ldr	r3, [r0, #4]
   d4abe:	b93b      	cbnz	r3, d4ad0 <_ZNK9IPAddresscvbEv+0x28>
   d4ac0:	6883      	ldr	r3, [r0, #8]
   d4ac2:	b92b      	cbnz	r3, d4ad0 <_ZNK9IPAddresscvbEv+0x28>
   d4ac4:	68c3      	ldr	r3, [r0, #12]
   d4ac6:	b91b      	cbnz	r3, d4ad0 <_ZNK9IPAddresscvbEv+0x28>
   d4ac8:	6900      	ldr	r0, [r0, #16]
   d4aca:	e7f1      	b.n	d4ab0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d4acc:	2000      	movs	r0, #0
   d4ace:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4ad0:	2001      	movs	r0, #1
}
   d4ad2:	4770      	bx	lr

000d4ad4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4ad4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4ad6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4ada:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4ade:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4ae2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4ae6:	2304      	movs	r3, #4
   d4ae8:	6041      	str	r1, [r0, #4]
   d4aea:	7503      	strb	r3, [r0, #20]
}
   d4aec:	bd10      	pop	{r4, pc}
	...

000d4af0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d4af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4af2:	4d04      	ldr	r5, [pc, #16]	; (d4b04 <_ZN9IPAddressC1Ehhhh+0x14>)
   d4af4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d4af6:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d4afa:	9500      	str	r5, [sp, #0]
   d4afc:	f7ff ffea 	bl	d4ad4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4b00:	b003      	add	sp, #12
   d4b02:	bd30      	pop	{r4, r5, pc}
   d4b04:	000d5f20 	.word	0x000d5f20

000d4b08 <_ZN9IPAddressaSEPKh>:
{
   d4b08:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b0a:	78cb      	ldrb	r3, [r1, #3]
   d4b0c:	9300      	str	r3, [sp, #0]
   d4b0e:	788b      	ldrb	r3, [r1, #2]
   d4b10:	784a      	ldrb	r2, [r1, #1]
   d4b12:	7809      	ldrb	r1, [r1, #0]
   d4b14:	f7ff ffde 	bl	d4ad4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4b18:	b002      	add	sp, #8
   d4b1a:	bd10      	pop	{r4, pc}

000d4b1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b1c:	4b01      	ldr	r3, [pc, #4]	; (d4b24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b1e:	4a02      	ldr	r2, [pc, #8]	; (d4b28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b20:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4b22:	4770      	bx	lr
   d4b24:	2003e650 	.word	0x2003e650
   d4b28:	000d5f2c 	.word	0x000d5f2c

000d4b2c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4b2c:	2300      	movs	r3, #0
   d4b2e:	6840      	ldr	r0, [r0, #4]
   d4b30:	461a      	mov	r2, r3
   d4b32:	f7ff be51 	b.w	d47d8 <network_connect>

000d4b36 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4b36:	6840      	ldr	r0, [r0, #4]
   d4b38:	2200      	movs	r2, #0
   d4b3a:	2102      	movs	r1, #2
   d4b3c:	f7ff be5c 	b.w	d47f8 <network_disconnect>

000d4b40 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4b40:	2200      	movs	r2, #0
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	4611      	mov	r1, r2
   d4b46:	f7ff be4f 	b.w	d47e8 <network_connecting>

000d4b4a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	6840      	ldr	r0, [r0, #4]
   d4b4e:	4611      	mov	r1, r2
   d4b50:	f7ff be5a 	b.w	d4808 <network_ready>

000d4b54 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4b54:	2300      	movs	r3, #0
   d4b56:	6840      	ldr	r0, [r0, #4]
   d4b58:	461a      	mov	r2, r3
   d4b5a:	4619      	mov	r1, r3
   d4b5c:	f7ff be5c 	b.w	d4818 <network_on>

000d4b60 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4b60:	2300      	movs	r3, #0
   d4b62:	6840      	ldr	r0, [r0, #4]
   d4b64:	461a      	mov	r2, r3
   d4b66:	4619      	mov	r1, r3
   d4b68:	f7ff be5e 	b.w	d4828 <network_off>

000d4b6c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4b6c:	6840      	ldr	r0, [r0, #4]
   d4b6e:	2200      	movs	r2, #0
   d4b70:	f081 0101 	eor.w	r1, r1, #1
   d4b74:	f7ff be60 	b.w	d4838 <network_listen>

000d4b78 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4b78:	6840      	ldr	r0, [r0, #4]
   d4b7a:	2200      	movs	r2, #0
   d4b7c:	f7ff be6c 	b.w	d4858 <network_set_listen_timeout>

000d4b80 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4b80:	2200      	movs	r2, #0
   d4b82:	6840      	ldr	r0, [r0, #4]
   d4b84:	4611      	mov	r1, r2
   d4b86:	f7ff be6f 	b.w	d4868 <network_get_listen_timeout>

000d4b8a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4b8a:	2200      	movs	r2, #0
   d4b8c:	6840      	ldr	r0, [r0, #4]
   d4b8e:	4611      	mov	r1, r2
   d4b90:	f7ff be5a 	b.w	d4848 <network_listening>

000d4b94 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4b98:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4b9a:	b095      	sub	sp, #84	; 0x54
   d4b9c:	4616      	mov	r6, r2
   d4b9e:	460d      	mov	r5, r1
   d4ba0:	4607      	mov	r7, r0
    IPAddress addr;
   d4ba2:	f7ff ff61 	bl	d4a68 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4ba6:	4621      	mov	r1, r4
   d4ba8:	2218      	movs	r2, #24
   d4baa:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4bac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4bae:	f001 f905 	bl	d5dbc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4bb2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4bb4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4bb8:	4621      	mov	r1, r4
   d4bba:	466b      	mov	r3, sp
   d4bbc:	aa0c      	add	r2, sp, #48	; 0x30
   d4bbe:	4630      	mov	r0, r6
   d4bc0:	f7ff fd16 	bl	d45f0 <netdb_getaddrinfo>
    if (!r) {
   d4bc4:	4604      	mov	r4, r0
   d4bc6:	2800      	cmp	r0, #0
   d4bc8:	d146      	bne.n	d4c58 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4bca:	4602      	mov	r2, r0
   d4bcc:	2101      	movs	r1, #1
   d4bce:	6868      	ldr	r0, [r5, #4]
   d4bd0:	f7ff fe1a 	bl	d4808 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4bd4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4bd6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4bd8:	4622      	mov	r2, r4
   d4bda:	6868      	ldr	r0, [r5, #4]
   d4bdc:	f7ff fe14 	bl	d4808 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4be0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4be2:	4681      	mov	r9, r0
        bool ok = false;
   d4be4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4be6:	2e00      	cmp	r6, #0
   d4be8:	d036      	beq.n	d4c58 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4bea:	2900      	cmp	r1, #0
   d4bec:	d134      	bne.n	d4c58 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4bee:	6873      	ldr	r3, [r6, #4]
   d4bf0:	2b02      	cmp	r3, #2
   d4bf2:	d003      	beq.n	d4bfc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4bf4:	2b0a      	cmp	r3, #10
   d4bf6:	d00b      	beq.n	d4c10 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4bf8:	69f6      	ldr	r6, [r6, #28]
   d4bfa:	e7f4      	b.n	d4be6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4bfc:	f1b8 0f00 	cmp.w	r8, #0
   d4c00:	d004      	beq.n	d4c0c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4c02:	6971      	ldr	r1, [r6, #20]
   d4c04:	4638      	mov	r0, r7
   d4c06:	3104      	adds	r1, #4
   d4c08:	f7ff ff7e 	bl	d4b08 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4c0c:	4641      	mov	r1, r8
   d4c0e:	e7f3      	b.n	d4bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4c10:	f1b9 0f00 	cmp.w	r9, #0
   d4c14:	d101      	bne.n	d4c1a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4c16:	4649      	mov	r1, r9
   d4c18:	e7ee      	b.n	d4bf8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4c1a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4c1c:	2210      	movs	r2, #16
   d4c1e:	a801      	add	r0, sp, #4
   d4c20:	f001 f8cc 	bl	d5dbc <memset>
                    a.v = 6;
   d4c24:	2306      	movs	r3, #6
   d4c26:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4c2a:	ad01      	add	r5, sp, #4
   d4c2c:	f104 0308 	add.w	r3, r4, #8
   d4c30:	3418      	adds	r4, #24
   d4c32:	6818      	ldr	r0, [r3, #0]
   d4c34:	6859      	ldr	r1, [r3, #4]
   d4c36:	462a      	mov	r2, r5
   d4c38:	c203      	stmia	r2!, {r0, r1}
   d4c3a:	3308      	adds	r3, #8
   d4c3c:	42a3      	cmp	r3, r4
   d4c3e:	4615      	mov	r5, r2
   d4c40:	d1f7      	bne.n	d4c32 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4c42:	a901      	add	r1, sp, #4
   d4c44:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4c46:	ad07      	add	r5, sp, #28
   d4c48:	f7ff ff1c 	bl	d4a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4c4e:	1d3c      	adds	r4, r7, #4
   d4c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4c52:	682b      	ldr	r3, [r5, #0]
   d4c54:	7023      	strb	r3, [r4, #0]
   d4c56:	e7de      	b.n	d4c16 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4c58:	9800      	ldr	r0, [sp, #0]
   d4c5a:	f7ff fcc1 	bl	d45e0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4c5e:	4638      	mov	r0, r7
   d4c60:	b015      	add	sp, #84	; 0x54
   d4c62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4c68 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4c68:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4c6a:	4a03      	ldr	r2, [pc, #12]	; (d4c78 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4c6c:	601a      	str	r2, [r3, #0]
   d4c6e:	2200      	movs	r2, #0
   d4c70:	605a      	str	r2, [r3, #4]

} // spark
   d4c72:	4770      	bx	lr
   d4c74:	2003e654 	.word	0x2003e654
   d4c78:	000d5f38 	.word	0x000d5f38

000d4c7c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c7e:	4606      	mov	r6, r0
   d4c80:	460d      	mov	r5, r1
  size_t n = 0;
   d4c82:	188f      	adds	r7, r1, r2
   d4c84:	2400      	movs	r4, #0
  while (size--) {
   d4c86:	42bd      	cmp	r5, r7
   d4c88:	d00c      	beq.n	d4ca4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4c8a:	6833      	ldr	r3, [r6, #0]
   d4c8c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4c90:	689b      	ldr	r3, [r3, #8]
   d4c92:	4630      	mov	r0, r6
   d4c94:	4798      	blx	r3
     if (chunk>=0)
   d4c96:	1e03      	subs	r3, r0, #0
   d4c98:	db01      	blt.n	d4c9e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4c9a:	441c      	add	r4, r3
  while (size--) {
   d4c9c:	e7f3      	b.n	d4c86 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4c9e:	2c00      	cmp	r4, #0
   d4ca0:	bf08      	it	eq
   d4ca2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ca4:	4620      	mov	r0, r4
   d4ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ca8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4ca8:	b513      	push	{r0, r1, r4, lr}
   d4caa:	4604      	mov	r4, r0
    }
   d4cac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4cae:	b159      	cbz	r1, d4cc8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4cb0:	9101      	str	r1, [sp, #4]
   d4cb2:	f001 f8b7 	bl	d5e24 <strlen>
   d4cb6:	6823      	ldr	r3, [r4, #0]
   d4cb8:	9901      	ldr	r1, [sp, #4]
   d4cba:	68db      	ldr	r3, [r3, #12]
   d4cbc:	4602      	mov	r2, r0
   d4cbe:	4620      	mov	r0, r4
    }
   d4cc0:	b002      	add	sp, #8
   d4cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4cc6:	4718      	bx	r3
    }
   d4cc8:	b002      	add	sp, #8
   d4cca:	bd10      	pop	{r4, pc}

000d4ccc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4ccc:	b508      	push	{r3, lr}
  return write(str);
   d4cce:	f7ff ffeb 	bl	d4ca8 <_ZN5Print5writeEPKc>
}
   d4cd2:	bd08      	pop	{r3, pc}

000d4cd4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4cd4:	6803      	ldr	r3, [r0, #0]
   d4cd6:	689b      	ldr	r3, [r3, #8]
   d4cd8:	4718      	bx	r3

000d4cda <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d4cda:	680a      	ldr	r2, [r1, #0]
 {
   d4cdc:	460b      	mov	r3, r1
   return x.printTo(*this);
   d4cde:	6812      	ldr	r2, [r2, #0]
   d4ce0:	4601      	mov	r1, r0
   d4ce2:	4618      	mov	r0, r3
   d4ce4:	4710      	bx	r2

000d4ce6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ce6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ce8:	210d      	movs	r1, #13
{
   d4cea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4cec:	f7ff fff2 	bl	d4cd4 <_ZN5Print5printEc>
  n += print('\n');
   d4cf0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4cf2:	4604      	mov	r4, r0
  n += print('\n');
   d4cf4:	4628      	mov	r0, r5
   d4cf6:	f7ff ffed 	bl	d4cd4 <_ZN5Print5printEc>
  return n;
}
   d4cfa:	4420      	add	r0, r4
   d4cfc:	bd38      	pop	{r3, r4, r5, pc}

000d4cfe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4cfe:	b538      	push	{r3, r4, r5, lr}
   d4d00:	4605      	mov	r5, r0
  return write(str);
   d4d02:	f7ff ffd1 	bl	d4ca8 <_ZN5Print5writeEPKc>
   d4d06:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4d08:	4628      	mov	r0, r5
   d4d0a:	f7ff ffec 	bl	d4ce6 <_ZN5Print7printlnEv>
  return n;
}
   d4d0e:	4420      	add	r0, r4
   d4d10:	bd38      	pop	{r3, r4, r5, pc}

000d4d12 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   d4d12:	b538      	push	{r3, r4, r5, lr}
   d4d14:	4605      	mov	r5, r0
   size_t n = print(x);
   d4d16:	f7ff ffe0 	bl	d4cda <_ZN5Print5printERK9Printable>
   d4d1a:	4604      	mov	r4, r0
   n += println();
   d4d1c:	4628      	mov	r0, r5
   d4d1e:	f7ff ffe2 	bl	d4ce6 <_ZN5Print7printlnEv>
   return n;
 }
   d4d22:	4420      	add	r0, r4
   d4d24:	bd38      	pop	{r3, r4, r5, pc}

000d4d26 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d26:	b530      	push	{r4, r5, lr}
   d4d28:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d2a:	2300      	movs	r3, #0
   d4d2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d30:	2a01      	cmp	r2, #1
   d4d32:	bf98      	it	ls
   d4d34:	220a      	movls	r2, #10
   d4d36:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d38:	460d      	mov	r5, r1
   d4d3a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4d3e:	fb01 5312 	mls	r3, r1, r2, r5
   d4d42:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d46:	2b09      	cmp	r3, #9
   d4d48:	bf94      	ite	ls
   d4d4a:	3330      	addls	r3, #48	; 0x30
   d4d4c:	3337      	addhi	r3, #55	; 0x37
   d4d4e:	b2db      	uxtb	r3, r3
  } while(n);
   d4d50:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d52:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4d56:	d9ef      	bls.n	d4d38 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4d58:	4621      	mov	r1, r4
   d4d5a:	f7ff ffa5 	bl	d4ca8 <_ZN5Print5writeEPKc>
}
   d4d5e:	b00b      	add	sp, #44	; 0x2c
   d4d60:	bd30      	pop	{r4, r5, pc}

000d4d62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4d62:	b510      	push	{r4, lr}
   d4d64:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4d66:	f7ff fdc7 	bl	d48f8 <_ZNSt14_Function_baseD1Ev>
   d4d6a:	4620      	mov	r0, r4
   d4d6c:	bd10      	pop	{r4, pc}
	...

000d4d70 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4d70:	4803      	ldr	r0, [pc, #12]	; (d4d80 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4d72:	4a04      	ldr	r2, [pc, #16]	; (d4d84 <_GLOBAL__sub_I_RGB+0x14>)
   d4d74:	4904      	ldr	r1, [pc, #16]	; (d4d88 <_GLOBAL__sub_I_RGB+0x18>)
   d4d76:	2300      	movs	r3, #0
   d4d78:	6083      	str	r3, [r0, #8]
   d4d7a:	f000 be15 	b.w	d59a8 <__aeabi_atexit>
   d4d7e:	bf00      	nop
   d4d80:	2003e65c 	.word	0x2003e65c
   d4d84:	2003e5c4 	.word	0x2003e5c4
   d4d88:	000d4d63 	.word	0x000d4d63

000d4d8c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4d8c:	b510      	push	{r4, lr}
   d4d8e:	4604      	mov	r4, r0
   d4d90:	4608      	mov	r0, r1
{
    _spi = spi;
   d4d92:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4d94:	f7ff fc64 	bl	d4660 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4d98:	2300      	movs	r3, #0
   d4d9a:	6063      	str	r3, [r4, #4]
}
   d4d9c:	4620      	mov	r0, r4
   d4d9e:	bd10      	pop	{r4, pc}

000d4da0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4da0:	b510      	push	{r4, lr}
   d4da2:	4604      	mov	r4, r0
{
	free(buffer);
   d4da4:	6800      	ldr	r0, [r0, #0]
   d4da6:	f7ff fd6f 	bl	d4888 <free>
}
   d4daa:	4620      	mov	r0, r4
   d4dac:	bd10      	pop	{r4, pc}

000d4dae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4dae:	b510      	push	{r4, lr}
   d4db0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4db2:	6800      	ldr	r0, [r0, #0]
   d4db4:	b108      	cbz	r0, d4dba <_ZN6String10invalidateEv+0xc>
   d4db6:	f7ff fd67 	bl	d4888 <free>
	buffer = NULL;
   d4dba:	2300      	movs	r3, #0
	capacity = len = 0;
   d4dbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d4dc0:	6023      	str	r3, [r4, #0]
}
   d4dc2:	bd10      	pop	{r4, pc}

000d4dc4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4dc4:	b538      	push	{r3, r4, r5, lr}
   d4dc6:	4604      	mov	r4, r0
   d4dc8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4dca:	6800      	ldr	r0, [r0, #0]
   d4dcc:	3101      	adds	r1, #1
   d4dce:	f7ff fd63 	bl	d4898 <realloc>
	if (newbuffer) {
   d4dd2:	b110      	cbz	r0, d4dda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4dd4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d4dd8:	2001      	movs	r0, #1
	}
	return 0;
}
   d4dda:	bd38      	pop	{r3, r4, r5, pc}

000d4ddc <_ZN6String7reserveEj>:
{
   d4ddc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4dde:	6803      	ldr	r3, [r0, #0]
{
   d4de0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4de2:	b123      	cbz	r3, d4dee <_ZN6String7reserveEj+0x12>
   d4de4:	6843      	ldr	r3, [r0, #4]
   d4de6:	428b      	cmp	r3, r1
   d4de8:	d301      	bcc.n	d4dee <_ZN6String7reserveEj+0x12>
   d4dea:	2001      	movs	r0, #1
}
   d4dec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d4dee:	4620      	mov	r0, r4
   d4df0:	f7ff ffe8 	bl	d4dc4 <_ZN6String12changeBufferEj>
   d4df4:	2800      	cmp	r0, #0
   d4df6:	d0f9      	beq.n	d4dec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d4df8:	68a3      	ldr	r3, [r4, #8]
   d4dfa:	2b00      	cmp	r3, #0
   d4dfc:	d1f5      	bne.n	d4dea <_ZN6String7reserveEj+0xe>
   d4dfe:	6822      	ldr	r2, [r4, #0]
   d4e00:	7013      	strb	r3, [r2, #0]
   d4e02:	e7f2      	b.n	d4dea <_ZN6String7reserveEj+0xe>

000d4e04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4e06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d4e08:	4611      	mov	r1, r2
   d4e0a:	9201      	str	r2, [sp, #4]
{
   d4e0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d4e0e:	f7ff ffe5 	bl	d4ddc <_ZN6String7reserveEj>
   d4e12:	9a01      	ldr	r2, [sp, #4]
   d4e14:	b928      	cbnz	r0, d4e22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d4e16:	4620      	mov	r0, r4
   d4e18:	f7ff ffc9 	bl	d4dae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d4e1c:	4620      	mov	r0, r4
   d4e1e:	b003      	add	sp, #12
   d4e20:	bd30      	pop	{r4, r5, pc}
	len = length;
   d4e22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d4e24:	4629      	mov	r1, r5
   d4e26:	6820      	ldr	r0, [r4, #0]
   d4e28:	f000 ffba 	bl	d5da0 <memcpy>
	buffer[len] = 0;
   d4e2c:	6822      	ldr	r2, [r4, #0]
   d4e2e:	68a3      	ldr	r3, [r4, #8]
   d4e30:	2100      	movs	r1, #0
   d4e32:	54d1      	strb	r1, [r2, r3]
	return *this;
   d4e34:	e7f2      	b.n	d4e1c <_ZN6String4copyEPKcj+0x18>

000d4e36 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d4e36:	2300      	movs	r3, #0
String::String(const char *cstr)
   d4e38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d4e3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d4e3e:	4604      	mov	r4, r0
	len = 0;
   d4e40:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d4e44:	b141      	cbz	r1, d4e58 <_ZN6StringC1EPKc+0x22>
   d4e46:	4608      	mov	r0, r1
   d4e48:	9101      	str	r1, [sp, #4]
   d4e4a:	f000 ffeb 	bl	d5e24 <strlen>
   d4e4e:	9901      	ldr	r1, [sp, #4]
   d4e50:	4602      	mov	r2, r0
   d4e52:	4620      	mov	r0, r4
   d4e54:	f7ff ffd6 	bl	d4e04 <_ZN6String4copyEPKcj>
}
   d4e58:	4620      	mov	r0, r4
   d4e5a:	b002      	add	sp, #8
   d4e5c:	bd10      	pop	{r4, pc}

000d4e5e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4e5e:	b513      	push	{r0, r1, r4, lr}
   d4e60:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4e62:	b159      	cbz	r1, d4e7c <_ZN6StringaSEPKc+0x1e>
   d4e64:	4608      	mov	r0, r1
   d4e66:	9101      	str	r1, [sp, #4]
   d4e68:	f000 ffdc 	bl	d5e24 <strlen>
   d4e6c:	9901      	ldr	r1, [sp, #4]
   d4e6e:	4602      	mov	r2, r0
   d4e70:	4620      	mov	r0, r4
   d4e72:	f7ff ffc7 	bl	d4e04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d4e76:	4620      	mov	r0, r4
   d4e78:	b002      	add	sp, #8
   d4e7a:	bd10      	pop	{r4, pc}
	else invalidate();
   d4e7c:	f7ff ff97 	bl	d4dae <_ZN6String10invalidateEv>
   d4e80:	e7f9      	b.n	d4e76 <_ZN6StringaSEPKc+0x18>

000d4e82 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4e82:	b570      	push	{r4, r5, r6, lr}
   d4e84:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4e86:	460e      	mov	r6, r1
   d4e88:	b909      	cbnz	r1, d4e8e <_ZN6String6concatEPKcj+0xc>
   d4e8a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4e8c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4e8e:	b16a      	cbz	r2, d4eac <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d4e90:	6884      	ldr	r4, [r0, #8]
   d4e92:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d4e94:	4621      	mov	r1, r4
   d4e96:	f7ff ffa1 	bl	d4ddc <_ZN6String7reserveEj>
   d4e9a:	2800      	cmp	r0, #0
   d4e9c:	d0f5      	beq.n	d4e8a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4e9e:	6828      	ldr	r0, [r5, #0]
   d4ea0:	68ab      	ldr	r3, [r5, #8]
   d4ea2:	4631      	mov	r1, r6
   d4ea4:	4418      	add	r0, r3
   d4ea6:	f000 ffb5 	bl	d5e14 <strcpy>
	len = newlen;
   d4eaa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d4eac:	2001      	movs	r0, #1
   d4eae:	e7ed      	b.n	d4e8c <_ZN6String6concatEPKcj+0xa>

000d4eb0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d4eb0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d4eb2:	2300      	movs	r3, #0
	buf[0] = c;
   d4eb4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d4eb8:	2201      	movs	r2, #1
   d4eba:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d4ebc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d4ec0:	f7ff ffdf 	bl	d4e82 <_ZN6String6concatEPKcj>
}
   d4ec4:	b003      	add	sp, #12
   d4ec6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4eca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4eca:	b510      	push	{r4, lr}
   d4ecc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4ece:	6800      	ldr	r0, [r0, #0]
   d4ed0:	b118      	cbz	r0, d4eda <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4ed2:	f7ff fcd9 	bl	d4888 <free>
            wakeupSource_ = nullptr;
   d4ed6:	2300      	movs	r3, #0
   d4ed8:	6023      	str	r3, [r4, #0]
        }
    }
   d4eda:	bd10      	pop	{r4, pc}

000d4edc <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4edc:	b510      	push	{r4, lr}
   d4ede:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4ee0:	f7ff fff3 	bl	d4eca <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4ee4:	4620      	mov	r0, r4
   d4ee6:	bd10      	pop	{r4, pc}

000d4ee8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4ee8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4eea:	4b09      	ldr	r3, [pc, #36]	; (d4f10 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4eec:	4c09      	ldr	r4, [pc, #36]	; (d4f14 <_GLOBAL__sub_I_System+0x2c>)
   d4eee:	2202      	movs	r2, #2
   d4ef0:	2000      	movs	r0, #0
   d4ef2:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4ef4:	4b08      	ldr	r3, [pc, #32]	; (d4f18 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4ef6:	6020      	str	r0, [r4, #0]
   d4ef8:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4efa:	71a0      	strb	r0, [r4, #6]
   d4efc:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4efe:	f7ff fc37 	bl	d4770 <set_system_mode>
SystemClass System;
   d4f02:	4620      	mov	r0, r4
   d4f04:	4a05      	ldr	r2, [pc, #20]	; (d4f1c <_GLOBAL__sub_I_System+0x34>)
   d4f06:	4906      	ldr	r1, [pc, #24]	; (d4f20 <_GLOBAL__sub_I_System+0x38>)
   d4f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4f0c:	f000 bd4c 	b.w	d59a8 <__aeabi_atexit>
   d4f10:	2003e678 	.word	0x2003e678
   d4f14:	2003e66c 	.word	0x2003e66c
   d4f18:	ffff0000 	.word	0xffff0000
   d4f1c:	2003e5c4 	.word	0x2003e5c4
   d4f20:	000d4edd 	.word	0x000d4edd

000d4f24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f24:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f26:	681a      	ldr	r2, [r3, #0]
   d4f28:	4b02      	ldr	r3, [pc, #8]	; (d4f34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4f2c:	4770      	bx	lr
   d4f2e:	bf00      	nop
   d4f30:	2003e55c 	.word	0x2003e55c
   d4f34:	2003e67c 	.word	0x2003e67c

000d4f38 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4f38:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f3a:	6804      	ldr	r4, [r0, #0]
   d4f3c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4f3e:	46a4      	mov	ip, r4
    }
   d4f40:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4f44:	4760      	bx	ip

000d4f46 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4f46:	6803      	ldr	r3, [r0, #0]
   d4f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f4a:	4718      	bx	r3

000d4f4c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4f4c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4f4e:	4770      	bx	lr

000d4f50 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4f50:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4f52:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4f54:	1a10      	subs	r0, r2, r0
   d4f56:	4770      	bx	lr

000d4f58 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4f58:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d4f5a:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d4f5c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d4f60:	68db      	ldr	r3, [r3, #12]
   d4f62:	2201      	movs	r2, #1
   d4f64:	f10d 0107 	add.w	r1, sp, #7
   d4f68:	4798      	blx	r3
}
   d4f6a:	b003      	add	sp, #12
   d4f6c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4f70 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4f70:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4f72:	6803      	ldr	r3, [r0, #0]
   d4f74:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d4f76:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4f78:	4798      	blx	r3
   d4f7a:	b128      	cbz	r0, d4f88 <_ZN3UDP4readEv+0x18>
   d4f7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f7e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4f80:	1c59      	adds	r1, r3, #1
   d4f82:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4f84:	5cd0      	ldrb	r0, [r2, r3]
}
   d4f86:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d4f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4f8c:	e7fb      	b.n	d4f86 <_ZN3UDP4readEv+0x16>

000d4f8e <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4f8e:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4f90:	6803      	ldr	r3, [r0, #0]
   d4f92:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d4f94:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4f96:	4798      	blx	r3
   d4f98:	b118      	cbz	r0, d4fa2 <_ZN3UDP4peekEv+0x14>
   d4f9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4f9c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4f9e:	5cd0      	ldrb	r0, [r2, r3]
}
   d4fa0:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d4fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4fa6:	e7fb      	b.n	d4fa0 <_ZN3UDP4peekEv+0x12>

000d4fa8 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d4fa8:	4770      	bx	lr

000d4faa <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4faa:	b410      	push	{r4}
   d4fac:	4603      	mov	r3, r0
   d4fae:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4fb0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d4fb2:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d4fb4:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d4fb6:	6803      	ldr	r3, [r0, #0]
   d4fb8:	1a52      	subs	r2, r2, r1
   d4fba:	68db      	ldr	r3, [r3, #12]
   d4fbc:	4421      	add	r1, r4
}
   d4fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d4fc2:	4718      	bx	r3

000d4fc4 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4fc4:	f1a0 0010 	sub.w	r0, r0, #16
   d4fc8:	f7ff bfef 	b.w	d4faa <_ZNK3UDP7printToER5Print>

000d4fcc <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4fcc:	b570      	push	{r4, r5, r6, lr}
    stop();
   d4fce:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4fd0:	b08c      	sub	sp, #48	; 0x30
    stop();
   d4fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4fd4:	4604      	mov	r4, r0
   d4fd6:	460e      	mov	r6, r1
   d4fd8:	4615      	mov	r5, r2
    stop();
   d4fda:	4798      	blx	r3
    const int one = 1;
   d4fdc:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d4fde:	221c      	movs	r2, #28
   d4fe0:	2100      	movs	r1, #0
   d4fe2:	a805      	add	r0, sp, #20
    const int one = 1;
   d4fe4:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d4fe6:	f000 fee9 	bl	d5dbc <memset>
    saddr.sin6_len = sizeof(saddr);
   d4fea:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d4fee:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d4ff0:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d4ff4:	f7ff faec 	bl	d45d0 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4ff8:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d4ffa:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4ffe:	2102      	movs	r1, #2
   d5000:	200a      	movs	r0, #10
   d5002:	f7ff fb25 	bl	d4650 <sock_socket>
    if (_sock < 0) {
   d5006:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5008:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d500a:	db25      	blt.n	d5058 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d500c:	2204      	movs	r2, #4
   d500e:	9200      	str	r2, [sp, #0]
   d5010:	ab02      	add	r3, sp, #8
   d5012:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5016:	f7ff fafb 	bl	d4610 <sock_setsockopt>
   d501a:	b9e8      	cbnz	r0, d5058 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d501c:	b195      	cbz	r5, d5044 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d501e:	9003      	str	r0, [sp, #12]
   d5020:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5024:	a903      	add	r1, sp, #12
   d5026:	b2e8      	uxtb	r0, r5
   d5028:	f7ff fab2 	bl	d4590 <if_index_to_name>
   d502c:	b9a0      	cbnz	r0, d5058 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d502e:	2306      	movs	r3, #6
   d5030:	9300      	str	r3, [sp, #0]
   d5032:	6960      	ldr	r0, [r4, #20]
   d5034:	ab03      	add	r3, sp, #12
   d5036:	f241 020b 	movw	r2, #4107	; 0x100b
   d503a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d503e:	f7ff fae7 	bl	d4610 <sock_setsockopt>
   d5042:	b948      	cbnz	r0, d5058 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5044:	6960      	ldr	r0, [r4, #20]
   d5046:	221c      	movs	r2, #28
   d5048:	a905      	add	r1, sp, #20
   d504a:	f7ff fad9 	bl	d4600 <sock_bind>
   d504e:	b918      	cbnz	r0, d5058 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d5050:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d5052:	2001      	movs	r0, #1
}
   d5054:	b00c      	add	sp, #48	; 0x30
   d5056:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d5058:	6823      	ldr	r3, [r4, #0]
   d505a:	4620      	mov	r0, r4
   d505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d505e:	4798      	blx	r3
   d5060:	2000      	movs	r0, #0
   d5062:	e7f7      	b.n	d5054 <_ZN3UDP5beginEtm+0x88>

000d5064 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d5064:	b510      	push	{r4, lr}
   d5066:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5068:	6940      	ldr	r0, [r0, #20]
   d506a:	2800      	cmp	r0, #0
   d506c:	db01      	blt.n	d5072 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d506e:	f7ff fad7 	bl	d4620 <sock_close>
    _sock = -1;
   d5072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5076:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d5078:	2300      	movs	r3, #0
   d507a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d507c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d507e:	bd10      	pop	{r4, pc}

000d5080 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5080:	b570      	push	{r4, r5, r6, lr}
   d5082:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5084:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5086:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d5088:	b168      	cbz	r0, d50a6 <_ZN3UDP5writeEPKhj+0x26>
   d508a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d508c:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d508e:	4294      	cmp	r4, r2
   d5090:	bf28      	it	cs
   d5092:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d5094:	4622      	mov	r2, r4
   d5096:	4430      	add	r0, r6
   d5098:	f000 fe82 	bl	d5da0 <memcpy>
    _offset += size;
   d509c:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d509e:	4423      	add	r3, r4
   d50a0:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d50a2:	4620      	mov	r0, r4
   d50a4:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d50a6:	4604      	mov	r4, r0
   d50a8:	e7f1      	b.n	d508e <_ZN3UDP5writeEPKhj+0xe>

000d50aa <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d50aa:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d50ac:	6803      	ldr	r3, [r0, #0]
   d50ae:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d50b0:	4604      	mov	r4, r0
   d50b2:	460f      	mov	r7, r1
   d50b4:	4616      	mov	r6, r2
    if (available()) {
   d50b6:	4798      	blx	r3
   d50b8:	b190      	cbz	r0, d50e0 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d50ba:	6823      	ldr	r3, [r4, #0]
   d50bc:	4620      	mov	r0, r4
   d50be:	691b      	ldr	r3, [r3, #16]
   d50c0:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d50c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d50c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d50c6:	4286      	cmp	r6, r0
   d50c8:	bfa8      	it	ge
   d50ca:	4606      	movge	r6, r0
   d50cc:	4419      	add	r1, r3
   d50ce:	4632      	mov	r2, r6
   d50d0:	4638      	mov	r0, r7
   d50d2:	f000 fe65 	bl	d5da0 <memcpy>
        _offset += read;
   d50d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d50d8:	4433      	add	r3, r6
   d50da:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d50dc:	4630      	mov	r0, r6
   d50de:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d50e0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d50e4:	e7fa      	b.n	d50dc <_ZN3UDP4readEPhj+0x32>
	...

000d50e8 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d50e8:	b570      	push	{r4, r5, r6, lr}
   d50ea:	4604      	mov	r4, r0
   d50ec:	4b05      	ldr	r3, [pc, #20]	; (d5104 <_ZN3UDP8remoteIPEv+0x1c>)
   d50ee:	f844 3b04 	str.w	r3, [r4], #4
   d50f2:	f101 0520 	add.w	r5, r1, #32
   d50f6:	4606      	mov	r6, r0
   d50f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50fc:	682b      	ldr	r3, [r5, #0]
   d50fe:	7023      	strb	r3, [r4, #0]
   d5100:	4630      	mov	r0, r6
   d5102:	bd70      	pop	{r4, r5, r6, pc}
   d5104:	000d5f20 	.word	0x000d5f20

000d5108 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5108:	b5f0      	push	{r4, r5, r6, r7, lr}
   d510a:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d510c:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d510e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5110:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5112:	4a0a      	ldr	r2, [pc, #40]	; (d513c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5114:	9202      	str	r2, [sp, #8]
   d5116:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5118:	468c      	mov	ip, r1
   d511a:	4606      	mov	r6, r0
   d511c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d511e:	ad03      	add	r5, sp, #12
   d5120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5122:	6823      	ldr	r3, [r4, #0]
   d5124:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5126:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d512a:	9300      	str	r3, [sp, #0]
   d512c:	4672      	mov	r2, lr
   d512e:	ab02      	add	r3, sp, #8
   d5130:	4661      	mov	r1, ip
   d5132:	4630      	mov	r0, r6
   d5134:	47b8      	blx	r7
    }
   d5136:	b009      	add	sp, #36	; 0x24
   d5138:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d513a:	bf00      	nop
   d513c:	000d5f20 	.word	0x000d5f20

000d5140 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d5140:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5142:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d5144:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5146:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5148:	4b0c      	ldr	r3, [pc, #48]	; (d517c <_ZN3UDP9endPacketEv+0x3c>)
   d514a:	9302      	str	r3, [sp, #8]
   d514c:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d5150:	4604      	mov	r4, r0
   d5152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5154:	ad03      	add	r5, sp, #12
   d5156:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5158:	6833      	ldr	r3, [r6, #0]
   d515a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d515c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d515e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d5160:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5162:	9300      	str	r3, [sp, #0]
   d5164:	4620      	mov	r0, r4
   d5166:	ab02      	add	r3, sp, #8
   d5168:	47b8      	blx	r7
    flush(); // wait for send to complete
   d516a:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d516c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d516e:	69db      	ldr	r3, [r3, #28]
   d5170:	4620      	mov	r0, r4
   d5172:	4798      	blx	r3
}
   d5174:	4628      	mov	r0, r5
   d5176:	b009      	add	sp, #36	; 0x24
   d5178:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d517a:	bf00      	nop
   d517c:	000d5f20 	.word	0x000d5f20

000d5180 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5180:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5182:	7843      	ldrb	r3, [r0, #1]
   d5184:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5186:	b08d      	sub	sp, #52	; 0x34
   d5188:	4605      	mov	r5, r0
   d518a:	460c      	mov	r4, r1
   d518c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d518e:	d104      	bne.n	d519a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5190:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5192:	4620      	mov	r0, r4
   d5194:	f7ff fcb8 	bl	d4b08 <_ZN9IPAddressaSEPKh>
   d5198:	e022      	b.n	d51e0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d519a:	2b0a      	cmp	r3, #10
   d519c:	d125      	bne.n	d51ea <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d519e:	2211      	movs	r2, #17
   d51a0:	2100      	movs	r1, #0
   d51a2:	a801      	add	r0, sp, #4
   d51a4:	f000 fe0a 	bl	d5dbc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51a8:	68ab      	ldr	r3, [r5, #8]
   d51aa:	b303      	cbz	r3, d51ee <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d51ac:	f105 0308 	add.w	r3, r5, #8
   d51b0:	ae01      	add	r6, sp, #4
   d51b2:	f105 0c18 	add.w	ip, r5, #24
   d51b6:	6818      	ldr	r0, [r3, #0]
   d51b8:	6859      	ldr	r1, [r3, #4]
   d51ba:	4632      	mov	r2, r6
   d51bc:	c203      	stmia	r2!, {r0, r1}
   d51be:	3308      	adds	r3, #8
   d51c0:	4563      	cmp	r3, ip
   d51c2:	4616      	mov	r6, r2
   d51c4:	d1f7      	bne.n	d51b6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d51c6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d51c8:	a901      	add	r1, sp, #4
   d51ca:	a806      	add	r0, sp, #24
   d51cc:	ae07      	add	r6, sp, #28
            a.v = 6;
   d51ce:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d51d2:	f7ff fc57 	bl	d4a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d51d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d51d8:	3404      	adds	r4, #4
   d51da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d51dc:	6833      	ldr	r3, [r6, #0]
   d51de:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d51e0:	b11f      	cbz	r7, d51ea <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d51e2:	8868      	ldrh	r0, [r5, #2]
   d51e4:	f7ff f9ec 	bl	d45c0 <inet_ntohs>
   d51e8:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d51ea:	b00d      	add	sp, #52	; 0x34
   d51ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d51ee:	68eb      	ldr	r3, [r5, #12]
   d51f0:	2b00      	cmp	r3, #0
   d51f2:	d1db      	bne.n	d51ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d51f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d51f8:	692e      	ldr	r6, [r5, #16]
   d51fa:	f7ff f9d9 	bl	d45b0 <inet_htonl>
   d51fe:	4286      	cmp	r6, r0
   d5200:	d1d4      	bne.n	d51ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d5202:	f105 0114 	add.w	r1, r5, #20
   d5206:	e7c4      	b.n	d5192 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d5208 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d5208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d520c:	4617      	mov	r7, r2
   d520e:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5210:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d5212:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5214:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d5216:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5218:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d521a:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d521c:	f7ff f9e8 	bl	d45f0 <netdb_getaddrinfo>
   d5220:	1e04      	subs	r4, r0, #0
   d5222:	db20      	blt.n	d5266 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d5224:	9b01      	ldr	r3, [sp, #4]
   d5226:	b32b      	cbz	r3, d5274 <_ZN3UDP11beginPacketEPKct+0x6c>
   d5228:	695b      	ldr	r3, [r3, #20]
   d522a:	b31b      	cbz	r3, d5274 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d522c:	a802      	add	r0, sp, #8
   d522e:	f7ff fc1b 	bl	d4a68 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5232:	9b01      	ldr	r3, [sp, #4]
   d5234:	2200      	movs	r2, #0
   d5236:	6958      	ldr	r0, [r3, #20]
   d5238:	a902      	add	r1, sp, #8
   d523a:	f7ff ffa1 	bl	d5180 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d523e:	a802      	add	r0, sp, #8
   d5240:	f7ff fc32 	bl	d4aa8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5244:	b1b0      	cbz	r0, d5274 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d5246:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d5248:	ad03      	add	r5, sp, #12
   d524a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d524e:	4b0b      	ldr	r3, [pc, #44]	; (d527c <_ZN3UDP11beginPacketEPKct+0x74>)
   d5250:	9308      	str	r3, [sp, #32]
   d5252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5254:	ac09      	add	r4, sp, #36	; 0x24
   d5256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5258:	682b      	ldr	r3, [r5, #0]
   d525a:	7023      	strb	r3, [r4, #0]
   d525c:	463a      	mov	r2, r7
   d525e:	a908      	add	r1, sp, #32
   d5260:	4630      	mov	r0, r6
   d5262:	47c0      	blx	r8
   d5264:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d5266:	9801      	ldr	r0, [sp, #4]
   d5268:	f7ff f9ba 	bl	d45e0 <netdb_freeaddrinfo>
}
   d526c:	4620      	mov	r0, r4
   d526e:	b00e      	add	sp, #56	; 0x38
   d5270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d5274:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5278:	e7f5      	b.n	d5266 <_ZN3UDP11beginPacketEPKct+0x5e>
   d527a:	bf00      	nop
   d527c:	000d5f20 	.word	0x000d5f20

000d5280 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d5284:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d5288:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d528c:	b090      	sub	sp, #64	; 0x40
   d528e:	4605      	mov	r5, r0
   d5290:	460e      	mov	r6, r1
   d5292:	4690      	mov	r8, r2
   d5294:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d5296:	db3c      	blt.n	d5312 <_ZN3UDP13receivePacketEPhjm+0x92>
   d5298:	2900      	cmp	r1, #0
   d529a:	d03a      	beq.n	d5312 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d529c:	f04f 0a1c 	mov.w	sl, #28
   d52a0:	af09      	add	r7, sp, #36	; 0x24
   d52a2:	4652      	mov	r2, sl
   d52a4:	2100      	movs	r1, #0
   d52a6:	4638      	mov	r0, r7
   d52a8:	f000 fd88 	bl	d5dbc <memset>
        socklen_t slen = sizeof(saddr);
   d52ac:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d52b0:	b1dc      	cbz	r4, d52ea <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d52b2:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d52b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d52b8:	fbb4 f3f0 	udiv	r3, r4, r0
   d52bc:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d52c0:	fb00 4313 	mls	r3, r0, r3, r4
   d52c4:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d52c6:	2310      	movs	r3, #16
            struct timeval tv = {};
   d52c8:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d52ca:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d52cc:	9300      	str	r3, [sp, #0]
   d52ce:	f241 0206 	movw	r2, #4102	; 0x1006
   d52d2:	446b      	add	r3, sp
   d52d4:	f640 71ff 	movw	r1, #4095	; 0xfff
   d52d8:	4648      	mov	r0, r9
   d52da:	f7ff f999 	bl	d4610 <sock_setsockopt>
            if (ret) {
   d52de:	4604      	mov	r4, r0
   d52e0:	b120      	cbz	r0, d52ec <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d52e2:	4620      	mov	r0, r4
   d52e4:	b010      	add	sp, #64	; 0x40
   d52e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d52ea:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d52ec:	ab03      	add	r3, sp, #12
   d52ee:	e9cd 7300 	strd	r7, r3, [sp]
   d52f2:	6968      	ldr	r0, [r5, #20]
   d52f4:	4623      	mov	r3, r4
   d52f6:	4642      	mov	r2, r8
   d52f8:	4631      	mov	r1, r6
   d52fa:	f7ff f999 	bl	d4630 <sock_recvfrom>
        if (ret >= 0) {
   d52fe:	1e04      	subs	r4, r0, #0
   d5300:	dbef      	blt.n	d52e2 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5302:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5306:	f105 011c 	add.w	r1, r5, #28
   d530a:	4638      	mov	r0, r7
   d530c:	f7ff ff38 	bl	d5180 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5310:	e7e7      	b.n	d52e2 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d5312:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5316:	e7e4      	b.n	d52e2 <_ZN3UDP13receivePacketEPhjm+0x62>

000d5318 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5318:	b538      	push	{r3, r4, r5, lr}
   d531a:	4605      	mov	r5, r0
   d531c:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d531e:	7d2b      	ldrb	r3, [r5, #20]
   d5320:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5322:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5324:	d110      	bne.n	d5348 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5326:	f640 231c 	movw	r3, #2588	; 0xa1c
   d532a:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d532c:	f7ff f950 	bl	d45d0 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5330:	3408      	adds	r4, #8
   d5332:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d5334:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5338:	3514      	adds	r5, #20
   d533a:	f853 2b04 	ldr.w	r2, [r3], #4
   d533e:	f844 2b04 	str.w	r2, [r4], #4
   d5342:	42ab      	cmp	r3, r5
   d5344:	d1f9      	bne.n	d533a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d5346:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d5348:	2b04      	cmp	r3, #4
   d534a:	d1fc      	bne.n	d5346 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d534c:	f44f 7304 	mov.w	r3, #528	; 0x210
   d5350:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d5352:	f7ff f93d 	bl	d45d0 <inet_htons>
   d5356:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5358:	6868      	ldr	r0, [r5, #4]
   d535a:	f7ff f929 	bl	d45b0 <inet_htonl>
   d535e:	6060      	str	r0, [r4, #4]
}
   d5360:	e7f1      	b.n	d5346 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d5362 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5366:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d5368:	af03      	add	r7, sp, #12
   d536a:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d536e:	4698      	mov	r8, r3
   d5370:	4604      	mov	r4, r0
   d5372:	460d      	mov	r5, r1
   d5374:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d5376:	2100      	movs	r1, #0
   d5378:	464a      	mov	r2, r9
   d537a:	4638      	mov	r0, r7
   d537c:	f000 fd1e 	bl	d5dbc <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5380:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d5384:	463a      	mov	r2, r7
   d5386:	4640      	mov	r0, r8
   d5388:	f7ff ffc6 	bl	d5318 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d538c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5390:	b153      	cbz	r3, d53a8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5392:	e9cd 7900 	strd	r7, r9, [sp]
   d5396:	6960      	ldr	r0, [r4, #20]
   d5398:	2300      	movs	r3, #0
   d539a:	4632      	mov	r2, r6
   d539c:	4629      	mov	r1, r5
   d539e:	f7ff f94f 	bl	d4640 <sock_sendto>
}
   d53a2:	b00b      	add	sp, #44	; 0x2c
   d53a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d53a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d53ac:	e7f9      	b.n	d53a2 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d53b0 <_ZN3UDPC1Ev>:
UDP::UDP()
   d53b0:	b538      	push	{r3, r4, r5, lr}
   d53b2:	2500      	movs	r5, #0
   d53b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53b8:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d53bc:	4b0b      	ldr	r3, [pc, #44]	; (d53ec <_ZN3UDPC1Ev+0x3c>)
   d53be:	f103 0208 	add.w	r2, r3, #8
   d53c2:	336c      	adds	r3, #108	; 0x6c
   d53c4:	6103      	str	r3, [r0, #16]
   d53c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d53ca:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d53cc:	6002      	str	r2, [r0, #0]
   d53ce:	6143      	str	r3, [r0, #20]
   d53d0:	301c      	adds	r0, #28
   d53d2:	f7ff fb49 	bl	d4a68 <_ZN9IPAddressC1Ev>
   d53d6:	f44f 7300 	mov.w	r3, #512	; 0x200
   d53da:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d53de:	86e5      	strh	r5, [r4, #54]	; 0x36
   d53e0:	8725      	strh	r5, [r4, #56]	; 0x38
   d53e2:	63e5      	str	r5, [r4, #60]	; 0x3c
   d53e4:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d53e8:	4620      	mov	r0, r4
   d53ea:	bd38      	pop	{r3, r4, r5, pc}
   d53ec:	000d5f80 	.word	0x000d5f80

000d53f0 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d53f0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d53f2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d53f6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d53f8:	b123      	cbz	r3, d5404 <_ZN3UDP13releaseBufferEv+0x14>
   d53fa:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d53fc:	b110      	cbz	r0, d5404 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d53fe:	2101      	movs	r1, #1
   d5400:	f000 fad7 	bl	d59b2 <_ZdlPvj>
    _buffer = NULL;
   d5404:	2300      	movs	r3, #0
   d5406:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5408:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d540c:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d540e:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5410:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d5412:	bd10      	pop	{r4, pc}

000d5414 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5414:	b570      	push	{r4, r5, r6, lr}
   d5416:	4604      	mov	r4, r0
   d5418:	4616      	mov	r6, r2
   d541a:	460d      	mov	r5, r1
    releaseBuffer();
   d541c:	f7ff ffe8 	bl	d53f0 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d5420:	2300      	movs	r3, #0
    _buffer = buffer;
   d5422:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5424:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5426:	b12e      	cbz	r6, d5434 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d5428:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d542a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d542c:	3800      	subs	r0, #0
   d542e:	bf18      	it	ne
   d5430:	2001      	movne	r0, #1
   d5432:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d5434:	2d00      	cmp	r5, #0
   d5436:	d0f8      	beq.n	d542a <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d5438:	4628      	mov	r0, r5
   d543a:	f7fe fe2a 	bl	d4092 <_Znaj>
        _buffer_allocated = true;
   d543e:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d5440:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5442:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d5446:	2800      	cmp	r0, #0
   d5448:	d0ef      	beq.n	d542a <_ZN3UDP9setBufferEjPh+0x16>
   d544a:	e7ed      	b.n	d5428 <_ZN3UDP9setBufferEjPh+0x14>

000d544c <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d544e:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d5450:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5452:	4605      	mov	r5, r0
   d5454:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d5456:	b91a      	cbnz	r2, d5460 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5458:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d545a:	b109      	cbz	r1, d5460 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d545c:	f7ff ffda 	bl	d5414 <_ZN3UDP9setBufferEjPh>
   d5460:	3404      	adds	r4, #4
   d5462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5464:	f105 0620 	add.w	r6, r5, #32
   d5468:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d546a:	6823      	ldr	r3, [r4, #0]
   d546c:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d546e:	2300      	movs	r3, #0
}
   d5470:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d5472:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d5474:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d5476:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d5478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d547a <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d547a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d547c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d547e:	4604      	mov	r4, r0
   d5480:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d5482:	b92a      	cbnz	r2, d5490 <_ZN3UDP11parsePacketEm+0x16>
   d5484:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5486:	b119      	cbz	r1, d5490 <_ZN3UDP11parsePacketEm+0x16>
   d5488:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d548a:	f7ff ffc3 	bl	d5414 <_ZN3UDP9setBufferEjPh>
   d548e:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d5490:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d5492:	2200      	movs	r2, #0
   d5494:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d5496:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d5498:	b141      	cbz	r1, d54ac <_ZN3UDP11parsePacketEm+0x32>
   d549a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d549c:	b132      	cbz	r2, d54ac <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d549e:	6820      	ldr	r0, [r4, #0]
   d54a0:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d54a2:	4620      	mov	r0, r4
   d54a4:	47a8      	blx	r5
        if (result > 0) {
   d54a6:	2800      	cmp	r0, #0
            _total = result;
   d54a8:	bfc8      	it	gt
   d54aa:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d54ac:	6823      	ldr	r3, [r4, #0]
   d54ae:	691b      	ldr	r3, [r3, #16]
   d54b0:	4620      	mov	r0, r4
}
   d54b2:	b003      	add	sp, #12
   d54b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d54b8:	4718      	bx	r3

000d54ba <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d54ba:	4770      	bx	lr

000d54bc <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54bc:	7441      	strb	r1, [r0, #17]
}
   d54be:	4770      	bx	lr

000d54c0 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d54c0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d54c2:	7c00      	ldrb	r0, [r0, #16]
   d54c4:	f7ff f914 	bl	d46f0 <hal_usart_available_data_for_write>
}
   d54c8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54cc:	bd08      	pop	{r3, pc}

000d54ce <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d54ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d54d0:	7c00      	ldrb	r0, [r0, #16]
   d54d2:	f7ff f8e5 	bl	d46a0 <hal_usart_available>
}
   d54d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d54da:	bd08      	pop	{r3, pc}

000d54dc <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d54dc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d54de:	7c00      	ldrb	r0, [r0, #16]
   d54e0:	f7ff f8ee 	bl	d46c0 <hal_usart_peek>
}
   d54e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54e8:	bd08      	pop	{r3, pc}

000d54ea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d54ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d54ec:	7c00      	ldrb	r0, [r0, #16]
   d54ee:	f7ff f8df 	bl	d46b0 <hal_usart_read>
}
   d54f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d54f6:	bd08      	pop	{r3, pc}

000d54f8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d54f8:	7c00      	ldrb	r0, [r0, #16]
   d54fa:	f7ff b8e9 	b.w	d46d0 <hal_usart_flush>

000d54fe <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d54fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5500:	7c45      	ldrb	r5, [r0, #17]
{
   d5502:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5504:	b12d      	cbz	r5, d5512 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5506:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5508:	b003      	add	sp, #12
   d550a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d550e:	f7ff b8bf 	b.w	d4690 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5512:	7c00      	ldrb	r0, [r0, #16]
   d5514:	9101      	str	r1, [sp, #4]
   d5516:	f7ff f8eb 	bl	d46f0 <hal_usart_available_data_for_write>
   d551a:	2800      	cmp	r0, #0
   d551c:	9901      	ldr	r1, [sp, #4]
   d551e:	dcf2      	bgt.n	d5506 <_ZN11USARTSerial5writeEh+0x8>
}
   d5520:	4628      	mov	r0, r5
   d5522:	b003      	add	sp, #12
   d5524:	bd30      	pop	{r4, r5, pc}

000d5526 <_ZN11USARTSerialD0Ev>:
   d5526:	b510      	push	{r4, lr}
   d5528:	2114      	movs	r1, #20
   d552a:	4604      	mov	r4, r0
   d552c:	f000 fa41 	bl	d59b2 <_ZdlPvj>
   d5530:	4620      	mov	r0, r4
   d5532:	bd10      	pop	{r4, pc}

000d5534 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5534:	b510      	push	{r4, lr}
   d5536:	f04f 0c00 	mov.w	ip, #0
   d553a:	4604      	mov	r4, r0
   d553c:	4608      	mov	r0, r1
   d553e:	4611      	mov	r1, r2
   d5540:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5544:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5548:	4a04      	ldr	r2, [pc, #16]	; (d555c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d554a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d554c:	2201      	movs	r2, #1
  _serial = serial;
   d554e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5550:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5552:	461a      	mov	r2, r3
   d5554:	f7ff f894 	bl	d4680 <hal_usart_init>
}
   d5558:	4620      	mov	r0, r4
   d555a:	bd10      	pop	{r4, pc}
   d555c:	000d5ff8 	.word	0x000d5ff8

000d5560 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5560:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5562:	4c0e      	ldr	r4, [pc, #56]	; (d559c <_Z22__fetch_global_Serial1v+0x3c>)
   d5564:	7821      	ldrb	r1, [r4, #0]
   d5566:	f3bf 8f5b 	dmb	ish
   d556a:	f011 0101 	ands.w	r1, r1, #1
   d556e:	d112      	bne.n	d5596 <_Z22__fetch_global_Serial1v+0x36>
   d5570:	4620      	mov	r0, r4
   d5572:	9101      	str	r1, [sp, #4]
   d5574:	f7fe fd91 	bl	d409a <__cxa_guard_acquire>
   d5578:	9901      	ldr	r1, [sp, #4]
   d557a:	b160      	cbz	r0, d5596 <_Z22__fetch_global_Serial1v+0x36>
   d557c:	4a08      	ldr	r2, [pc, #32]	; (d55a0 <_Z22__fetch_global_Serial1v+0x40>)
   d557e:	4b09      	ldr	r3, [pc, #36]	; (d55a4 <_Z22__fetch_global_Serial1v+0x44>)
   d5580:	4809      	ldr	r0, [pc, #36]	; (d55a8 <_Z22__fetch_global_Serial1v+0x48>)
   d5582:	f7ff ffd7 	bl	d5534 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5586:	4620      	mov	r0, r4
   d5588:	f7fe fd8c 	bl	d40a4 <__cxa_guard_release>
   d558c:	4a07      	ldr	r2, [pc, #28]	; (d55ac <_Z22__fetch_global_Serial1v+0x4c>)
   d558e:	4908      	ldr	r1, [pc, #32]	; (d55b0 <_Z22__fetch_global_Serial1v+0x50>)
   d5590:	4805      	ldr	r0, [pc, #20]	; (d55a8 <_Z22__fetch_global_Serial1v+0x48>)
   d5592:	f000 fa09 	bl	d59a8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5596:	4804      	ldr	r0, [pc, #16]	; (d55a8 <_Z22__fetch_global_Serial1v+0x48>)
   d5598:	b002      	add	sp, #8
   d559a:	bd10      	pop	{r4, pc}
   d559c:	2003e680 	.word	0x2003e680
   d55a0:	2003e684 	.word	0x2003e684
   d55a4:	2003e708 	.word	0x2003e708
   d55a8:	2003e78c 	.word	0x2003e78c
   d55ac:	2003e5c4 	.word	0x2003e5c4
   d55b0:	000d54bb 	.word	0x000d54bb

000d55b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d55b4:	7441      	strb	r1, [r0, #17]
}
   d55b6:	4770      	bx	lr

000d55b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d55b8:	4770      	bx	lr

000d55ba <_ZN9USBSerial4readEv>:
{
   d55ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d55bc:	2100      	movs	r1, #0
   d55be:	7c00      	ldrb	r0, [r0, #16]
   d55c0:	f7ff f8be 	bl	d4740 <HAL_USB_USART_Receive_Data>
}
   d55c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55c8:	bd08      	pop	{r3, pc}

000d55ca <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d55ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d55cc:	2101      	movs	r1, #1
   d55ce:	7c00      	ldrb	r0, [r0, #16]
   d55d0:	f7ff f8b6 	bl	d4740 <HAL_USB_USART_Receive_Data>
}
   d55d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d55d8:	bd08      	pop	{r3, pc}

000d55da <_ZN9USBSerial17availableForWriteEv>:
{
   d55da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d55dc:	7c00      	ldrb	r0, [r0, #16]
   d55de:	f7ff f8a7 	bl	d4730 <HAL_USB_USART_Available_Data_For_Write>
}
   d55e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55e6:	bd08      	pop	{r3, pc}

000d55e8 <_ZN9USBSerial9availableEv>:
{
   d55e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d55ea:	7c00      	ldrb	r0, [r0, #16]
   d55ec:	f7ff f898 	bl	d4720 <HAL_USB_USART_Available_Data>
}
   d55f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d55f4:	bd08      	pop	{r3, pc}

000d55f6 <_ZN9USBSerial5writeEh>:
{
   d55f6:	b513      	push	{r0, r1, r4, lr}
   d55f8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55fa:	7c00      	ldrb	r0, [r0, #16]
{
   d55fc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d55fe:	f7ff f897 	bl	d4730 <HAL_USB_USART_Available_Data_For_Write>
   d5602:	2800      	cmp	r0, #0
   d5604:	9901      	ldr	r1, [sp, #4]
   d5606:	dc01      	bgt.n	d560c <_ZN9USBSerial5writeEh+0x16>
   d5608:	7c60      	ldrb	r0, [r4, #17]
   d560a:	b120      	cbz	r0, d5616 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d560c:	7c20      	ldrb	r0, [r4, #16]
   d560e:	f7ff f89f 	bl	d4750 <HAL_USB_USART_Send_Data>
   d5612:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5616:	b002      	add	sp, #8
   d5618:	bd10      	pop	{r4, pc}

000d561a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d561a:	7c00      	ldrb	r0, [r0, #16]
   d561c:	f7ff b8a0 	b.w	d4760 <HAL_USB_USART_Flush_Data>

000d5620 <_ZN9USBSerialD0Ev>:
   d5620:	b510      	push	{r4, lr}
   d5622:	2114      	movs	r1, #20
   d5624:	4604      	mov	r4, r0
   d5626:	f000 f9c4 	bl	d59b2 <_ZdlPvj>
   d562a:	4620      	mov	r0, r4
   d562c:	bd10      	pop	{r4, pc}
	...

000d5630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5630:	b510      	push	{r4, lr}
   d5632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5636:	4604      	mov	r4, r0
   d5638:	4608      	mov	r0, r1
   d563a:	2100      	movs	r1, #0
   d563c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5640:	4b04      	ldr	r3, [pc, #16]	; (d5654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5642:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5644:	2301      	movs	r3, #1
  _serial = serial;
   d5646:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5648:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d564a:	4611      	mov	r1, r2
   d564c:	f7ff f858 	bl	d4700 <HAL_USB_USART_Init>
}
   d5650:	4620      	mov	r0, r4
   d5652:	bd10      	pop	{r4, pc}
   d5654:	000d6028 	.word	0x000d6028

000d5658 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5658:	7c00      	ldrb	r0, [r0, #16]
   d565a:	2200      	movs	r2, #0
   d565c:	f7ff b858 	b.w	d4710 <HAL_USB_USART_Begin>

000d5660 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5660:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5662:	2214      	movs	r2, #20
{
   d5664:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5666:	2100      	movs	r1, #0
   d5668:	f000 fba8 	bl	d5dbc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d566c:	4620      	mov	r0, r4
   d566e:	bd10      	pop	{r4, pc}

000d5670 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5670:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5672:	4c10      	ldr	r4, [pc, #64]	; (d56b4 <_Z16_fetch_usbserialv+0x44>)
{
   d5674:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5676:	a803      	add	r0, sp, #12
   d5678:	f7ff fff2 	bl	d5660 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d567c:	7821      	ldrb	r1, [r4, #0]
   d567e:	f3bf 8f5b 	dmb	ish
   d5682:	f011 0101 	ands.w	r1, r1, #1
   d5686:	d111      	bne.n	d56ac <_Z16_fetch_usbserialv+0x3c>
   d5688:	4620      	mov	r0, r4
   d568a:	9101      	str	r1, [sp, #4]
   d568c:	f7fe fd05 	bl	d409a <__cxa_guard_acquire>
   d5690:	9901      	ldr	r1, [sp, #4]
   d5692:	b158      	cbz	r0, d56ac <_Z16_fetch_usbserialv+0x3c>
   d5694:	aa03      	add	r2, sp, #12
   d5696:	4808      	ldr	r0, [pc, #32]	; (d56b8 <_Z16_fetch_usbserialv+0x48>)
   d5698:	f7ff ffca 	bl	d5630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d569c:	4620      	mov	r0, r4
   d569e:	f7fe fd01 	bl	d40a4 <__cxa_guard_release>
   d56a2:	4a06      	ldr	r2, [pc, #24]	; (d56bc <_Z16_fetch_usbserialv+0x4c>)
   d56a4:	4906      	ldr	r1, [pc, #24]	; (d56c0 <_Z16_fetch_usbserialv+0x50>)
   d56a6:	4804      	ldr	r0, [pc, #16]	; (d56b8 <_Z16_fetch_usbserialv+0x48>)
   d56a8:	f000 f97e 	bl	d59a8 <__aeabi_atexit>
	return _usbserial;
}
   d56ac:	4802      	ldr	r0, [pc, #8]	; (d56b8 <_Z16_fetch_usbserialv+0x48>)
   d56ae:	b008      	add	sp, #32
   d56b0:	bd10      	pop	{r4, pc}
   d56b2:	bf00      	nop
   d56b4:	2003e7a0 	.word	0x2003e7a0
   d56b8:	2003e7a4 	.word	0x2003e7a4
   d56bc:	2003e5c4 	.word	0x2003e5c4
   d56c0:	000d55b9 	.word	0x000d55b9

000d56c4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d56c4:	2200      	movs	r2, #0
   d56c6:	6840      	ldr	r0, [r0, #4]
   d56c8:	4611      	mov	r1, r2
   d56ca:	f7ff b89d 	b.w	d4808 <network_ready>

000d56ce <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d56ce:	2200      	movs	r2, #0
   d56d0:	6840      	ldr	r0, [r0, #4]
   d56d2:	4611      	mov	r1, r2
   d56d4:	f7ff b8b8 	b.w	d4848 <network_listening>

000d56d8 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d56d8:	2200      	movs	r2, #0
   d56da:	6840      	ldr	r0, [r0, #4]
   d56dc:	4611      	mov	r1, r2
   d56de:	f7ff b8c3 	b.w	d4868 <network_get_listen_timeout>

000d56e2 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d56e2:	6840      	ldr	r0, [r0, #4]
   d56e4:	2200      	movs	r2, #0
   d56e6:	f7ff b8b7 	b.w	d4858 <network_set_listen_timeout>

000d56ea <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d56ea:	6840      	ldr	r0, [r0, #4]
   d56ec:	2200      	movs	r2, #0
   d56ee:	f081 0101 	eor.w	r1, r1, #1
   d56f2:	f7ff b8a1 	b.w	d4838 <network_listen>

000d56f6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d56f6:	2300      	movs	r3, #0
   d56f8:	6840      	ldr	r0, [r0, #4]
   d56fa:	461a      	mov	r2, r3
   d56fc:	4619      	mov	r1, r3
   d56fe:	f7ff b893 	b.w	d4828 <network_off>

000d5702 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5702:	2300      	movs	r3, #0
   d5704:	6840      	ldr	r0, [r0, #4]
   d5706:	461a      	mov	r2, r3
   d5708:	4619      	mov	r1, r3
   d570a:	f7ff b885 	b.w	d4818 <network_on>

000d570e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d570e:	2200      	movs	r2, #0
   d5710:	6840      	ldr	r0, [r0, #4]
   d5712:	4611      	mov	r1, r2
   d5714:	f7ff b868 	b.w	d47e8 <network_connecting>

000d5718 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5718:	6840      	ldr	r0, [r0, #4]
   d571a:	2200      	movs	r2, #0
   d571c:	2102      	movs	r1, #2
   d571e:	f7ff b86b 	b.w	d47f8 <network_disconnect>

000d5722 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5722:	2300      	movs	r3, #0
   d5724:	6840      	ldr	r0, [r0, #4]
   d5726:	461a      	mov	r2, r3
   d5728:	f7ff b856 	b.w	d47d8 <network_connect>

000d572c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d572c:	4b02      	ldr	r3, [pc, #8]	; (d5738 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d572e:	2204      	movs	r2, #4
   d5730:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5732:	4a02      	ldr	r2, [pc, #8]	; (d573c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5734:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5736:	4770      	bx	lr
   d5738:	2003e7b8 	.word	0x2003e7b8
   d573c:	000d6058 	.word	0x000d6058

000d5740 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5740:	4b01      	ldr	r3, [pc, #4]	; (d5748 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5742:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5744:	4770      	bx	lr
   d5746:	bf00      	nop
   d5748:	2003e560 	.word	0x2003e560

000d574c <serialEventRun>:
{
   d574c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d574e:	4b0b      	ldr	r3, [pc, #44]	; (d577c <serialEventRun+0x30>)
   d5750:	b143      	cbz	r3, d5764 <serialEventRun+0x18>
   d5752:	f7ff ff8d 	bl	d5670 <_Z16_fetch_usbserialv>
   d5756:	6803      	ldr	r3, [r0, #0]
   d5758:	691b      	ldr	r3, [r3, #16]
   d575a:	4798      	blx	r3
   d575c:	2800      	cmp	r0, #0
   d575e:	dd01      	ble.n	d5764 <serialEventRun+0x18>
        serialEvent();
   d5760:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d5764:	4b06      	ldr	r3, [pc, #24]	; (d5780 <serialEventRun+0x34>)
   d5766:	b143      	cbz	r3, d577a <serialEventRun+0x2e>
   d5768:	f7ff fefa 	bl	d5560 <_Z22__fetch_global_Serial1v>
   d576c:	6803      	ldr	r3, [r0, #0]
   d576e:	691b      	ldr	r3, [r3, #16]
   d5770:	4798      	blx	r3
   d5772:	2800      	cmp	r0, #0
   d5774:	dd01      	ble.n	d577a <serialEventRun+0x2e>
        serialEvent1();
   d5776:	f3af 8000 	nop.w
}
   d577a:	bd08      	pop	{r3, pc}
	...

000d5784 <_post_loop>:
{
   d5784:	b508      	push	{r3, lr}
	serialEventRun();
   d5786:	f7ff ffe1 	bl	d574c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d578a:	f7fe fea9 	bl	d44e0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d578e:	4b01      	ldr	r3, [pc, #4]	; (d5794 <_post_loop+0x10>)
   d5790:	6018      	str	r0, [r3, #0]
}
   d5792:	bd08      	pop	{r3, pc}
   d5794:	2003e7d4 	.word	0x2003e7d4

000d5798 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5798:	4802      	ldr	r0, [pc, #8]	; (d57a4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d579a:	4a03      	ldr	r2, [pc, #12]	; (d57a8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d579c:	4903      	ldr	r1, [pc, #12]	; (d57ac <_Z33system_initialize_user_backup_ramv+0x14>)
   d579e:	1a12      	subs	r2, r2, r0
   d57a0:	f000 bafe 	b.w	d5da0 <memcpy>
   d57a4:	2003f400 	.word	0x2003f400
   d57a8:	2003f404 	.word	0x2003f404
   d57ac:	000d60b0 	.word	0x000d60b0

000d57b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d57b0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57b2:	2300      	movs	r3, #0
   d57b4:	9300      	str	r3, [sp, #0]
   d57b6:	461a      	mov	r2, r3
   d57b8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57bc:	f7fe fff2 	bl	d47a4 <system_ctrl_set_result>
}
   d57c0:	b003      	add	sp, #12
   d57c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d57c8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d57c8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d57ca:	8843      	ldrh	r3, [r0, #2]
   d57cc:	2b0a      	cmp	r3, #10
   d57ce:	d008      	beq.n	d57e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d57d0:	2b50      	cmp	r3, #80	; 0x50
   d57d2:	d10b      	bne.n	d57ec <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d57d4:	4b09      	ldr	r3, [pc, #36]	; (d57fc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d57d6:	681b      	ldr	r3, [r3, #0]
   d57d8:	b14b      	cbz	r3, d57ee <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d57da:	b003      	add	sp, #12
   d57dc:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d57e0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d57e2:	f7ff ffe5 	bl	d57b0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d57e6:	b003      	add	sp, #12
   d57e8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d57ec:	2300      	movs	r3, #0
   d57ee:	9300      	str	r3, [sp, #0]
   d57f0:	461a      	mov	r2, r3
   d57f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d57f6:	f7fe ffd5 	bl	d47a4 <system_ctrl_set_result>
}
   d57fa:	e7f4      	b.n	d57e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d57fc:	2003e7c4 	.word	0x2003e7c4

000d5800 <module_user_init_hook>:
{
   d5800:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5802:	4c12      	ldr	r4, [pc, #72]	; (d584c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5804:	4812      	ldr	r0, [pc, #72]	; (d5850 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5806:	4d13      	ldr	r5, [pc, #76]	; (d5854 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5808:	2100      	movs	r1, #0
   d580a:	f7ff f84d 	bl	d48a8 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d580e:	6823      	ldr	r3, [r4, #0]
   d5810:	42ab      	cmp	r3, r5
   d5812:	4b11      	ldr	r3, [pc, #68]	; (d5858 <module_user_init_hook+0x58>)
   d5814:	bf0c      	ite	eq
   d5816:	2201      	moveq	r2, #1
   d5818:	2200      	movne	r2, #0
   d581a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d581c:	d002      	beq.n	d5824 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d581e:	f7ff ffbb 	bl	d5798 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5822:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5824:	f7fe fe54 	bl	d44d0 <HAL_RNG_GetRandomNumber>
   d5828:	4604      	mov	r4, r0
    srand(seed);
   d582a:	f000 facf 	bl	d5dcc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d582e:	4b0b      	ldr	r3, [pc, #44]	; (d585c <module_user_init_hook+0x5c>)
   d5830:	b113      	cbz	r3, d5838 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5832:	4620      	mov	r0, r4
   d5834:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5838:	2100      	movs	r1, #0
   d583a:	4808      	ldr	r0, [pc, #32]	; (d585c <module_user_init_hook+0x5c>)
   d583c:	f7fe ffbc 	bl	d47b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5844:	4806      	ldr	r0, [pc, #24]	; (d5860 <module_user_init_hook+0x60>)
   d5846:	2100      	movs	r1, #0
   d5848:	f7fe bfa2 	b.w	d4790 <system_ctrl_set_app_request_handler>
   d584c:	2003f400 	.word	0x2003f400
   d5850:	000d5741 	.word	0x000d5741
   d5854:	9a271c1e 	.word	0x9a271c1e
   d5858:	2003e7c0 	.word	0x2003e7c0
   d585c:	00000000 	.word	0x00000000
   d5860:	000d57c9 	.word	0x000d57c9

000d5864 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5864:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5866:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5868:	d902      	bls.n	d5870 <pinAvailable+0xc>
    return false;
   d586a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d586c:	b002      	add	sp, #8
   d586e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5870:	f1a0 030b 	sub.w	r3, r0, #11
   d5874:	2b02      	cmp	r3, #2
   d5876:	d81a      	bhi.n	d58ae <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5878:	4c17      	ldr	r4, [pc, #92]	; (d58d8 <pinAvailable+0x74>)
   d587a:	7821      	ldrb	r1, [r4, #0]
   d587c:	f3bf 8f5b 	dmb	ish
   d5880:	f011 0101 	ands.w	r1, r1, #1
   d5884:	d10b      	bne.n	d589e <pinAvailable+0x3a>
   d5886:	4620      	mov	r0, r4
   d5888:	9101      	str	r1, [sp, #4]
   d588a:	f7fe fc06 	bl	d409a <__cxa_guard_acquire>
   d588e:	9901      	ldr	r1, [sp, #4]
   d5890:	b128      	cbz	r0, d589e <pinAvailable+0x3a>
   d5892:	4812      	ldr	r0, [pc, #72]	; (d58dc <pinAvailable+0x78>)
   d5894:	f7ff fa7a 	bl	d4d8c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5898:	4620      	mov	r0, r4
   d589a:	f7fe fc03 	bl	d40a4 <__cxa_guard_release>
   d589e:	4b0f      	ldr	r3, [pc, #60]	; (d58dc <pinAvailable+0x78>)
   d58a0:	7818      	ldrb	r0, [r3, #0]
   d58a2:	f7fe fee5 	bl	d4670 <hal_spi_is_enabled>
   d58a6:	2800      	cmp	r0, #0
   d58a8:	d1df      	bne.n	d586a <pinAvailable+0x6>
  return true; // 'pin' is available
   d58aa:	2001      	movs	r0, #1
   d58ac:	e7de      	b.n	d586c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d58ae:	2801      	cmp	r0, #1
   d58b0:	d809      	bhi.n	d58c6 <pinAvailable+0x62>
   d58b2:	f000 f851 	bl	d5958 <_Z19__fetch_global_Wirev>
   d58b6:	2100      	movs	r1, #0
   d58b8:	7c00      	ldrb	r0, [r0, #16]
   d58ba:	f7fe fe59 	bl	d4570 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d58be:	f080 0001 	eor.w	r0, r0, #1
   d58c2:	b2c0      	uxtb	r0, r0
   d58c4:	e7d2      	b.n	d586c <pinAvailable+0x8>
   d58c6:	3809      	subs	r0, #9
   d58c8:	2801      	cmp	r0, #1
   d58ca:	d8ee      	bhi.n	d58aa <pinAvailable+0x46>
   d58cc:	f7ff fe48 	bl	d5560 <_Z22__fetch_global_Serial1v>
   d58d0:	7c00      	ldrb	r0, [r0, #16]
   d58d2:	f7fe ff05 	bl	d46e0 <hal_usart_is_enabled>
   d58d6:	e7f2      	b.n	d58be <pinAvailable+0x5a>
   d58d8:	2003e7c8 	.word	0x2003e7c8
   d58dc:	2003e7cc 	.word	0x2003e7cc

000d58e0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58e0:	2823      	cmp	r0, #35	; 0x23
{
   d58e2:	b538      	push	{r3, r4, r5, lr}
   d58e4:	4604      	mov	r4, r0
   d58e6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d58e8:	d80a      	bhi.n	d5900 <pinMode+0x20>
   d58ea:	29ff      	cmp	r1, #255	; 0xff
   d58ec:	d008      	beq.n	d5900 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d58ee:	f7ff ffb9 	bl	d5864 <pinAvailable>
   d58f2:	b128      	cbz	r0, d5900 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d58f4:	4629      	mov	r1, r5
   d58f6:	4620      	mov	r0, r4
}
   d58f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d58fc:	f7fe bdf8 	b.w	d44f0 <HAL_Pin_Mode>
}
   d5900:	bd38      	pop	{r3, r4, r5, pc}

000d5902 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5902:	b510      	push	{r4, lr}
   d5904:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5906:	f7fe fdfb 	bl	d4500 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d590a:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d590c:	b2db      	uxtb	r3, r3
   d590e:	2b01      	cmp	r3, #1
   d5910:	d908      	bls.n	d5924 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5912:	4620      	mov	r0, r4
   d5914:	f7ff ffa6 	bl	d5864 <pinAvailable>
   d5918:	b120      	cbz	r0, d5924 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d591a:	4620      	mov	r0, r4
}
   d591c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5920:	f7fe bdf6 	b.w	d4510 <HAL_GPIO_Read>
}
   d5924:	2000      	movs	r0, #0
   d5926:	bd10      	pop	{r4, pc}

000d5928 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5928:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d592a:	2300      	movs	r3, #0
   d592c:	2520      	movs	r5, #32
   d592e:	8043      	strh	r3, [r0, #2]
   d5930:	2314      	movs	r3, #20
{
   d5932:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5934:	8003      	strh	r3, [r0, #0]
   d5936:	6085      	str	r5, [r0, #8]
   d5938:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d593a:	4906      	ldr	r1, [pc, #24]	; (d5954 <_Z17acquireWireBufferv+0x2c>)
   d593c:	4628      	mov	r0, r5
   d593e:	f000 f83a 	bl	d59b6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5942:	4904      	ldr	r1, [pc, #16]	; (d5954 <_Z17acquireWireBufferv+0x2c>)
	};
   d5944:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5946:	4628      	mov	r0, r5
   d5948:	f000 f835 	bl	d59b6 <_ZnajRKSt9nothrow_t>
	};
   d594c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d594e:	4620      	mov	r0, r4
   d5950:	bd38      	pop	{r3, r4, r5, pc}
   d5952:	bf00      	nop
   d5954:	000d6084 	.word	0x000d6084

000d5958 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5958:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d595a:	4d0f      	ldr	r5, [pc, #60]	; (d5998 <_Z19__fetch_global_Wirev+0x40>)
   d595c:	7829      	ldrb	r1, [r5, #0]
   d595e:	f3bf 8f5b 	dmb	ish
   d5962:	f011 0401 	ands.w	r4, r1, #1
{
   d5966:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5968:	d113      	bne.n	d5992 <_Z19__fetch_global_Wirev+0x3a>
   d596a:	4628      	mov	r0, r5
   d596c:	f7fe fb95 	bl	d409a <__cxa_guard_acquire>
   d5970:	b178      	cbz	r0, d5992 <_Z19__fetch_global_Wirev+0x3a>
   d5972:	a801      	add	r0, sp, #4
   d5974:	f7ff ffd8 	bl	d5928 <_Z17acquireWireBufferv>
   d5978:	aa01      	add	r2, sp, #4
   d597a:	4621      	mov	r1, r4
   d597c:	4807      	ldr	r0, [pc, #28]	; (d599c <_Z19__fetch_global_Wirev+0x44>)
   d597e:	f7ff f82f 	bl	d49e0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5982:	4628      	mov	r0, r5
   d5984:	f7fe fb8e 	bl	d40a4 <__cxa_guard_release>
   d5988:	4a05      	ldr	r2, [pc, #20]	; (d59a0 <_Z19__fetch_global_Wirev+0x48>)
   d598a:	4906      	ldr	r1, [pc, #24]	; (d59a4 <_Z19__fetch_global_Wirev+0x4c>)
   d598c:	4803      	ldr	r0, [pc, #12]	; (d599c <_Z19__fetch_global_Wirev+0x44>)
   d598e:	f000 f80b 	bl	d59a8 <__aeabi_atexit>
	return wire;
}
   d5992:	4802      	ldr	r0, [pc, #8]	; (d599c <_Z19__fetch_global_Wirev+0x44>)
   d5994:	b007      	add	sp, #28
   d5996:	bd30      	pop	{r4, r5, pc}
   d5998:	2003e7d8 	.word	0x2003e7d8
   d599c:	2003e7dc 	.word	0x2003e7dc
   d59a0:	2003e5c4 	.word	0x2003e5c4
   d59a4:	000d4989 	.word	0x000d4989

000d59a8 <__aeabi_atexit>:
   d59a8:	460b      	mov	r3, r1
   d59aa:	4601      	mov	r1, r0
   d59ac:	4618      	mov	r0, r3
   d59ae:	f000 b9e9 	b.w	d5d84 <__cxa_atexit>

000d59b2 <_ZdlPvj>:
   d59b2:	f7fe bb70 	b.w	d4096 <_ZdlPv>

000d59b6 <_ZnajRKSt9nothrow_t>:
   d59b6:	f7fe bb6c 	b.w	d4092 <_Znaj>
	...

000d59bc <__aeabi_drsub>:
   d59bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d59c0:	e002      	b.n	d59c8 <__adddf3>
   d59c2:	bf00      	nop

000d59c4 <__aeabi_dsub>:
   d59c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d59c8 <__adddf3>:
   d59c8:	b530      	push	{r4, r5, lr}
   d59ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d59ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d59d2:	ea94 0f05 	teq	r4, r5
   d59d6:	bf08      	it	eq
   d59d8:	ea90 0f02 	teqeq	r0, r2
   d59dc:	bf1f      	itttt	ne
   d59de:	ea54 0c00 	orrsne.w	ip, r4, r0
   d59e2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d59e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d59ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d59ee:	f000 80e2 	beq.w	d5bb6 <__adddf3+0x1ee>
   d59f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d59f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d59fa:	bfb8      	it	lt
   d59fc:	426d      	neglt	r5, r5
   d59fe:	dd0c      	ble.n	d5a1a <__adddf3+0x52>
   d5a00:	442c      	add	r4, r5
   d5a02:	ea80 0202 	eor.w	r2, r0, r2
   d5a06:	ea81 0303 	eor.w	r3, r1, r3
   d5a0a:	ea82 0000 	eor.w	r0, r2, r0
   d5a0e:	ea83 0101 	eor.w	r1, r3, r1
   d5a12:	ea80 0202 	eor.w	r2, r0, r2
   d5a16:	ea81 0303 	eor.w	r3, r1, r3
   d5a1a:	2d36      	cmp	r5, #54	; 0x36
   d5a1c:	bf88      	it	hi
   d5a1e:	bd30      	pophi	{r4, r5, pc}
   d5a20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5a24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5a28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5a2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5a30:	d002      	beq.n	d5a38 <__adddf3+0x70>
   d5a32:	4240      	negs	r0, r0
   d5a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5a38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5a3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5a40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5a44:	d002      	beq.n	d5a4c <__adddf3+0x84>
   d5a46:	4252      	negs	r2, r2
   d5a48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5a4c:	ea94 0f05 	teq	r4, r5
   d5a50:	f000 80a7 	beq.w	d5ba2 <__adddf3+0x1da>
   d5a54:	f1a4 0401 	sub.w	r4, r4, #1
   d5a58:	f1d5 0e20 	rsbs	lr, r5, #32
   d5a5c:	db0d      	blt.n	d5a7a <__adddf3+0xb2>
   d5a5e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5a62:	fa22 f205 	lsr.w	r2, r2, r5
   d5a66:	1880      	adds	r0, r0, r2
   d5a68:	f141 0100 	adc.w	r1, r1, #0
   d5a6c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5a70:	1880      	adds	r0, r0, r2
   d5a72:	fa43 f305 	asr.w	r3, r3, r5
   d5a76:	4159      	adcs	r1, r3
   d5a78:	e00e      	b.n	d5a98 <__adddf3+0xd0>
   d5a7a:	f1a5 0520 	sub.w	r5, r5, #32
   d5a7e:	f10e 0e20 	add.w	lr, lr, #32
   d5a82:	2a01      	cmp	r2, #1
   d5a84:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5a88:	bf28      	it	cs
   d5a8a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5a8e:	fa43 f305 	asr.w	r3, r3, r5
   d5a92:	18c0      	adds	r0, r0, r3
   d5a94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5a98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a9c:	d507      	bpl.n	d5aae <__adddf3+0xe6>
   d5a9e:	f04f 0e00 	mov.w	lr, #0
   d5aa2:	f1dc 0c00 	rsbs	ip, ip, #0
   d5aa6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5aaa:	eb6e 0101 	sbc.w	r1, lr, r1
   d5aae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5ab2:	d31b      	bcc.n	d5aec <__adddf3+0x124>
   d5ab4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5ab8:	d30c      	bcc.n	d5ad4 <__adddf3+0x10c>
   d5aba:	0849      	lsrs	r1, r1, #1
   d5abc:	ea5f 0030 	movs.w	r0, r0, rrx
   d5ac0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5ac4:	f104 0401 	add.w	r4, r4, #1
   d5ac8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5acc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5ad0:	f080 809a 	bcs.w	d5c08 <__adddf3+0x240>
   d5ad4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5ad8:	bf08      	it	eq
   d5ada:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5ade:	f150 0000 	adcs.w	r0, r0, #0
   d5ae2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5ae6:	ea41 0105 	orr.w	r1, r1, r5
   d5aea:	bd30      	pop	{r4, r5, pc}
   d5aec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5af0:	4140      	adcs	r0, r0
   d5af2:	eb41 0101 	adc.w	r1, r1, r1
   d5af6:	3c01      	subs	r4, #1
   d5af8:	bf28      	it	cs
   d5afa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5afe:	d2e9      	bcs.n	d5ad4 <__adddf3+0x10c>
   d5b00:	f091 0f00 	teq	r1, #0
   d5b04:	bf04      	itt	eq
   d5b06:	4601      	moveq	r1, r0
   d5b08:	2000      	moveq	r0, #0
   d5b0a:	fab1 f381 	clz	r3, r1
   d5b0e:	bf08      	it	eq
   d5b10:	3320      	addeq	r3, #32
   d5b12:	f1a3 030b 	sub.w	r3, r3, #11
   d5b16:	f1b3 0220 	subs.w	r2, r3, #32
   d5b1a:	da0c      	bge.n	d5b36 <__adddf3+0x16e>
   d5b1c:	320c      	adds	r2, #12
   d5b1e:	dd08      	ble.n	d5b32 <__adddf3+0x16a>
   d5b20:	f102 0c14 	add.w	ip, r2, #20
   d5b24:	f1c2 020c 	rsb	r2, r2, #12
   d5b28:	fa01 f00c 	lsl.w	r0, r1, ip
   d5b2c:	fa21 f102 	lsr.w	r1, r1, r2
   d5b30:	e00c      	b.n	d5b4c <__adddf3+0x184>
   d5b32:	f102 0214 	add.w	r2, r2, #20
   d5b36:	bfd8      	it	le
   d5b38:	f1c2 0c20 	rsble	ip, r2, #32
   d5b3c:	fa01 f102 	lsl.w	r1, r1, r2
   d5b40:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5b44:	bfdc      	itt	le
   d5b46:	ea41 010c 	orrle.w	r1, r1, ip
   d5b4a:	4090      	lslle	r0, r2
   d5b4c:	1ae4      	subs	r4, r4, r3
   d5b4e:	bfa2      	ittt	ge
   d5b50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5b54:	4329      	orrge	r1, r5
   d5b56:	bd30      	popge	{r4, r5, pc}
   d5b58:	ea6f 0404 	mvn.w	r4, r4
   d5b5c:	3c1f      	subs	r4, #31
   d5b5e:	da1c      	bge.n	d5b9a <__adddf3+0x1d2>
   d5b60:	340c      	adds	r4, #12
   d5b62:	dc0e      	bgt.n	d5b82 <__adddf3+0x1ba>
   d5b64:	f104 0414 	add.w	r4, r4, #20
   d5b68:	f1c4 0220 	rsb	r2, r4, #32
   d5b6c:	fa20 f004 	lsr.w	r0, r0, r4
   d5b70:	fa01 f302 	lsl.w	r3, r1, r2
   d5b74:	ea40 0003 	orr.w	r0, r0, r3
   d5b78:	fa21 f304 	lsr.w	r3, r1, r4
   d5b7c:	ea45 0103 	orr.w	r1, r5, r3
   d5b80:	bd30      	pop	{r4, r5, pc}
   d5b82:	f1c4 040c 	rsb	r4, r4, #12
   d5b86:	f1c4 0220 	rsb	r2, r4, #32
   d5b8a:	fa20 f002 	lsr.w	r0, r0, r2
   d5b8e:	fa01 f304 	lsl.w	r3, r1, r4
   d5b92:	ea40 0003 	orr.w	r0, r0, r3
   d5b96:	4629      	mov	r1, r5
   d5b98:	bd30      	pop	{r4, r5, pc}
   d5b9a:	fa21 f004 	lsr.w	r0, r1, r4
   d5b9e:	4629      	mov	r1, r5
   d5ba0:	bd30      	pop	{r4, r5, pc}
   d5ba2:	f094 0f00 	teq	r4, #0
   d5ba6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5baa:	bf06      	itte	eq
   d5bac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5bb0:	3401      	addeq	r4, #1
   d5bb2:	3d01      	subne	r5, #1
   d5bb4:	e74e      	b.n	d5a54 <__adddf3+0x8c>
   d5bb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5bba:	bf18      	it	ne
   d5bbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5bc0:	d029      	beq.n	d5c16 <__adddf3+0x24e>
   d5bc2:	ea94 0f05 	teq	r4, r5
   d5bc6:	bf08      	it	eq
   d5bc8:	ea90 0f02 	teqeq	r0, r2
   d5bcc:	d005      	beq.n	d5bda <__adddf3+0x212>
   d5bce:	ea54 0c00 	orrs.w	ip, r4, r0
   d5bd2:	bf04      	itt	eq
   d5bd4:	4619      	moveq	r1, r3
   d5bd6:	4610      	moveq	r0, r2
   d5bd8:	bd30      	pop	{r4, r5, pc}
   d5bda:	ea91 0f03 	teq	r1, r3
   d5bde:	bf1e      	ittt	ne
   d5be0:	2100      	movne	r1, #0
   d5be2:	2000      	movne	r0, #0
   d5be4:	bd30      	popne	{r4, r5, pc}
   d5be6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5bea:	d105      	bne.n	d5bf8 <__adddf3+0x230>
   d5bec:	0040      	lsls	r0, r0, #1
   d5bee:	4149      	adcs	r1, r1
   d5bf0:	bf28      	it	cs
   d5bf2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5bf6:	bd30      	pop	{r4, r5, pc}
   d5bf8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5bfc:	bf3c      	itt	cc
   d5bfe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5c02:	bd30      	popcc	{r4, r5, pc}
   d5c04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5c08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5c0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5c10:	f04f 0000 	mov.w	r0, #0
   d5c14:	bd30      	pop	{r4, r5, pc}
   d5c16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5c1a:	bf1a      	itte	ne
   d5c1c:	4619      	movne	r1, r3
   d5c1e:	4610      	movne	r0, r2
   d5c20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5c24:	bf1c      	itt	ne
   d5c26:	460b      	movne	r3, r1
   d5c28:	4602      	movne	r2, r0
   d5c2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5c2e:	bf06      	itte	eq
   d5c30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5c34:	ea91 0f03 	teqeq	r1, r3
   d5c38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5c3c:	bd30      	pop	{r4, r5, pc}
   d5c3e:	bf00      	nop

000d5c40 <__aeabi_ui2d>:
   d5c40:	f090 0f00 	teq	r0, #0
   d5c44:	bf04      	itt	eq
   d5c46:	2100      	moveq	r1, #0
   d5c48:	4770      	bxeq	lr
   d5c4a:	b530      	push	{r4, r5, lr}
   d5c4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5c50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5c54:	f04f 0500 	mov.w	r5, #0
   d5c58:	f04f 0100 	mov.w	r1, #0
   d5c5c:	e750      	b.n	d5b00 <__adddf3+0x138>
   d5c5e:	bf00      	nop

000d5c60 <__aeabi_i2d>:
   d5c60:	f090 0f00 	teq	r0, #0
   d5c64:	bf04      	itt	eq
   d5c66:	2100      	moveq	r1, #0
   d5c68:	4770      	bxeq	lr
   d5c6a:	b530      	push	{r4, r5, lr}
   d5c6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5c70:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5c74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5c78:	bf48      	it	mi
   d5c7a:	4240      	negmi	r0, r0
   d5c7c:	f04f 0100 	mov.w	r1, #0
   d5c80:	e73e      	b.n	d5b00 <__adddf3+0x138>
   d5c82:	bf00      	nop

000d5c84 <__aeabi_f2d>:
   d5c84:	0042      	lsls	r2, r0, #1
   d5c86:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5c8a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5c8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5c92:	bf1f      	itttt	ne
   d5c94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5c98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5c9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5ca0:	4770      	bxne	lr
   d5ca2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5ca6:	bf08      	it	eq
   d5ca8:	4770      	bxeq	lr
   d5caa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5cae:	bf04      	itt	eq
   d5cb0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5cb4:	4770      	bxeq	lr
   d5cb6:	b530      	push	{r4, r5, lr}
   d5cb8:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5cbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5cc0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5cc4:	e71c      	b.n	d5b00 <__adddf3+0x138>
   d5cc6:	bf00      	nop

000d5cc8 <__aeabi_ul2d>:
   d5cc8:	ea50 0201 	orrs.w	r2, r0, r1
   d5ccc:	bf08      	it	eq
   d5cce:	4770      	bxeq	lr
   d5cd0:	b530      	push	{r4, r5, lr}
   d5cd2:	f04f 0500 	mov.w	r5, #0
   d5cd6:	e00a      	b.n	d5cee <__aeabi_l2d+0x16>

000d5cd8 <__aeabi_l2d>:
   d5cd8:	ea50 0201 	orrs.w	r2, r0, r1
   d5cdc:	bf08      	it	eq
   d5cde:	4770      	bxeq	lr
   d5ce0:	b530      	push	{r4, r5, lr}
   d5ce2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5ce6:	d502      	bpl.n	d5cee <__aeabi_l2d+0x16>
   d5ce8:	4240      	negs	r0, r0
   d5cea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5cee:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5cf2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5cf6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5cfa:	f43f aed8 	beq.w	d5aae <__adddf3+0xe6>
   d5cfe:	f04f 0203 	mov.w	r2, #3
   d5d02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5d06:	bf18      	it	ne
   d5d08:	3203      	addne	r2, #3
   d5d0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5d0e:	bf18      	it	ne
   d5d10:	3203      	addne	r2, #3
   d5d12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5d16:	f1c2 0320 	rsb	r3, r2, #32
   d5d1a:	fa00 fc03 	lsl.w	ip, r0, r3
   d5d1e:	fa20 f002 	lsr.w	r0, r0, r2
   d5d22:	fa01 fe03 	lsl.w	lr, r1, r3
   d5d26:	ea40 000e 	orr.w	r0, r0, lr
   d5d2a:	fa21 f102 	lsr.w	r1, r1, r2
   d5d2e:	4414      	add	r4, r2
   d5d30:	e6bd      	b.n	d5aae <__adddf3+0xe6>
   d5d32:	bf00      	nop

000d5d34 <__aeabi_d2iz>:
   d5d34:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5d38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5d3c:	d215      	bcs.n	d5d6a <__aeabi_d2iz+0x36>
   d5d3e:	d511      	bpl.n	d5d64 <__aeabi_d2iz+0x30>
   d5d40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5d44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5d48:	d912      	bls.n	d5d70 <__aeabi_d2iz+0x3c>
   d5d4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5d52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5d56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5d5a:	fa23 f002 	lsr.w	r0, r3, r2
   d5d5e:	bf18      	it	ne
   d5d60:	4240      	negne	r0, r0
   d5d62:	4770      	bx	lr
   d5d64:	f04f 0000 	mov.w	r0, #0
   d5d68:	4770      	bx	lr
   d5d6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5d6e:	d105      	bne.n	d5d7c <__aeabi_d2iz+0x48>
   d5d70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5d74:	bf08      	it	eq
   d5d76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5d7a:	4770      	bx	lr
   d5d7c:	f04f 0000 	mov.w	r0, #0
   d5d80:	4770      	bx	lr
   d5d82:	bf00      	nop

000d5d84 <__cxa_atexit>:
   d5d84:	b510      	push	{r4, lr}
   d5d86:	4c05      	ldr	r4, [pc, #20]	; (d5d9c <__cxa_atexit+0x18>)
   d5d88:	4613      	mov	r3, r2
   d5d8a:	b12c      	cbz	r4, d5d98 <__cxa_atexit+0x14>
   d5d8c:	460a      	mov	r2, r1
   d5d8e:	4601      	mov	r1, r0
   d5d90:	2002      	movs	r0, #2
   d5d92:	f3af 8000 	nop.w
   d5d96:	bd10      	pop	{r4, pc}
   d5d98:	4620      	mov	r0, r4
   d5d9a:	e7fc      	b.n	d5d96 <__cxa_atexit+0x12>
   d5d9c:	00000000 	.word	0x00000000

000d5da0 <memcpy>:
   d5da0:	440a      	add	r2, r1
   d5da2:	4291      	cmp	r1, r2
   d5da4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5da8:	d100      	bne.n	d5dac <memcpy+0xc>
   d5daa:	4770      	bx	lr
   d5dac:	b510      	push	{r4, lr}
   d5dae:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5db2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5db6:	4291      	cmp	r1, r2
   d5db8:	d1f9      	bne.n	d5dae <memcpy+0xe>
   d5dba:	bd10      	pop	{r4, pc}

000d5dbc <memset>:
   d5dbc:	4402      	add	r2, r0
   d5dbe:	4603      	mov	r3, r0
   d5dc0:	4293      	cmp	r3, r2
   d5dc2:	d100      	bne.n	d5dc6 <memset+0xa>
   d5dc4:	4770      	bx	lr
   d5dc6:	f803 1b01 	strb.w	r1, [r3], #1
   d5dca:	e7f9      	b.n	d5dc0 <memset+0x4>

000d5dcc <srand>:
   d5dcc:	b538      	push	{r3, r4, r5, lr}
   d5dce:	4b0d      	ldr	r3, [pc, #52]	; (d5e04 <srand+0x38>)
   d5dd0:	681d      	ldr	r5, [r3, #0]
   d5dd2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5dd4:	4604      	mov	r4, r0
   d5dd6:	b97b      	cbnz	r3, d5df8 <srand+0x2c>
   d5dd8:	2018      	movs	r0, #24
   d5dda:	f7fe fd4d 	bl	d4878 <malloc>
   d5dde:	4a0a      	ldr	r2, [pc, #40]	; (d5e08 <srand+0x3c>)
   d5de0:	4b0a      	ldr	r3, [pc, #40]	; (d5e0c <srand+0x40>)
   d5de2:	63a8      	str	r0, [r5, #56]	; 0x38
   d5de4:	e9c0 2300 	strd	r2, r3, [r0]
   d5de8:	4b09      	ldr	r3, [pc, #36]	; (d5e10 <srand+0x44>)
   d5dea:	6083      	str	r3, [r0, #8]
   d5dec:	230b      	movs	r3, #11
   d5dee:	8183      	strh	r3, [r0, #12]
   d5df0:	2201      	movs	r2, #1
   d5df2:	2300      	movs	r3, #0
   d5df4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5df8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5dfa:	2200      	movs	r2, #0
   d5dfc:	611c      	str	r4, [r3, #16]
   d5dfe:	615a      	str	r2, [r3, #20]
   d5e00:	bd38      	pop	{r3, r4, r5, pc}
   d5e02:	bf00      	nop
   d5e04:	2003e560 	.word	0x2003e560
   d5e08:	abcd330e 	.word	0xabcd330e
   d5e0c:	e66d1234 	.word	0xe66d1234
   d5e10:	0005deec 	.word	0x0005deec

000d5e14 <strcpy>:
   d5e14:	4603      	mov	r3, r0
   d5e16:	f811 2b01 	ldrb.w	r2, [r1], #1
   d5e1a:	f803 2b01 	strb.w	r2, [r3], #1
   d5e1e:	2a00      	cmp	r2, #0
   d5e20:	d1f9      	bne.n	d5e16 <strcpy+0x2>
   d5e22:	4770      	bx	lr

000d5e24 <strlen>:
   d5e24:	4603      	mov	r3, r0
   d5e26:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5e2a:	2a00      	cmp	r2, #0
   d5e2c:	d1fb      	bne.n	d5e26 <strlen+0x2>
   d5e2e:	1a18      	subs	r0, r3, r0
   d5e30:	3801      	subs	r0, #1
   d5e32:	4770      	bx	lr

000d5e34 <dynalib_user>:
   d5e34:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d5e44:	0000 0000 5241 4f47 204e 5049 2820 4844     ....ARGON IP (DH
   d5e54:	5043 3a29 0020 742f 756f 6863 2d00 2d2d     CP): ./touch.---
   d5e64:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d5e74:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d5e84:	4d00 7369 6174 656b 206e 6552 6c61 7469     .Mistaken Realit
   d5e94:	6569 0073 6f43 706d 656c 6574 2064 6f76     ies.Completed vo
   d5ea4:	6469 7320 7465 7075 4900 6d27 7020 6572     id setup.I'm pre
   d5eb4:	7373 6e69 0067 0000                         ssing...

000d5ebc <_ZTVN5spark13EthernetClassE>:
	...
   d5ec4:	4969 000d 495f 000d 4955 000d 494b 000d     iI.._I..UI..KI..
   d5ed4:	493f 000d 4933 000d 4927 000d 491f 000d     ?I..3I..'I...I..
   d5ee4:	4915 000d 490b 000d 4b95 000d               .I...I...K..

000d5ef0 <_ZTV7TwoWire>:
	...
   d5ef8:	4989 000d 49d3 000d 49ab 000d 498b 000d     .I...I...I...I..
   d5f08:	49b3 000d 49bb 000d 49c3 000d 49cb 000d     .I...I...I...I..

000d5f18 <_ZTV9IPAddress>:
	...
   d5f20:	4a05 000d 40ab 000d 40cd 000d 7061 0070     .J...@...@..app.

000d5f30 <_ZTVN5spark12NetworkClassE>:
	...
   d5f38:	4b2d 000d 4b37 000d 4b41 000d 4b4b 000d     -K..7K..AK..KK..
   d5f48:	4b55 000d 4b61 000d 4b6d 000d 4b79 000d     UK..aK..mK..yK..
   d5f58:	4b81 000d 4b8b 000d 4b95 000d 5925 252d     .K...K...K..%Y-%
   d5f68:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d5f78:	7361 7463 6d69 0065                         asctime.

000d5f80 <_ZTV3UDP>:
	...
   d5f88:	40ad 000d 40db 000d 4f59 000d 5081 000d     .@...@..YO...P..
   d5f98:	4f51 000d 4f71 000d 4f8f 000d 4fa9 000d     QO..qO...O...O..
   d5fa8:	4fcd 000d 5065 000d 5363 000d 5109 000d     .O..eP..cS...Q..
   d5fb8:	5281 000d 4f39 000d 544d 000d 5209 000d     .R..9O..MT...R..
   d5fc8:	5141 000d 547b 000d 50ab 000d 4f47 000d     AQ..{T...P..GO..
   d5fd8:	50e9 000d 4f4d 000d 4fab 000d fff0 ffff     .P..MO...O......
   d5fe8:	0000 0000 4fc5 000d                         .....O..

000d5ff0 <_ZTV11USARTSerial>:
	...
   d5ff8:	54bb 000d 5527 000d 54ff 000d 4c7d 000d     .T..'U...T..}L..
   d6008:	54cf 000d 54eb 000d 54dd 000d 54f9 000d     .T...T...T...T..
   d6018:	54bd 000d 54c1 000d                         .T...T..

000d6020 <_ZTV9USBSerial>:
	...
   d6028:	55b9 000d 5621 000d 55f7 000d 4c7d 000d     .U..!V...U..}L..
   d6038:	55e9 000d 55bb 000d 55cb 000d 561b 000d     .U...U...U...V..
   d6048:	55db 000d 55b5 000d                         .U...U..

000d6050 <_ZTVN5spark9WiFiClassE>:
	...
   d6058:	5723 000d 5719 000d 570f 000d 56c5 000d     #W...W...W...V..
   d6068:	5703 000d 56f7 000d 56eb 000d 56e3 000d     .W...V...V...V..
   d6078:	56d9 000d 56cf 000d 4b95 000d               .V...V...K..

000d6084 <_ZSt7nothrow>:
	...

000d6085 <link_const_variable_data_end>:
   d6085:	00          	.byte	0x00
	...

000d6088 <link_constructors_location>:
   d6088:	000d423d 	.word	0x000d423d
   d608c:	000d48d1 	.word	0x000d48d1
   d6090:	000d4975 	.word	0x000d4975
   d6094:	000d4b1d 	.word	0x000d4b1d
   d6098:	000d4c69 	.word	0x000d4c69
   d609c:	000d4d71 	.word	0x000d4d71
   d60a0:	000d4ee9 	.word	0x000d4ee9
   d60a4:	000d4f25 	.word	0x000d4f25
   d60a8:	000d572d 	.word	0x000d572d

000d60ac <link_constructors_end>:
   d60ac:	00000000 	.word	0x00000000
