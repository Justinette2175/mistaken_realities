
/Users/justinegagnepain/Documents/concordia_classes/CART_461_Tangible_Media_Studio/mistaken_realities_latest/target/2.0.1/argon/mistaken_realities_latest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002314  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6330  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e558  000d6334  0001e558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000022c  2003e5c4  2003e5c4  0002e5c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d63a0  000d63a0  000263a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d63c8  000d63c8  000263c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00142fdb  00000000  00000000  000263cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015bfa  00000000  00000000  001693a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002b421  00000000  00000000  0017efa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000028b8  00000000  00000000  001aa3c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000077e8  00000000  00000000  001acc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037442  00000000  00000000  001b4462  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037122  00000000  00000000  001eb8a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b8b8  00000000  00000000  002229c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006df4  00000000  00000000  0032e280  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fff3 	bl	d6018 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fffb 	bl	d6034 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e558 	.word	0x2003e558
   d4048:	000d6334 	.word	0x000d6334
   d404c:	2003e5c4 	.word	0x2003e5c4
   d4050:	2003e5c4 	.word	0x2003e5c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fcf1 	bl	d5a44 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d6300 	.word	0x000d6300
   d407c:	000d6324 	.word	0x000d6324

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b98e 	b.w	d43a0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f88d 	bl	d41a4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bc9b 	b.w	d59c8 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bcff 	b.w	d4a94 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bd05 	b.w	d4aa4 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d40aa:	4770      	bx	lr

000d40ac <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d40ac:	b510      	push	{r4, lr}
   d40ae:	4b06      	ldr	r3, [pc, #24]	; (d40c8 <_ZN3UDPD1Ev+0x1c>)
   d40b0:	6003      	str	r3, [r0, #0]
   d40b2:	3364      	adds	r3, #100	; 0x64
   d40b4:	4604      	mov	r4, r0
   d40b6:	6103      	str	r3, [r0, #16]
   d40b8:	f001 f8f6 	bl	d52a8 <_ZN3UDP4stopEv>
   d40bc:	4620      	mov	r0, r4
   d40be:	f001 fab9 	bl	d5634 <_ZN3UDP13releaseBufferEv>
   d40c2:	4620      	mov	r0, r4
   d40c4:	bd10      	pop	{r4, pc}
   d40c6:	bf00      	nop
   d40c8:	000d6200 	.word	0x000d6200

000d40cc <_ZN9IPAddressD0Ev>:
   d40cc:	b510      	push	{r4, lr}
   d40ce:	2118      	movs	r1, #24
   d40d0:	4604      	mov	r4, r0
   d40d2:	f001 fdaa 	bl	d5c2a <_ZdlPvj>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}

000d40da <_ZN3UDPD0Ev>:
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	f7ff ffe5 	bl	d40ac <_ZN3UDPD1Ev>
   d40e2:	4620      	mov	r0, r4
   d40e4:	214c      	movs	r1, #76	; 0x4c
   d40e6:	f001 fda0 	bl	d5c2a <_ZdlPvj>
   d40ea:	4620      	mov	r0, r4
   d40ec:	bd10      	pop	{r4, pc}
	...

000d40f0 <_Z12connectToLANv>:
IPAddress remoteIP(192, 168, 1, 9);
/* PORTS FOR INCOMING & OUTGOIN9 DATA */
unsigned int outPort = 8000;

void connectToLAN()
{
   d40f0:	b530      	push	{r4, r5, lr}
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d40f2:	4c14      	ldr	r4, [pc, #80]	; (d4144 <_Z12connectToLANv+0x54>)
   d40f4:	2300      	movs	r3, #0
   d40f6:	6860      	ldr	r0, [r4, #4]
   d40f8:	b087      	sub	sp, #28
   d40fa:	461a      	mov	r2, r3
   d40fc:	4619      	mov	r1, r3
   d40fe:	f000 fc79 	bl	d49f4 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4102:	2200      	movs	r2, #0
   d4104:	6860      	ldr	r0, [r4, #4]
   d4106:	4611      	mov	r1, r2
   d4108:	f000 fc8c 	bl	d4a24 <network_ready>
    /* IF ARGON ALREADY CONFIGURED FOR SSID/ROUTER - THEN THIS */
    /* TRY CONNECT TO SSID - ROUTER */
    WiFi.connect();
    /* WAIT UNTIL DHCP SERVICE ASSIGNS ARGON IPADDRESS */
    while (!WiFi.ready())
   d410c:	2800      	cmp	r0, #0
   d410e:	d0f8      	beq.n	d4102 <_Z12connectToLANv+0x12>
        ;

    delay(5);
   d4110:	2005      	movs	r0, #5
   d4112:	f000 fcdf 	bl	d4ad4 <delay>
    /* GET HOST (ARGON) ASSIGNED IP */
    Serial.print("ARGON IP (DHCP): ");
   d4116:	f001 fbcd 	bl	d58b4 <_Z16_fetch_usbserialv>
   d411a:	490b      	ldr	r1, [pc, #44]	; (d4148 <_Z12connectToLANv+0x58>)
   d411c:	f000 fef8 	bl	d4f10 <_ZN5Print5printEPKc>
    //argonIP = WiFi.localIP();
    //sprintf(argonIPAddress, "%d.%d.%d.%d", argonIP[0], argonIP[1], argonIP[2], argonIP[3]);
    Serial.println(WiFi.localIP());
   d4120:	f001 fbc8 	bl	d58b4 <_Z16_fetch_usbserialv>
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4124:	2200      	movs	r2, #0
   d4126:	4611      	mov	r1, r2
   d4128:	4605      	mov	r5, r0
   d412a:	6860      	ldr	r0, [r4, #4]
   d412c:	f000 fc5a 	bl	d49e4 <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
   d4130:	1c81      	adds	r1, r0, #2
   d4132:	4668      	mov	r0, sp
   d4134:	f000 fdc8 	bl	d4cc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4138:	4669      	mov	r1, sp
   d413a:	4628      	mov	r0, r5
   d413c:	f000 ff0b 	bl	d4f56 <_ZN5Print7printlnERK9Printable>
}
   d4140:	b007      	add	sp, #28
   d4142:	bd30      	pop	{r4, r5, pc}
   d4144:	2003e7b8 	.word	0x2003e7b8
   d4148:	000d60c0 	.word	0x000d60c0

000d414c <_Z11sendOSCDataf>:

void sendOSCData(float x)
{
   d414c:	b530      	push	{r4, r5, lr}
   d414e:	b09f      	sub	sp, #124	; 0x7c
    OSCMessage outMessage("/touch");
   d4150:	490f      	ldr	r1, [pc, #60]	; (d4190 <_Z11sendOSCDataf+0x44>)
{
   d4152:	ed8d 0a01 	vstr	s0, [sp, #4]
    OSCMessage outMessage("/touch");
   d4156:	a809      	add	r0, sp, #36	; 0x24
   d4158:	f000 f998 	bl	d448c <_ZN10OSCMessageC1EPKc>
class IPAddress : public Printable {
   d415c:	4d0d      	ldr	r5, [pc, #52]	; (d4194 <_Z11sendOSCDataf+0x48>)
    outMessage.addFloat(x);
   d415e:	ed9d 0a01 	vldr	s0, [sp, #4]
   d4162:	a809      	add	r0, sp, #36	; 0x24
   d4164:	f000 f9d1 	bl	d450a <_ZN10OSCMessage8addFloatEf>
   d4168:	4b0b      	ldr	r3, [pc, #44]	; (d4198 <_Z11sendOSCDataf+0x4c>)
   d416a:	9303      	str	r3, [sp, #12]
   d416c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d416e:	ac04      	add	r4, sp, #16
   d4170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4172:	682b      	ldr	r3, [r5, #0]
   d4174:	7023      	strb	r3, [r4, #0]
    outMessage.send(Udp, remoteIP, outPort);
   d4176:	4b09      	ldr	r3, [pc, #36]	; (d419c <_Z11sendOSCDataf+0x50>)
   d4178:	4909      	ldr	r1, [pc, #36]	; (d41a0 <_Z11sendOSCDataf+0x54>)
   d417a:	681b      	ldr	r3, [r3, #0]
   d417c:	aa03      	add	r2, sp, #12
   d417e:	a809      	add	r0, sp, #36	; 0x24
   d4180:	f000 f9ee 	bl	d4560 <_ZN10OSCMessage4sendER3UDP9IPAddressj>
    OSCMessage outMessage("/touch");
   d4184:	a809      	add	r0, sp, #36	; 0x24
   d4186:	f000 f9a3 	bl	d44d0 <_ZN10OSCMessageD1Ev>
}
   d418a:	b01f      	add	sp, #124	; 0x7c
   d418c:	bd30      	pop	{r4, r5, pc}
   d418e:	bf00      	nop
   d4190:	000d60d2 	.word	0x000d60d2
   d4194:	2003e630 	.word	0x2003e630
   d4198:	000d6198 	.word	0x000d6198
   d419c:	2003e558 	.word	0x2003e558
   d41a0:	2003e5c8 	.word	0x2003e5c8

000d41a4 <loop>:
    delay(5); // Force Serial.println in void setup()
    Serial.println("Completed void setup");
}

void loop()
{
   d41a4:	b508      	push	{r3, lr}
    // readAllTouchInputs();
    delay(50);
   d41a6:	2032      	movs	r0, #50	; 0x32
   d41a8:	f000 fc94 	bl	d4ad4 <delay>
    // printTouchInputs();
    if (digitalRead(B_TN) == LOW)
   d41ac:	2002      	movs	r0, #2
   d41ae:	f001 fce3 	bl	d5b78 <digitalRead>
   d41b2:	b970      	cbnz	r0, d41d2 <loop+0x2e>
    {
        Serial.println("I'm pressing");
   d41b4:	f001 fb7e 	bl	d58b4 <_Z16_fetch_usbserialv>
   d41b8:	4906      	ldr	r1, [pc, #24]	; (d41d4 <loop+0x30>)
   d41ba:	f000 fec2 	bl	d4f42 <_ZN5Print7printlnEPKc>
        sendOSCData(1.0);
   d41be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   d41c2:	f7ff ffc3 	bl	d414c <_Z11sendOSCDataf>
        delay(1000);
    }

    // sendOSCData(1.0);
    // If there is position data available, read and print it
}
   d41c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        delay(1000);
   d41ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d41ce:	f000 bc81 	b.w	d4ad4 <delay>
}
   d41d2:	bd08      	pop	{r3, pc}
   d41d4:	000d60d9 	.word	0x000d60d9

000d41d8 <_Z12set_registerihh>:
{
    return digitalRead(pin);
}

void set_register(int address, unsigned char r, unsigned char v)
{
   d41d8:	b570      	push	{r4, r5, r6, lr}
   d41da:	4606      	mov	r6, r0
   d41dc:	4614      	mov	r4, r2
   d41de:	460d      	mov	r5, r1
    Wire.beginTransmission(address);
   d41e0:	f001 fcf6 	bl	d5bd0 <_Z19__fetch_global_Wirev>
   d41e4:	4631      	mov	r1, r6
   d41e6:	f000 fd25 	bl	d4c34 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(r);
   d41ea:	f001 fcf1 	bl	d5bd0 <_Z19__fetch_global_Wirev>
   d41ee:	6803      	ldr	r3, [r0, #0]
   d41f0:	4629      	mov	r1, r5
   d41f2:	689b      	ldr	r3, [r3, #8]
   d41f4:	4798      	blx	r3
    Wire.write(v);
   d41f6:	f001 fceb 	bl	d5bd0 <_Z19__fetch_global_Wirev>
   d41fa:	6803      	ldr	r3, [r0, #0]
   d41fc:	4621      	mov	r1, r4
   d41fe:	689b      	ldr	r3, [r3, #8]
   d4200:	4798      	blx	r3
    Wire.endTransmission();
   d4202:	f001 fce5 	bl	d5bd0 <_Z19__fetch_global_Wirev>
}
   d4206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d420a:	f000 bd1a 	b.w	d4c42 <_ZN7TwoWire15endTransmissionEv>

000d420e <_Z12mpr121_setuph>:
{
   d420e:	b510      	push	{r4, lr}
    set_register(address, ELE_CFG, 0x00);
   d4210:	2200      	movs	r2, #0
{
   d4212:	4604      	mov	r4, r0
    set_register(address, ELE_CFG, 0x00);
   d4214:	215e      	movs	r1, #94	; 0x5e
   d4216:	f7ff ffdf 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, MHD_R, 0x01);
   d421a:	4620      	mov	r0, r4
   d421c:	2201      	movs	r2, #1
   d421e:	212b      	movs	r1, #43	; 0x2b
   d4220:	f7ff ffda 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, NHD_R, 0x01);
   d4224:	4620      	mov	r0, r4
   d4226:	2201      	movs	r2, #1
   d4228:	212c      	movs	r1, #44	; 0x2c
   d422a:	f7ff ffd5 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, NCL_R, 0x00);
   d422e:	4620      	mov	r0, r4
   d4230:	2200      	movs	r2, #0
   d4232:	212d      	movs	r1, #45	; 0x2d
   d4234:	f7ff ffd0 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, FDL_R, 0x00);
   d4238:	4620      	mov	r0, r4
   d423a:	2200      	movs	r2, #0
   d423c:	212e      	movs	r1, #46	; 0x2e
   d423e:	f7ff ffcb 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, MHD_F, 0x01);
   d4242:	4620      	mov	r0, r4
   d4244:	2201      	movs	r2, #1
   d4246:	212f      	movs	r1, #47	; 0x2f
   d4248:	f7ff ffc6 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, NHD_F, 0x01);
   d424c:	4620      	mov	r0, r4
   d424e:	2201      	movs	r2, #1
   d4250:	2130      	movs	r1, #48	; 0x30
   d4252:	f7ff ffc1 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, NCL_F, 0xFF);
   d4256:	4620      	mov	r0, r4
   d4258:	22ff      	movs	r2, #255	; 0xff
   d425a:	2131      	movs	r1, #49	; 0x31
   d425c:	f7ff ffbc 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, FDL_F, 0x02);
   d4260:	4620      	mov	r0, r4
   d4262:	2202      	movs	r2, #2
   d4264:	2132      	movs	r1, #50	; 0x32
   d4266:	f7ff ffb7 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE0_T, TOU_THRESH);
   d426a:	4620      	mov	r0, r4
   d426c:	2206      	movs	r2, #6
   d426e:	2141      	movs	r1, #65	; 0x41
   d4270:	f7ff ffb2 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE0_R, REL_THRESH);
   d4274:	4620      	mov	r0, r4
   d4276:	220a      	movs	r2, #10
   d4278:	2142      	movs	r1, #66	; 0x42
   d427a:	f7ff ffad 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE1_T, TOU_THRESH);
   d427e:	4620      	mov	r0, r4
   d4280:	2206      	movs	r2, #6
   d4282:	2143      	movs	r1, #67	; 0x43
   d4284:	f7ff ffa8 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE1_R, REL_THRESH);
   d4288:	4620      	mov	r0, r4
   d428a:	220a      	movs	r2, #10
   d428c:	2144      	movs	r1, #68	; 0x44
   d428e:	f7ff ffa3 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE2_T, TOU_THRESH);
   d4292:	4620      	mov	r0, r4
   d4294:	2206      	movs	r2, #6
   d4296:	2145      	movs	r1, #69	; 0x45
   d4298:	f7ff ff9e 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE2_R, REL_THRESH);
   d429c:	4620      	mov	r0, r4
   d429e:	220a      	movs	r2, #10
   d42a0:	2146      	movs	r1, #70	; 0x46
   d42a2:	f7ff ff99 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE3_T, TOU_THRESH);
   d42a6:	4620      	mov	r0, r4
   d42a8:	2206      	movs	r2, #6
   d42aa:	2147      	movs	r1, #71	; 0x47
   d42ac:	f7ff ff94 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE3_R, REL_THRESH);
   d42b0:	4620      	mov	r0, r4
   d42b2:	220a      	movs	r2, #10
   d42b4:	2148      	movs	r1, #72	; 0x48
   d42b6:	f7ff ff8f 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE4_T, TOU_THRESH);
   d42ba:	4620      	mov	r0, r4
   d42bc:	2206      	movs	r2, #6
   d42be:	2149      	movs	r1, #73	; 0x49
   d42c0:	f7ff ff8a 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE4_R, REL_THRESH);
   d42c4:	4620      	mov	r0, r4
   d42c6:	220a      	movs	r2, #10
   d42c8:	214a      	movs	r1, #74	; 0x4a
   d42ca:	f7ff ff85 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE5_T, TOU_THRESH);
   d42ce:	4620      	mov	r0, r4
   d42d0:	2206      	movs	r2, #6
   d42d2:	214b      	movs	r1, #75	; 0x4b
   d42d4:	f7ff ff80 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE5_R, REL_THRESH);
   d42d8:	4620      	mov	r0, r4
   d42da:	220a      	movs	r2, #10
   d42dc:	214c      	movs	r1, #76	; 0x4c
   d42de:	f7ff ff7b 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE6_T, TOU_THRESH);
   d42e2:	4620      	mov	r0, r4
   d42e4:	2206      	movs	r2, #6
   d42e6:	214d      	movs	r1, #77	; 0x4d
   d42e8:	f7ff ff76 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE6_R, REL_THRESH);
   d42ec:	4620      	mov	r0, r4
   d42ee:	220a      	movs	r2, #10
   d42f0:	214e      	movs	r1, #78	; 0x4e
   d42f2:	f7ff ff71 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE7_T, TOU_THRESH);
   d42f6:	4620      	mov	r0, r4
   d42f8:	2206      	movs	r2, #6
   d42fa:	214f      	movs	r1, #79	; 0x4f
   d42fc:	f7ff ff6c 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE7_R, REL_THRESH);
   d4300:	4620      	mov	r0, r4
   d4302:	220a      	movs	r2, #10
   d4304:	2150      	movs	r1, #80	; 0x50
   d4306:	f7ff ff67 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE8_T, TOU_THRESH);
   d430a:	4620      	mov	r0, r4
   d430c:	2206      	movs	r2, #6
   d430e:	2151      	movs	r1, #81	; 0x51
   d4310:	f7ff ff62 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE8_R, REL_THRESH);
   d4314:	4620      	mov	r0, r4
   d4316:	220a      	movs	r2, #10
   d4318:	2152      	movs	r1, #82	; 0x52
   d431a:	f7ff ff5d 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE9_T, TOU_THRESH);
   d431e:	4620      	mov	r0, r4
   d4320:	2206      	movs	r2, #6
   d4322:	2153      	movs	r1, #83	; 0x53
   d4324:	f7ff ff58 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE9_R, REL_THRESH);
   d4328:	4620      	mov	r0, r4
   d432a:	220a      	movs	r2, #10
   d432c:	2154      	movs	r1, #84	; 0x54
   d432e:	f7ff ff53 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE10_T, TOU_THRESH);
   d4332:	4620      	mov	r0, r4
   d4334:	2206      	movs	r2, #6
   d4336:	2155      	movs	r1, #85	; 0x55
   d4338:	f7ff ff4e 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE10_R, REL_THRESH);
   d433c:	4620      	mov	r0, r4
   d433e:	220a      	movs	r2, #10
   d4340:	2156      	movs	r1, #86	; 0x56
   d4342:	f7ff ff49 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE11_T, TOU_THRESH);
   d4346:	4620      	mov	r0, r4
   d4348:	2206      	movs	r2, #6
   d434a:	2157      	movs	r1, #87	; 0x57
   d434c:	f7ff ff44 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE11_R, REL_THRESH);
   d4350:	4620      	mov	r0, r4
   d4352:	220a      	movs	r2, #10
   d4354:	2158      	movs	r1, #88	; 0x58
   d4356:	f7ff ff3f 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, FIL_CFG, 0x04);
   d435a:	4620      	mov	r0, r4
   d435c:	2204      	movs	r2, #4
   d435e:	215d      	movs	r1, #93	; 0x5d
   d4360:	f7ff ff3a 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE_CFG, 0x0C); // Enables all 12 Electrodes
   d4364:	4620      	mov	r0, r4
   d4366:	220c      	movs	r2, #12
   d4368:	215e      	movs	r1, #94	; 0x5e
   d436a:	f7ff ff35 	bl	d41d8 <_Z12set_registerihh>
    set_register(address, ELE_CFG, 0x0C);
   d436e:	4620      	mov	r0, r4
   d4370:	220c      	movs	r2, #12
}
   d4372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    set_register(address, ELE_CFG, 0x0C);
   d4376:	215e      	movs	r1, #94	; 0x5e
   d4378:	f7ff bf2e 	b.w	d41d8 <_Z12set_registerihh>

000d437c <_Z17setupTouchDevicesv>:
{
   d437c:	b508      	push	{r3, lr}
    pinMode(irqpin, INPUT);
   d437e:	2100      	movs	r1, #0
   d4380:	2007      	movs	r0, #7
   d4382:	f001 fbcf 	bl	d5b24 <pinMode>
    digitalWrite(irqpin, HIGH);
   d4386:	2101      	movs	r1, #1
   d4388:	2007      	movs	r0, #7
   d438a:	f001 fbdc 	bl	d5b46 <digitalWrite>
    Wire.begin();
   d438e:	f001 fc1f 	bl	d5bd0 <_Z19__fetch_global_Wirev>
   d4392:	f000 fc45 	bl	d4c20 <_ZN7TwoWire5beginEv>
}
   d4396:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    mpr121_setup(0x5A);
   d439a:	205a      	movs	r0, #90	; 0x5a
   d439c:	f7ff bf37 	b.w	d420e <_Z12mpr121_setuph>

000d43a0 <setup>:
{
   d43a0:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d43a2:	f001 fa87 	bl	d58b4 <_Z16_fetch_usbserialv>
    Serial.println("-----------------------------------");
   d43a6:	4c18      	ldr	r4, [pc, #96]	; (d4408 <setup+0x68>)
    Serial.begin(9600);
   d43a8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d43ac:	f001 fa76 	bl	d589c <_ZN9USBSerial5beginEl>
    Serial.println();
   d43b0:	f001 fa80 	bl	d58b4 <_Z16_fetch_usbserialv>
   d43b4:	f000 fdb9 	bl	d4f2a <_ZN5Print7printlnEv>
    Serial.println("-----------------------------------");
   d43b8:	f001 fa7c 	bl	d58b4 <_Z16_fetch_usbserialv>
   d43bc:	4621      	mov	r1, r4
   d43be:	f000 fdc0 	bl	d4f42 <_ZN5Print7printlnEPKc>
    Serial.println("Mistaken Realities");
   d43c2:	f001 fa77 	bl	d58b4 <_Z16_fetch_usbserialv>
   d43c6:	4911      	ldr	r1, [pc, #68]	; (d440c <setup+0x6c>)
   d43c8:	f000 fdbb 	bl	d4f42 <_ZN5Print7printlnEPKc>
    Serial.println("-----------------------------------");
   d43cc:	f001 fa72 	bl	d58b4 <_Z16_fetch_usbserialv>
   d43d0:	4621      	mov	r1, r4
   d43d2:	f000 fdb6 	bl	d4f42 <_ZN5Print7printlnEPKc>
    pinMode(B_TN, INPUT_PULLUP); // NO RESISTOR
   d43d6:	2102      	movs	r1, #2
   d43d8:	4608      	mov	r0, r1
   d43da:	f001 fba3 	bl	d5b24 <pinMode>
    setupTouchDevices();
   d43de:	f7ff ffcd 	bl	d437c <_Z17setupTouchDevicesv>
    connectToLAN();
   d43e2:	f7ff fe85 	bl	d40f0 <_Z12connectToLANv>
    Udp.begin(8001);
   d43e6:	f641 7141 	movw	r1, #8001	; 0x1f41
   d43ea:	2200      	movs	r2, #0
   d43ec:	4808      	ldr	r0, [pc, #32]	; (d4410 <setup+0x70>)
   d43ee:	f000 ff0f 	bl	d5210 <_ZN3UDP5beginEtm>
    delay(5); // Force Serial.println in void setup()
   d43f2:	2005      	movs	r0, #5
   d43f4:	f000 fb6e 	bl	d4ad4 <delay>
    Serial.println("Completed void setup");
   d43f8:	f001 fa5c 	bl	d58b4 <_Z16_fetch_usbserialv>
}
   d43fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Completed void setup");
   d4400:	4904      	ldr	r1, [pc, #16]	; (d4414 <setup+0x74>)
   d4402:	f000 bd9e 	b.w	d4f42 <_ZN5Print7printlnEPKc>
   d4406:	bf00      	nop
   d4408:	000d60e6 	.word	0x000d60e6
   d440c:	000d610a 	.word	0x000d610a
   d4410:	2003e5c8 	.word	0x2003e5c8
   d4414:	000d611d 	.word	0x000d611d

000d4418 <_GLOBAL__sub_I_touchStates>:
}
   d4418:	b573      	push	{r0, r1, r4, r5, r6, lr}
UDP Udp;
   d441a:	4d12      	ldr	r5, [pc, #72]	; (d4464 <_GLOBAL__sub_I_touchStates+0x4c>)
   d441c:	4c12      	ldr	r4, [pc, #72]	; (d4468 <_GLOBAL__sub_I_touchStates+0x50>)
IPAddress argonIP;
   d441e:	4e13      	ldr	r6, [pc, #76]	; (d446c <_GLOBAL__sub_I_touchStates+0x54>)
UDP Udp;
   d4420:	4628      	mov	r0, r5
   d4422:	f001 f8e7 	bl	d55f4 <_ZN3UDPC1Ev>
   d4426:	4628      	mov	r0, r5
IPAddress argonIP;
   d4428:	4d11      	ldr	r5, [pc, #68]	; (d4470 <_GLOBAL__sub_I_touchStates+0x58>)
UDP Udp;
   d442a:	4912      	ldr	r1, [pc, #72]	; (d4474 <_GLOBAL__sub_I_touchStates+0x5c>)
   d442c:	4622      	mov	r2, r4
   d442e:	f001 fbf7 	bl	d5c20 <__aeabi_atexit>
IPAddress argonIP;
   d4432:	4628      	mov	r0, r5
   d4434:	f000 fc3a 	bl	d4cac <_ZN9IPAddressC1Ev>
   d4438:	4622      	mov	r2, r4
   d443a:	4631      	mov	r1, r6
   d443c:	4628      	mov	r0, r5
IPAddress remoteIP(192, 168, 1, 9);
   d443e:	4d0e      	ldr	r5, [pc, #56]	; (d4478 <_GLOBAL__sub_I_touchStates+0x60>)
IPAddress argonIP;
   d4440:	f001 fbee 	bl	d5c20 <__aeabi_atexit>
IPAddress remoteIP(192, 168, 1, 9);
   d4444:	2309      	movs	r3, #9
   d4446:	9300      	str	r3, [sp, #0]
   d4448:	22a8      	movs	r2, #168	; 0xa8
   d444a:	2301      	movs	r3, #1
   d444c:	21c0      	movs	r1, #192	; 0xc0
   d444e:	4628      	mov	r0, r5
   d4450:	f000 fc70 	bl	d4d34 <_ZN9IPAddressC1Ehhhh>
   d4454:	4622      	mov	r2, r4
   d4456:	4631      	mov	r1, r6
   d4458:	4628      	mov	r0, r5
}
   d445a:	b002      	add	sp, #8
   d445c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IPAddress remoteIP(192, 168, 1, 9);
   d4460:	f001 bbde 	b.w	d5c20 <__aeabi_atexit>
   d4464:	2003e5c8 	.word	0x2003e5c8
   d4468:	2003e5c4 	.word	0x2003e5c4
   d446c:	000d40ab 	.word	0x000d40ab
   d4470:	2003e614 	.word	0x2003e614
   d4474:	000d40ad 	.word	0x000d40ad
   d4478:	2003e62c 	.word	0x2003e62c

000d447c <_ZN10OSCMessage12setupMessageEv>:
    outputAddress = address;
}

void OSCMessage::setupMessage()
{
    incomingBuffer = NULL;
   d447c:	2300      	movs	r3, #0
    inputDatas = NULL;
    incomingBufferSize = 0;
    
    outputDatas = NULL;
    outputDatasSize = 0;
   d447e:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
    incomingBuffer = NULL;
   d4482:	6003      	str	r3, [r0, #0]
    inputDatas = NULL;
   d4484:	6283      	str	r3, [r0, #40]	; 0x28
    incomingBufferSize = 0;
   d4486:	6043      	str	r3, [r0, #4]
}
   d4488:	4770      	bx	lr
	...

000d448c <_ZN10OSCMessageC1EPKc>:
OSCMessage::OSCMessage(const char * address)
   d448c:	b570      	push	{r4, r5, r6, lr}
   d448e:	4604      	mov	r4, r0
   d4490:	460d      	mov	r5, r1
   d4492:	3008      	adds	r0, #8
   d4494:	490d      	ldr	r1, [pc, #52]	; (d44cc <_ZN10OSCMessageC1EPKc+0x40>)
   d4496:	f000 fdf0 	bl	d507a <_ZN6StringC1EPKc>
   d449a:	f104 062c 	add.w	r6, r4, #44	; 0x2c
   d449e:	490b      	ldr	r1, [pc, #44]	; (d44cc <_ZN10OSCMessageC1EPKc+0x40>)
   d44a0:	f104 0018 	add.w	r0, r4, #24
   d44a4:	f000 fde9 	bl	d507a <_ZN6StringC1EPKc>
   d44a8:	4908      	ldr	r1, [pc, #32]	; (d44cc <_ZN10OSCMessageC1EPKc+0x40>)
   d44aa:	4630      	mov	r0, r6
   d44ac:	f000 fde5 	bl	d507a <_ZN6StringC1EPKc>
   d44b0:	4906      	ldr	r1, [pc, #24]	; (d44cc <_ZN10OSCMessageC1EPKc+0x40>)
   d44b2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d44b6:	f000 fde0 	bl	d507a <_ZN6StringC1EPKc>
    setupMessage();
   d44ba:	4620      	mov	r0, r4
   d44bc:	f7ff ffde 	bl	d447c <_ZN10OSCMessage12setupMessageEv>
    outputAddress = address;
   d44c0:	4629      	mov	r1, r5
   d44c2:	4630      	mov	r0, r6
   d44c4:	f000 fded 	bl	d50a2 <_ZN6StringaSEPKc>
}
   d44c8:	4620      	mov	r0, r4
   d44ca:	bd70      	pop	{r4, r5, r6, pc}
   d44cc:	000d60d1 	.word	0x000d60d1

000d44d0 <_ZN10OSCMessageD1Ev>:

//DESTRUCTOR
OSCMessage::~OSCMessage()
   d44d0:	b510      	push	{r4, lr}
   d44d2:	4604      	mov	r4, r0
{
    free(incomingBuffer);
   d44d4:	6800      	ldr	r0, [r0, #0]
   d44d6:	f000 fae5 	bl	d4aa4 <free>
    free(inputDatas);
   d44da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d44dc:	f000 fae2 	bl	d4aa4 <free>
    free(outputDatas);
   d44e0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d44e2:	f000 fadf 	bl	d4aa4 <free>
OSCMessage::~OSCMessage()
   d44e6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d44ea:	f000 fd7b 	bl	d4fe4 <_ZN6StringD1Ev>
   d44ee:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d44f2:	f000 fd77 	bl	d4fe4 <_ZN6StringD1Ev>
   d44f6:	f104 0018 	add.w	r0, r4, #24
   d44fa:	f000 fd73 	bl	d4fe4 <_ZN6StringD1Ev>
   d44fe:	f104 0008 	add.w	r0, r4, #8
   d4502:	f000 fd6f 	bl	d4fe4 <_ZN6StringD1Ev>
}
   d4506:	4620      	mov	r0, r4
   d4508:	bd10      	pop	{r4, pc}

000d450a <_ZN10OSCMessage8addFloatEf>:
        outputTypes.concat('i');
    }
}

void OSCMessage::addFloat(float value)
{
   d450a:	b538      	push	{r3, r4, r5, lr}
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d450c:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
   d450e:	4604      	mov	r4, r0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d4510:	3104      	adds	r1, #4
   d4512:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   d4514:	ee10 5a10 	vmov	r5, s0
    outputDatas = (char *) realloc ( outputDatas, outputDatasSize + 4 );
   d4518:	f000 facc 	bl	d4ab4 <realloc>
   d451c:	64e0      	str	r0, [r4, #76]	; 0x4c
    if (outputDatas != NULL)
   d451e:	b1e8      	cbz	r0, d455c <_ZN10OSCMessage8addFloatEf+0x52>
        union {
            float f;
            char b[4];
        } u;
        u.f = value;
        outputDatas[outputDatasSize] = u.b[3];
   d4520:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4522:	f3c5 6107 	ubfx	r1, r5, #24, #8
   d4526:	5481      	strb	r1, [r0, r2]
        outputDatas[outputDatasSize+1] = u.b[2];
   d4528:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d452c:	440a      	add	r2, r1
   d452e:	f3c5 4107 	ubfx	r1, r5, #16, #8
   d4532:	7051      	strb	r1, [r2, #1]
        outputDatas[outputDatasSize+2] = u.b[1];
   d4534:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4538:	440a      	add	r2, r1
   d453a:	f3c5 2107 	ubfx	r1, r5, #8, #8
   d453e:	7091      	strb	r1, [r2, #2]
        outputDatas[outputDatasSize+3] = u.b[0];
   d4540:	e9d4 2113 	ldrd	r2, r1, [r4, #76]	; 0x4c
   d4544:	440a      	add	r2, r1
        outputDatasSize += 4;
        outputTypes.concat('f');
   d4546:	f104 003c 	add.w	r0, r4, #60	; 0x3c
        outputDatas[outputDatasSize+3] = u.b[0];
   d454a:	70d5      	strb	r5, [r2, #3]
        outputDatasSize += 4;
   d454c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d454e:	3304      	adds	r3, #4
   d4550:	6523      	str	r3, [r4, #80]	; 0x50
        outputTypes.concat('f');
   d4552:	2166      	movs	r1, #102	; 0x66
    }
}
   d4554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        outputTypes.concat('f');
   d4558:	f000 bdcc 	b.w	d50f4 <_ZN6String6concatEc>
}
   d455c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4560 <_ZN10OSCMessage4sendER3UDP9IPAddressj>:
    Serial.println("\n----");
}


void OSCMessage::send(UDP &udp, IPAddress remoteIP, unsigned int outPort)
{
   d4560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4564:	b08b      	sub	sp, #44	; 0x2c
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	String & operator = (String &&rval);
	String & operator = (StringSumHelper &&rval);
	#endif

        operator const char*() const { return c_str(); }
   d4566:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
   d456a:	af00      	add	r7, sp, #0
   d456c:	4680      	mov	r8, r0
    //Serial.print ("remote : "); Serial.print(remoteIP); Serial.print(":"); Serial.println(outPort);
    //prinOutputDatas();
    
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d456e:	4648      	mov	r0, r9
{
   d4570:	460d      	mov	r5, r1
   d4572:	e9c7 3202 	strd	r3, r2, [r7, #8]
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4576:	f001 fd91 	bl	d609c <strlen>
   d457a:	4606      	mov	r6, r0
   d457c:	3003      	adds	r0, #3
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d457e:	0880      	lsrs	r0, r0, #2
   d4580:	f001 fc9a 	bl	d5eb8 <__aeabi_ui2d>
   d4584:	4b3f      	ldr	r3, [pc, #252]	; (d4684 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d4586:	2200      	movs	r2, #0
   d4588:	f001 fb5a 	bl	d5c40 <__adddf3>
   d458c:	f001 fd0e 	bl	d5fac <__aeabi_d2iz>
   d4590:	f8d8 a03c 	ldr.w	sl, [r8, #60]	; 0x3c
    int addresszeroCount = addressBitCount-strlen(outputAddress);
   d4594:	ebc6 0680 	rsb	r6, r6, r0, lsl #2
    int addressBitCount = 4*round((strlen(outputAddress)+3)/4);
   d4598:	0084      	lsls	r4, r0, #2
    int outputBufferSize = addressBitCount+1;//address+padding+comma
    //Serial.print ("types : "); Serial.println(outputTypes);
    outputBufferSize += strlen(outputTypes);
   d459a:	4650      	mov	r0, sl
   d459c:	f001 fd7e 	bl	d609c <strlen>
    int outputBufferSize = addressBitCount+1;//address+padding+comma
   d45a0:	3401      	adds	r4, #1
    outputBufferSize += strlen(outputTypes);
   d45a2:	4683      	mov	fp, r0
   d45a4:	4404      	add	r4, r0
    int outputTypesBitsCount = 4*round((strlen(outputTypes)+1)/4)+3;
   d45a6:	3001      	adds	r0, #1
   d45a8:	0880      	lsrs	r0, r0, #2
   d45aa:	f001 fc85 	bl	d5eb8 <__aeabi_ui2d>
   d45ae:	4b35      	ldr	r3, [pc, #212]	; (d4684 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x124>)
   d45b0:	2200      	movs	r2, #0
   d45b2:	f001 fb45 	bl	d5c40 <__adddf3>
   d45b6:	f001 fcf9 	bl	d5fac <__aeabi_d2iz>
    int outputTypesZerosCount = outputTypesBitsCount-strlen(outputTypes);
   d45ba:	f1cb 0303 	rsb	r3, fp, #3
   d45be:	eb03 0b80 	add.w	fp, r3, r0, lsl #2
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
    outputBufferSize += outputDatasSize;
   d45c2:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
   d45c6:	603b      	str	r3, [r7, #0]
    outputBufferSize += outputTypesZerosCount; //outputTypePadding
   d45c8:	445c      	add	r4, fp
    outputBufferSize += outputDatasSize;
   d45ca:	441c      	add	r4, r3
    //Serial.print ("bufferSize : ");  Serial.println(outputBufferSize);
    uint8_t nullChar = '\0';
    
    char outputBuffer[outputBufferSize];
   d45cc:	1de2      	adds	r2, r4, #7
   d45ce:	f022 0207 	bic.w	r2, r2, #7
   d45d2:	ebad 0d02 	sub.w	sp, sp, r2
    memset(outputBuffer,nullChar,outputBufferSize);
   d45d6:	2100      	movs	r1, #0
   d45d8:	4622      	mov	r2, r4
   d45da:	4668      	mov	r0, sp
   d45dc:	f001 fd2a 	bl	d6034 <memset>
    memcpy(&outputBuffer[0],outputAddress,strlen(outputAddress));
   d45e0:	4648      	mov	r0, r9
   d45e2:	f001 fd5b 	bl	d609c <strlen>
   d45e6:	4649      	mov	r1, r9
   d45e8:	4602      	mov	r2, r0
   d45ea:	4668      	mov	r0, sp
   d45ec:	f001 fd14 	bl	d6018 <memcpy>
    outputBuffer[strlen(outputAddress)+addresszeroCount] = ',';
   d45f0:	4648      	mov	r0, r9
   d45f2:	f001 fd53 	bl	d609c <strlen>
   d45f6:	eb0d 0206 	add.w	r2, sp, r6
   d45fa:	212c      	movs	r1, #44	; 0x2c
   d45fc:	5411      	strb	r1, [r2, r0]
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1],outputTypes,strlen(outputTypes));
   d45fe:	4648      	mov	r0, r9
   d4600:	f001 fd4c 	bl	d609c <strlen>
   d4604:	6078      	str	r0, [r7, #4]
   d4606:	4650      	mov	r0, sl
   d4608:	f001 fd48 	bl	d609c <strlen>
   d460c:	6879      	ldr	r1, [r7, #4]
   d460e:	3101      	adds	r1, #1
   d4610:	4602      	mov	r2, r0
   d4612:	1988      	adds	r0, r1, r6
   d4614:	4468      	add	r0, sp
   d4616:	4651      	mov	r1, sl
   d4618:	f001 fcfe 	bl	d6018 <memcpy>
    memcpy(&outputBuffer[strlen(outputAddress)+addresszeroCount+1+strlen(outputTypes)+outputTypesZerosCount],outputDatas,outputDatasSize);
   d461c:	4648      	mov	r0, r9
   d461e:	f001 fd3d 	bl	d609c <strlen>
   d4622:	4681      	mov	r9, r0
   d4624:	4650      	mov	r0, sl
   d4626:	f001 fd39 	bl	d609c <strlen>
   d462a:	4448      	add	r0, r9
   d462c:	3001      	adds	r0, #1
   d462e:	683b      	ldr	r3, [r7, #0]
   d4630:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
   d4634:	4430      	add	r0, r6
   d4636:	4458      	add	r0, fp
   d4638:	461a      	mov	r2, r3
   d463a:	4468      	add	r0, sp
   d463c:	f001 fcec 	bl	d6018 <memcpy>
    
    udp.beginPacket(remoteIP,outPort);
   d4640:	682b      	ldr	r3, [r5, #0]
   d4642:	68fe      	ldr	r6, [r7, #12]
   d4644:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d4648:	4b0f      	ldr	r3, [pc, #60]	; (d4688 <_ZN10OSCMessage4sendER3UDP9IPAddressj+0x128>)
   d464a:	613b      	str	r3, [r7, #16]
   d464c:	3604      	adds	r6, #4
   d464e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4650:	f107 0c14 	add.w	ip, r7, #20
   d4654:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d4658:	6833      	ldr	r3, [r6, #0]
   d465a:	f88c 3000 	strb.w	r3, [ip]
   d465e:	893a      	ldrh	r2, [r7, #8]
   d4660:	f107 0110 	add.w	r1, r7, #16
   d4664:	4628      	mov	r0, r5
   d4666:	47c0      	blx	r8
    udp.write((uint8_t *)&outputBuffer,outputBufferSize);
   d4668:	682b      	ldr	r3, [r5, #0]
   d466a:	4622      	mov	r2, r4
   d466c:	4669      	mov	r1, sp
   d466e:	68db      	ldr	r3, [r3, #12]
   d4670:	4628      	mov	r0, r5
   d4672:	4798      	blx	r3
    udp.endPacket();
   d4674:	682b      	ldr	r3, [r5, #0]
   d4676:	4628      	mov	r0, r5
   d4678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d467a:	4798      	blx	r3
}
   d467c:	372c      	adds	r7, #44	; 0x2c
   d467e:	46bd      	mov	sp, r7
   d4680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4684:	3fe00000 	.word	0x3fe00000
   d4688:	000d6198 	.word	0x000d6198

000d468c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d468c:	b508      	push	{r3, lr}
   d468e:	4b02      	ldr	r3, [pc, #8]	; (d4698 <os_mutex_recursive_create+0xc>)
   d4690:	681b      	ldr	r3, [r3, #0]
   d4692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4694:	9301      	str	r3, [sp, #4]
   d4696:	bd08      	pop	{r3, pc}
   d4698:	00030248 	.word	0x00030248

000d469c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d469c:	b508      	push	{r3, lr}
   d469e:	4b02      	ldr	r3, [pc, #8]	; (d46a8 <os_mutex_recursive_destroy+0xc>)
   d46a0:	681b      	ldr	r3, [r3, #0]
   d46a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d46a4:	9301      	str	r3, [sp, #4]
   d46a6:	bd08      	pop	{r3, pc}
   d46a8:	00030248 	.word	0x00030248

000d46ac <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46ac:	b508      	push	{r3, lr}
   d46ae:	4b02      	ldr	r3, [pc, #8]	; (d46b8 <HAL_RNG_GetRandomNumber+0xc>)
   d46b0:	681b      	ldr	r3, [r3, #0]
   d46b2:	685b      	ldr	r3, [r3, #4]
   d46b4:	9301      	str	r3, [sp, #4]
   d46b6:	bd08      	pop	{r3, pc}
   d46b8:	00030218 	.word	0x00030218

000d46bc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46bc:	b508      	push	{r3, lr}
   d46be:	4b02      	ldr	r3, [pc, #8]	; (d46c8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46c0:	681b      	ldr	r3, [r3, #0]
   d46c2:	695b      	ldr	r3, [r3, #20]
   d46c4:	9301      	str	r3, [sp, #4]
   d46c6:	bd08      	pop	{r3, pc}
   d46c8:	00030218 	.word	0x00030218

000d46cc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46cc:	b508      	push	{r3, lr}
   d46ce:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <HAL_Pin_Mode+0xc>)
   d46d0:	681b      	ldr	r3, [r3, #0]
   d46d2:	689b      	ldr	r3, [r3, #8]
   d46d4:	9301      	str	r3, [sp, #4]
   d46d6:	bd08      	pop	{r3, pc}
   d46d8:	0003022c 	.word	0x0003022c

000d46dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d46dc:	b508      	push	{r3, lr}
   d46de:	4b02      	ldr	r3, [pc, #8]	; (d46e8 <HAL_Get_Pin_Mode+0xc>)
   d46e0:	681b      	ldr	r3, [r3, #0]
   d46e2:	68db      	ldr	r3, [r3, #12]
   d46e4:	9301      	str	r3, [sp, #4]
   d46e6:	bd08      	pop	{r3, pc}
   d46e8:	0003022c 	.word	0x0003022c

000d46ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46ec:	b508      	push	{r3, lr}
   d46ee:	4b02      	ldr	r3, [pc, #8]	; (d46f8 <HAL_GPIO_Write+0xc>)
   d46f0:	681b      	ldr	r3, [r3, #0]
   d46f2:	691b      	ldr	r3, [r3, #16]
   d46f4:	9301      	str	r3, [sp, #4]
   d46f6:	bd08      	pop	{r3, pc}
   d46f8:	0003022c 	.word	0x0003022c

000d46fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d46fc:	b508      	push	{r3, lr}
   d46fe:	4b02      	ldr	r3, [pc, #8]	; (d4708 <HAL_GPIO_Read+0xc>)
   d4700:	681b      	ldr	r3, [r3, #0]
   d4702:	695b      	ldr	r3, [r3, #20]
   d4704:	9301      	str	r3, [sp, #4]
   d4706:	bd08      	pop	{r3, pc}
   d4708:	0003022c 	.word	0x0003022c

000d470c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d470c:	b508      	push	{r3, lr}
   d470e:	4b02      	ldr	r3, [pc, #8]	; (d4718 <hal_i2c_begin+0xc>)
   d4710:	681b      	ldr	r3, [r3, #0]
   d4712:	68db      	ldr	r3, [r3, #12]
   d4714:	9301      	str	r3, [sp, #4]
   d4716:	bd08      	pop	{r3, pc}
   d4718:	00030228 	.word	0x00030228

000d471c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d471c:	b508      	push	{r3, lr}
   d471e:	4b02      	ldr	r3, [pc, #8]	; (d4728 <hal_i2c_begin_transmission+0xc>)
   d4720:	681b      	ldr	r3, [r3, #0]
   d4722:	699b      	ldr	r3, [r3, #24]
   d4724:	9301      	str	r3, [sp, #4]
   d4726:	bd08      	pop	{r3, pc}
   d4728:	00030228 	.word	0x00030228

000d472c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d472c:	b508      	push	{r3, lr}
   d472e:	4b02      	ldr	r3, [pc, #8]	; (d4738 <hal_i2c_end_transmission+0xc>)
   d4730:	681b      	ldr	r3, [r3, #0]
   d4732:	69db      	ldr	r3, [r3, #28]
   d4734:	9301      	str	r3, [sp, #4]
   d4736:	bd08      	pop	{r3, pc}
   d4738:	00030228 	.word	0x00030228

000d473c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b02      	ldr	r3, [pc, #8]	; (d4748 <hal_i2c_write+0xc>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	6a1b      	ldr	r3, [r3, #32]
   d4744:	9301      	str	r3, [sp, #4]
   d4746:	bd08      	pop	{r3, pc}
   d4748:	00030228 	.word	0x00030228

000d474c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d474c:	b508      	push	{r3, lr}
   d474e:	4b02      	ldr	r3, [pc, #8]	; (d4758 <hal_i2c_available+0xc>)
   d4750:	681b      	ldr	r3, [r3, #0]
   d4752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4754:	9301      	str	r3, [sp, #4]
   d4756:	bd08      	pop	{r3, pc}
   d4758:	00030228 	.word	0x00030228

000d475c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d475c:	b508      	push	{r3, lr}
   d475e:	4b02      	ldr	r3, [pc, #8]	; (d4768 <hal_i2c_read+0xc>)
   d4760:	681b      	ldr	r3, [r3, #0]
   d4762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4764:	9301      	str	r3, [sp, #4]
   d4766:	bd08      	pop	{r3, pc}
   d4768:	00030228 	.word	0x00030228

000d476c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d476c:	b508      	push	{r3, lr}
   d476e:	4b02      	ldr	r3, [pc, #8]	; (d4778 <hal_i2c_peek+0xc>)
   d4770:	681b      	ldr	r3, [r3, #0]
   d4772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4774:	9301      	str	r3, [sp, #4]
   d4776:	bd08      	pop	{r3, pc}
   d4778:	00030228 	.word	0x00030228

000d477c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d477c:	b508      	push	{r3, lr}
   d477e:	4b02      	ldr	r3, [pc, #8]	; (d4788 <hal_i2c_flush+0xc>)
   d4780:	681b      	ldr	r3, [r3, #0]
   d4782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4784:	9301      	str	r3, [sp, #4]
   d4786:	bd08      	pop	{r3, pc}
   d4788:	00030228 	.word	0x00030228

000d478c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b02      	ldr	r3, [pc, #8]	; (d4798 <hal_i2c_is_enabled+0xc>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4794:	9301      	str	r3, [sp, #4]
   d4796:	bd08      	pop	{r3, pc}
   d4798:	00030228 	.word	0x00030228

000d479c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d479c:	b508      	push	{r3, lr}
   d479e:	4b02      	ldr	r3, [pc, #8]	; (d47a8 <hal_i2c_init+0xc>)
   d47a0:	681b      	ldr	r3, [r3, #0]
   d47a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d47a4:	9301      	str	r3, [sp, #4]
   d47a6:	bd08      	pop	{r3, pc}
   d47a8:	00030228 	.word	0x00030228

000d47ac <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <if_index_to_name+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	695b      	ldr	r3, [r3, #20]
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	0003026c 	.word	0x0003026c

000d47bc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <inet_inet_ntop+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	695b      	ldr	r3, [r3, #20]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030264 	.word	0x00030264

000d47cc <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <inet_htonl+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	6a1b      	ldr	r3, [r3, #32]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030264 	.word	0x00030264

000d47dc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <inet_ntohs+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030264 	.word	0x00030264

000d47ec <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <inet_htons+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030264 	.word	0x00030264

000d47fc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <netdb_freeaddrinfo+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	689b      	ldr	r3, [r3, #8]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030268 	.word	0x00030268

000d480c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <netdb_getaddrinfo+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	68db      	ldr	r3, [r3, #12]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030268 	.word	0x00030268

000d481c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <sock_bind+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	685b      	ldr	r3, [r3, #4]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030238 	.word	0x00030238

000d482c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <sock_setsockopt+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	699b      	ldr	r3, [r3, #24]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030238 	.word	0x00030238

000d483c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <sock_close+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	69db      	ldr	r3, [r3, #28]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030238 	.word	0x00030238

000d484c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <sock_recvfrom+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030238 	.word	0x00030238

000d485c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <sock_sendto+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030238 	.word	0x00030238

000d486c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <sock_socket+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	00030238 	.word	0x00030238

000d487c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <hal_spi_init+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	69db      	ldr	r3, [r3, #28]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	00030230 	.word	0x00030230

000d488c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <hal_spi_is_enabled+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6a1b      	ldr	r3, [r3, #32]
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	00030230 	.word	0x00030230

000d489c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d489c:	b508      	push	{r3, lr}
   d489e:	4b02      	ldr	r3, [pc, #8]	; (d48a8 <hal_usart_init+0xc>)
   d48a0:	681b      	ldr	r3, [r3, #0]
   d48a2:	681b      	ldr	r3, [r3, #0]
   d48a4:	9301      	str	r3, [sp, #4]
   d48a6:	bd08      	pop	{r3, pc}
   d48a8:	0003023c 	.word	0x0003023c

000d48ac <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d48ac:	b508      	push	{r3, lr}
   d48ae:	4b02      	ldr	r3, [pc, #8]	; (d48b8 <hal_usart_write+0xc>)
   d48b0:	681b      	ldr	r3, [r3, #0]
   d48b2:	68db      	ldr	r3, [r3, #12]
   d48b4:	9301      	str	r3, [sp, #4]
   d48b6:	bd08      	pop	{r3, pc}
   d48b8:	0003023c 	.word	0x0003023c

000d48bc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d48bc:	b508      	push	{r3, lr}
   d48be:	4b02      	ldr	r3, [pc, #8]	; (d48c8 <hal_usart_available+0xc>)
   d48c0:	681b      	ldr	r3, [r3, #0]
   d48c2:	691b      	ldr	r3, [r3, #16]
   d48c4:	9301      	str	r3, [sp, #4]
   d48c6:	bd08      	pop	{r3, pc}
   d48c8:	0003023c 	.word	0x0003023c

000d48cc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d48cc:	b508      	push	{r3, lr}
   d48ce:	4b02      	ldr	r3, [pc, #8]	; (d48d8 <hal_usart_read+0xc>)
   d48d0:	681b      	ldr	r3, [r3, #0]
   d48d2:	695b      	ldr	r3, [r3, #20]
   d48d4:	9301      	str	r3, [sp, #4]
   d48d6:	bd08      	pop	{r3, pc}
   d48d8:	0003023c 	.word	0x0003023c

000d48dc <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d48dc:	b508      	push	{r3, lr}
   d48de:	4b02      	ldr	r3, [pc, #8]	; (d48e8 <hal_usart_peek+0xc>)
   d48e0:	681b      	ldr	r3, [r3, #0]
   d48e2:	699b      	ldr	r3, [r3, #24]
   d48e4:	9301      	str	r3, [sp, #4]
   d48e6:	bd08      	pop	{r3, pc}
   d48e8:	0003023c 	.word	0x0003023c

000d48ec <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d48ec:	b508      	push	{r3, lr}
   d48ee:	4b02      	ldr	r3, [pc, #8]	; (d48f8 <hal_usart_flush+0xc>)
   d48f0:	681b      	ldr	r3, [r3, #0]
   d48f2:	69db      	ldr	r3, [r3, #28]
   d48f4:	9301      	str	r3, [sp, #4]
   d48f6:	bd08      	pop	{r3, pc}
   d48f8:	0003023c 	.word	0x0003023c

000d48fc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d48fc:	b508      	push	{r3, lr}
   d48fe:	4b02      	ldr	r3, [pc, #8]	; (d4908 <hal_usart_is_enabled+0xc>)
   d4900:	681b      	ldr	r3, [r3, #0]
   d4902:	6a1b      	ldr	r3, [r3, #32]
   d4904:	9301      	str	r3, [sp, #4]
   d4906:	bd08      	pop	{r3, pc}
   d4908:	0003023c 	.word	0x0003023c

000d490c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d490c:	b508      	push	{r3, lr}
   d490e:	4b02      	ldr	r3, [pc, #8]	; (d4918 <hal_usart_available_data_for_write+0xc>)
   d4910:	681b      	ldr	r3, [r3, #0]
   d4912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4914:	9301      	str	r3, [sp, #4]
   d4916:	bd08      	pop	{r3, pc}
   d4918:	0003023c 	.word	0x0003023c

000d491c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d491c:	b508      	push	{r3, lr}
   d491e:	4b02      	ldr	r3, [pc, #8]	; (d4928 <HAL_USB_USART_Init+0xc>)
   d4920:	681b      	ldr	r3, [r3, #0]
   d4922:	681b      	ldr	r3, [r3, #0]
   d4924:	9301      	str	r3, [sp, #4]
   d4926:	bd08      	pop	{r3, pc}
   d4928:	0003024c 	.word	0x0003024c

000d492c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d492c:	b508      	push	{r3, lr}
   d492e:	4b02      	ldr	r3, [pc, #8]	; (d4938 <HAL_USB_USART_Begin+0xc>)
   d4930:	681b      	ldr	r3, [r3, #0]
   d4932:	685b      	ldr	r3, [r3, #4]
   d4934:	9301      	str	r3, [sp, #4]
   d4936:	bd08      	pop	{r3, pc}
   d4938:	0003024c 	.word	0x0003024c

000d493c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d493c:	b508      	push	{r3, lr}
   d493e:	4b02      	ldr	r3, [pc, #8]	; (d4948 <HAL_USB_USART_Available_Data+0xc>)
   d4940:	681b      	ldr	r3, [r3, #0]
   d4942:	691b      	ldr	r3, [r3, #16]
   d4944:	9301      	str	r3, [sp, #4]
   d4946:	bd08      	pop	{r3, pc}
   d4948:	0003024c 	.word	0x0003024c

000d494c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b02      	ldr	r3, [pc, #8]	; (d4958 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	695b      	ldr	r3, [r3, #20]
   d4954:	9301      	str	r3, [sp, #4]
   d4956:	bd08      	pop	{r3, pc}
   d4958:	0003024c 	.word	0x0003024c

000d495c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d495c:	b508      	push	{r3, lr}
   d495e:	4b02      	ldr	r3, [pc, #8]	; (d4968 <HAL_USB_USART_Receive_Data+0xc>)
   d4960:	681b      	ldr	r3, [r3, #0]
   d4962:	699b      	ldr	r3, [r3, #24]
   d4964:	9301      	str	r3, [sp, #4]
   d4966:	bd08      	pop	{r3, pc}
   d4968:	0003024c 	.word	0x0003024c

000d496c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d496c:	b508      	push	{r3, lr}
   d496e:	4b02      	ldr	r3, [pc, #8]	; (d4978 <HAL_USB_USART_Send_Data+0xc>)
   d4970:	681b      	ldr	r3, [r3, #0]
   d4972:	69db      	ldr	r3, [r3, #28]
   d4974:	9301      	str	r3, [sp, #4]
   d4976:	bd08      	pop	{r3, pc}
   d4978:	0003024c 	.word	0x0003024c

000d497c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d497c:	b508      	push	{r3, lr}
   d497e:	4b02      	ldr	r3, [pc, #8]	; (d4988 <HAL_USB_USART_Flush_Data+0xc>)
   d4980:	681b      	ldr	r3, [r3, #0]
   d4982:	6a1b      	ldr	r3, [r3, #32]
   d4984:	9301      	str	r3, [sp, #4]
   d4986:	bd08      	pop	{r3, pc}
   d4988:	0003024c 	.word	0x0003024c

000d498c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b02      	ldr	r3, [pc, #8]	; (d4998 <set_system_mode+0xc>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	685b      	ldr	r3, [r3, #4]
   d4994:	9301      	str	r3, [sp, #4]
   d4996:	bd08      	pop	{r3, pc}
   d4998:	00030220 	.word	0x00030220

000d499c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b02      	ldr	r3, [pc, #8]	; (d49a8 <system_delay_ms+0xc>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	695b      	ldr	r3, [r3, #20]
   d49a4:	9301      	str	r3, [sp, #4]
   d49a6:	bd08      	pop	{r3, pc}
   d49a8:	00030220 	.word	0x00030220

000d49ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49ac:	b508      	push	{r3, lr}
   d49ae:	4b03      	ldr	r3, [pc, #12]	; (d49bc <system_ctrl_set_app_request_handler+0x10>)
   d49b0:	681b      	ldr	r3, [r3, #0]
   d49b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49b6:	9301      	str	r3, [sp, #4]
   d49b8:	bd08      	pop	{r3, pc}
   d49ba:	0000      	.short	0x0000
   d49bc:	00030220 	.word	0x00030220

000d49c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b03      	ldr	r3, [pc, #12]	; (d49d0 <system_ctrl_set_result+0x10>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49ca:	9301      	str	r3, [sp, #4]
   d49cc:	bd08      	pop	{r3, pc}
   d49ce:	0000      	.short	0x0000
   d49d0:	00030220 	.word	0x00030220

000d49d4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030244 	.word	0x00030244

000d49e4 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <network_config+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	681b      	ldr	r3, [r3, #0]
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030240 	.word	0x00030240

000d49f4 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <network_connect+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	685b      	ldr	r3, [r3, #4]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030240 	.word	0x00030240

000d4a04 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <network_connecting+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	689b      	ldr	r3, [r3, #8]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030240 	.word	0x00030240

000d4a14 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <network_disconnect+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	68db      	ldr	r3, [r3, #12]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030240 	.word	0x00030240

000d4a24 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <network_ready+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	691b      	ldr	r3, [r3, #16]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030240 	.word	0x00030240

000d4a34 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <network_on+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	695b      	ldr	r3, [r3, #20]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030240 	.word	0x00030240

000d4a44 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <network_off+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	699b      	ldr	r3, [r3, #24]
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030240 	.word	0x00030240

000d4a54 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <network_listen+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	69db      	ldr	r3, [r3, #28]
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030240 	.word	0x00030240

000d4a64 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <network_listening+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	6a1b      	ldr	r3, [r3, #32]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030240 	.word	0x00030240

000d4a74 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <network_set_listen_timeout+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	00030240 	.word	0x00030240

000d4a84 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <network_get_listen_timeout+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	00030240 	.word	0x00030240

000d4a94 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <malloc+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	681b      	ldr	r3, [r3, #0]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003021c 	.word	0x0003021c

000d4aa4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <free+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	685b      	ldr	r3, [r3, #4]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003021c 	.word	0x0003021c

000d4ab4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <realloc+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	689b      	ldr	r3, [r3, #8]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003021c 	.word	0x0003021c

000d4ac4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <newlib_impure_ptr_callback+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003021c 	.word	0x0003021c

000d4ad4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4ad4:	2100      	movs	r1, #0
   d4ad6:	f7ff bf61 	b.w	d499c <system_delay_ms>

000d4ada <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4ada:	b510      	push	{r4, lr}
   d4adc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4ade:	6800      	ldr	r0, [r0, #0]
   d4ae0:	b108      	cbz	r0, d4ae6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4ae2:	f7ff fddb 	bl	d469c <os_mutex_recursive_destroy>
    }
   d4ae6:	4620      	mov	r0, r4
   d4ae8:	bd10      	pop	{r4, pc}
	...

000d4aec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4aec:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4aee:	4c06      	ldr	r4, [pc, #24]	; (d4b08 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4af0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4af2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4af4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4af6:	f7ff fdc9 	bl	d468c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4afa:	4620      	mov	r0, r4
   d4afc:	4a03      	ldr	r2, [pc, #12]	; (d4b0c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4afe:	4904      	ldr	r1, [pc, #16]	; (d4b10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4b04:	f001 b88c 	b.w	d5c20 <__aeabi_atexit>
   d4b08:	2003e644 	.word	0x2003e644
   d4b0c:	2003e5c4 	.word	0x2003e5c4
   d4b10:	000d4adb 	.word	0x000d4adb

000d4b14 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4b14:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4b16:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4b18:	4604      	mov	r4, r0
      if (_M_manager)
   d4b1a:	b113      	cbz	r3, d4b22 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4b1c:	2203      	movs	r2, #3
   d4b1e:	4601      	mov	r1, r0
   d4b20:	4798      	blx	r3
    }
   d4b22:	4620      	mov	r0, r4
   d4b24:	bd10      	pop	{r4, pc}

000d4b26 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b26:	2200      	movs	r2, #0
   d4b28:	6840      	ldr	r0, [r0, #4]
   d4b2a:	4611      	mov	r1, r2
   d4b2c:	f7ff bf9a 	b.w	d4a64 <network_listening>

000d4b30 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4b30:	2200      	movs	r2, #0
   d4b32:	6840      	ldr	r0, [r0, #4]
   d4b34:	4611      	mov	r1, r2
   d4b36:	f7ff bfa5 	b.w	d4a84 <network_get_listen_timeout>

000d4b3a <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4b3a:	6840      	ldr	r0, [r0, #4]
   d4b3c:	2200      	movs	r2, #0
   d4b3e:	f7ff bf99 	b.w	d4a74 <network_set_listen_timeout>

000d4b42 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	2200      	movs	r2, #0
   d4b46:	f081 0101 	eor.w	r1, r1, #1
   d4b4a:	f7ff bf83 	b.w	d4a54 <network_listen>

000d4b4e <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4b4e:	2300      	movs	r3, #0
   d4b50:	6840      	ldr	r0, [r0, #4]
   d4b52:	461a      	mov	r2, r3
   d4b54:	4619      	mov	r1, r3
   d4b56:	f7ff bf75 	b.w	d4a44 <network_off>

000d4b5a <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4b5a:	2300      	movs	r3, #0
   d4b5c:	6840      	ldr	r0, [r0, #4]
   d4b5e:	461a      	mov	r2, r3
   d4b60:	4619      	mov	r1, r3
   d4b62:	f7ff bf67 	b.w	d4a34 <network_on>

000d4b66 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b66:	2200      	movs	r2, #0
   d4b68:	6840      	ldr	r0, [r0, #4]
   d4b6a:	4611      	mov	r1, r2
   d4b6c:	f7ff bf5a 	b.w	d4a24 <network_ready>

000d4b70 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4b70:	2200      	movs	r2, #0
   d4b72:	6840      	ldr	r0, [r0, #4]
   d4b74:	4611      	mov	r1, r2
   d4b76:	f7ff bf45 	b.w	d4a04 <network_connecting>

000d4b7a <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b7a:	6840      	ldr	r0, [r0, #4]
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	2102      	movs	r1, #2
   d4b80:	f7ff bf48 	b.w	d4a14 <network_disconnect>

000d4b84 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b84:	2300      	movs	r3, #0
   d4b86:	6840      	ldr	r0, [r0, #4]
   d4b88:	461a      	mov	r2, r3
   d4b8a:	f7ff bf33 	b.w	d49f4 <network_connect>
	...

000d4b90 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b90:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b92:	2203      	movs	r2, #3
   d4b94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b96:	4a02      	ldr	r2, [pc, #8]	; (d4ba0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b98:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b9a:	4770      	bx	lr
   d4b9c:	2003e648 	.word	0x2003e648
   d4ba0:	000d613c 	.word	0x000d613c

000d4ba4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4ba4:	4770      	bx	lr

000d4ba6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ba8:	4606      	mov	r6, r0
   d4baa:	4615      	mov	r5, r2
   d4bac:	460c      	mov	r4, r1
   d4bae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4bb0:	42bc      	cmp	r4, r7
   d4bb2:	d006      	beq.n	d4bc2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4bb4:	6833      	ldr	r3, [r6, #0]
   d4bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4bba:	689b      	ldr	r3, [r3, #8]
   d4bbc:	4630      	mov	r0, r6
   d4bbe:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4bc0:	e7f6      	b.n	d4bb0 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4bc2:	4628      	mov	r0, r5
   d4bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4bc6 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4bc6:	7c00      	ldrb	r0, [r0, #16]
   d4bc8:	2200      	movs	r2, #0
   d4bca:	f7ff bdb7 	b.w	d473c <hal_i2c_write>

000d4bce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4bce:	7c00      	ldrb	r0, [r0, #16]
   d4bd0:	2100      	movs	r1, #0
   d4bd2:	f7ff bdbb 	b.w	d474c <hal_i2c_available>

000d4bd6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4bd6:	7c00      	ldrb	r0, [r0, #16]
   d4bd8:	2100      	movs	r1, #0
   d4bda:	f7ff bdbf 	b.w	d475c <hal_i2c_read>

000d4bde <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4bde:	7c00      	ldrb	r0, [r0, #16]
   d4be0:	2100      	movs	r1, #0
   d4be2:	f7ff bdc3 	b.w	d476c <hal_i2c_peek>

000d4be6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4be6:	7c00      	ldrb	r0, [r0, #16]
   d4be8:	2100      	movs	r1, #0
   d4bea:	f7ff bdc7 	b.w	d477c <hal_i2c_flush>

000d4bee <_ZN7TwoWireD0Ev>:
   d4bee:	b510      	push	{r4, lr}
   d4bf0:	2114      	movs	r1, #20
   d4bf2:	4604      	mov	r4, r0
   d4bf4:	f001 f819 	bl	d5c2a <_ZdlPvj>
   d4bf8:	4620      	mov	r0, r4
   d4bfa:	bd10      	pop	{r4, pc}

000d4bfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4bfc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c02:	4604      	mov	r4, r0
   d4c04:	4608      	mov	r0, r1
   d4c06:	2100      	movs	r1, #0
   d4c08:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4c0c:	4b03      	ldr	r3, [pc, #12]	; (d4c1c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4c0e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4c10:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4c12:	4611      	mov	r1, r2
   d4c14:	f7ff fdc2 	bl	d479c <hal_i2c_init>
}
   d4c18:	4620      	mov	r0, r4
   d4c1a:	bd10      	pop	{r4, pc}
   d4c1c:	000d6170 	.word	0x000d6170

000d4c20 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d4c20:	2300      	movs	r3, #0
   d4c22:	7c00      	ldrb	r0, [r0, #16]
   d4c24:	461a      	mov	r2, r3
   d4c26:	4619      	mov	r1, r3
   d4c28:	f7ff bd70 	b.w	d470c <hal_i2c_begin>

000d4c2c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4c2c:	7c00      	ldrb	r0, [r0, #16]
   d4c2e:	2200      	movs	r2, #0
   d4c30:	f7ff bd74 	b.w	d471c <hal_i2c_begin_transmission>

000d4c34 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d4c34:	b2c9      	uxtb	r1, r1
   d4c36:	f7ff bff9 	b.w	d4c2c <_ZN7TwoWire17beginTransmissionEh>

000d4c3a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4c3a:	7c00      	ldrb	r0, [r0, #16]
   d4c3c:	2200      	movs	r2, #0
   d4c3e:	f7ff bd75 	b.w	d472c <hal_i2c_end_transmission>

000d4c42 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d4c42:	2101      	movs	r1, #1
   d4c44:	f7ff bff9 	b.w	d4c3a <_ZN7TwoWire15endTransmissionEh>

000d4c48 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4c48:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4c4a:	7d03      	ldrb	r3, [r0, #20]
   d4c4c:	2b06      	cmp	r3, #6
{
   d4c4e:	b08d      	sub	sp, #52	; 0x34
   d4c50:	460e      	mov	r6, r1
   d4c52:	f100 0704 	add.w	r7, r0, #4
   d4c56:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4c5a:	d012      	beq.n	d4c82 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4c5c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4c60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4c64:	220a      	movs	r2, #10
   d4c66:	4630      	mov	r0, r6
   d4c68:	f000 f97f 	bl	d4f6a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4c6c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4c6e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4c70:	d019      	beq.n	d4ca6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4c72:	2c00      	cmp	r4, #0
   d4c74:	d0f4      	beq.n	d4c60 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4c76:	212e      	movs	r1, #46	; 0x2e
   d4c78:	4630      	mov	r0, r6
   d4c7a:	f000 f94d 	bl	d4f18 <_ZN5Print5printEc>
   d4c7e:	4404      	add	r4, r0
   d4c80:	e7ee      	b.n	d4c60 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c82:	232f      	movs	r3, #47	; 0x2f
   d4c84:	466a      	mov	r2, sp
   d4c86:	4639      	mov	r1, r7
   d4c88:	200a      	movs	r0, #10
		buf[0] = 0;
   d4c8a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4c8e:	f7ff fd95 	bl	d47bc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4c92:	4668      	mov	r0, sp
   d4c94:	f001 fa02 	bl	d609c <strlen>
   d4c98:	6833      	ldr	r3, [r6, #0]
   d4c9a:	4602      	mov	r2, r0
   d4c9c:	68db      	ldr	r3, [r3, #12]
   d4c9e:	4669      	mov	r1, sp
   d4ca0:	4630      	mov	r0, r6
   d4ca2:	4798      	blx	r3
   d4ca4:	4604      	mov	r4, r0
    }
    return n;
}
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	b00d      	add	sp, #52	; 0x34
   d4caa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4cac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4cac:	b510      	push	{r4, lr}
   d4cae:	4b05      	ldr	r3, [pc, #20]	; (d4cc4 <_ZN9IPAddressC1Ev+0x18>)
   d4cb0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4cb2:	2211      	movs	r2, #17
   d4cb4:	f840 3b04 	str.w	r3, [r0], #4
   d4cb8:	2100      	movs	r1, #0
   d4cba:	f001 f9bb 	bl	d6034 <memset>
}
   d4cbe:	4620      	mov	r0, r4
   d4cc0:	bd10      	pop	{r4, pc}
   d4cc2:	bf00      	nop
   d4cc4:	000d6198 	.word	0x000d6198

000d4cc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4cc8:	4603      	mov	r3, r0
   d4cca:	4a07      	ldr	r2, [pc, #28]	; (d4ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4ccc:	b510      	push	{r4, lr}
   d4cce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4cd2:	f101 0210 	add.w	r2, r1, #16
   d4cd6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4cda:	f843 4b04 	str.w	r4, [r3], #4
   d4cde:	4291      	cmp	r1, r2
   d4ce0:	d1f9      	bne.n	d4cd6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4ce2:	780a      	ldrb	r2, [r1, #0]
   d4ce4:	701a      	strb	r2, [r3, #0]
}
   d4ce6:	bd10      	pop	{r4, pc}
   d4ce8:	000d6198 	.word	0x000d6198

000d4cec <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d4cec:	7d03      	ldrb	r3, [r0, #20]
   d4cee:	2b04      	cmp	r3, #4
   d4cf0:	d104      	bne.n	d4cfc <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d4cf2:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4cf4:	3800      	subs	r0, #0
   d4cf6:	bf18      	it	ne
   d4cf8:	2001      	movne	r0, #1
   d4cfa:	4770      	bx	lr
    } else if (version() == 6) {
   d4cfc:	2b06      	cmp	r3, #6
   d4cfe:	d107      	bne.n	d4d10 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4d00:	6843      	ldr	r3, [r0, #4]
   d4d02:	b93b      	cbnz	r3, d4d14 <_ZNK9IPAddresscvbEv+0x28>
   d4d04:	6883      	ldr	r3, [r0, #8]
   d4d06:	b92b      	cbnz	r3, d4d14 <_ZNK9IPAddresscvbEv+0x28>
   d4d08:	68c3      	ldr	r3, [r0, #12]
   d4d0a:	b91b      	cbnz	r3, d4d14 <_ZNK9IPAddresscvbEv+0x28>
   d4d0c:	6900      	ldr	r0, [r0, #16]
   d4d0e:	e7f1      	b.n	d4cf4 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d4d10:	2000      	movs	r0, #0
   d4d12:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4d14:	2001      	movs	r0, #1
}
   d4d16:	4770      	bx	lr

000d4d18 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4d18:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4d1a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4d1e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4d22:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4d26:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4d2a:	2304      	movs	r3, #4
   d4d2c:	6041      	str	r1, [r0, #4]
   d4d2e:	7503      	strb	r3, [r0, #20]
}
   d4d30:	bd10      	pop	{r4, pc}
	...

000d4d34 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d4d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4d36:	4d04      	ldr	r5, [pc, #16]	; (d4d48 <_ZN9IPAddressC1Ehhhh+0x14>)
   d4d38:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d4d3a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d4d3e:	9500      	str	r5, [sp, #0]
   d4d40:	f7ff ffea 	bl	d4d18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4d44:	b003      	add	sp, #12
   d4d46:	bd30      	pop	{r4, r5, pc}
   d4d48:	000d6198 	.word	0x000d6198

000d4d4c <_ZN9IPAddressaSEPKh>:
{
   d4d4c:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4d4e:	78cb      	ldrb	r3, [r1, #3]
   d4d50:	9300      	str	r3, [sp, #0]
   d4d52:	788b      	ldrb	r3, [r1, #2]
   d4d54:	784a      	ldrb	r2, [r1, #1]
   d4d56:	7809      	ldrb	r1, [r1, #0]
   d4d58:	f7ff ffde 	bl	d4d18 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4d5c:	b002      	add	sp, #8
   d4d5e:	bd10      	pop	{r4, pc}

000d4d60 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d60:	4b01      	ldr	r3, [pc, #4]	; (d4d68 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4d62:	4a02      	ldr	r2, [pc, #8]	; (d4d6c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4d64:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4d66:	4770      	bx	lr
   d4d68:	2003e650 	.word	0x2003e650
   d4d6c:	000d61a4 	.word	0x000d61a4

000d4d70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d70:	2300      	movs	r3, #0
   d4d72:	6840      	ldr	r0, [r0, #4]
   d4d74:	461a      	mov	r2, r3
   d4d76:	f7ff be3d 	b.w	d49f4 <network_connect>

000d4d7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d7a:	6840      	ldr	r0, [r0, #4]
   d4d7c:	2200      	movs	r2, #0
   d4d7e:	2102      	movs	r1, #2
   d4d80:	f7ff be48 	b.w	d4a14 <network_disconnect>

000d4d84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d84:	2200      	movs	r2, #0
   d4d86:	6840      	ldr	r0, [r0, #4]
   d4d88:	4611      	mov	r1, r2
   d4d8a:	f7ff be3b 	b.w	d4a04 <network_connecting>

000d4d8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4d8e:	2200      	movs	r2, #0
   d4d90:	6840      	ldr	r0, [r0, #4]
   d4d92:	4611      	mov	r1, r2
   d4d94:	f7ff be46 	b.w	d4a24 <network_ready>

000d4d98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4d98:	2300      	movs	r3, #0
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	461a      	mov	r2, r3
   d4d9e:	4619      	mov	r1, r3
   d4da0:	f7ff be48 	b.w	d4a34 <network_on>

000d4da4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4da4:	2300      	movs	r3, #0
   d4da6:	6840      	ldr	r0, [r0, #4]
   d4da8:	461a      	mov	r2, r3
   d4daa:	4619      	mov	r1, r3
   d4dac:	f7ff be4a 	b.w	d4a44 <network_off>

000d4db0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4db0:	6840      	ldr	r0, [r0, #4]
   d4db2:	2200      	movs	r2, #0
   d4db4:	f081 0101 	eor.w	r1, r1, #1
   d4db8:	f7ff be4c 	b.w	d4a54 <network_listen>

000d4dbc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4dbc:	6840      	ldr	r0, [r0, #4]
   d4dbe:	2200      	movs	r2, #0
   d4dc0:	f7ff be58 	b.w	d4a74 <network_set_listen_timeout>

000d4dc4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4dc4:	2200      	movs	r2, #0
   d4dc6:	6840      	ldr	r0, [r0, #4]
   d4dc8:	4611      	mov	r1, r2
   d4dca:	f7ff be5b 	b.w	d4a84 <network_get_listen_timeout>

000d4dce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4dce:	2200      	movs	r2, #0
   d4dd0:	6840      	ldr	r0, [r0, #4]
   d4dd2:	4611      	mov	r1, r2
   d4dd4:	f7ff be46 	b.w	d4a64 <network_listening>

000d4dd8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4ddc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4dde:	b095      	sub	sp, #84	; 0x54
   d4de0:	4616      	mov	r6, r2
   d4de2:	460d      	mov	r5, r1
   d4de4:	4607      	mov	r7, r0
    IPAddress addr;
   d4de6:	f7ff ff61 	bl	d4cac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4dea:	4621      	mov	r1, r4
   d4dec:	2218      	movs	r2, #24
   d4dee:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4df0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4df2:	f001 f91f 	bl	d6034 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4df6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4df8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4dfc:	4621      	mov	r1, r4
   d4dfe:	466b      	mov	r3, sp
   d4e00:	aa0c      	add	r2, sp, #48	; 0x30
   d4e02:	4630      	mov	r0, r6
   d4e04:	f7ff fd02 	bl	d480c <netdb_getaddrinfo>
    if (!r) {
   d4e08:	4604      	mov	r4, r0
   d4e0a:	2800      	cmp	r0, #0
   d4e0c:	d146      	bne.n	d4e9c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e0e:	4602      	mov	r2, r0
   d4e10:	2101      	movs	r1, #1
   d4e12:	6868      	ldr	r0, [r5, #4]
   d4e14:	f7ff fe06 	bl	d4a24 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e18:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e1a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e1c:	4622      	mov	r2, r4
   d4e1e:	6868      	ldr	r0, [r5, #4]
   d4e20:	f7ff fe00 	bl	d4a24 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e24:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e26:	4681      	mov	r9, r0
        bool ok = false;
   d4e28:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e2a:	2e00      	cmp	r6, #0
   d4e2c:	d036      	beq.n	d4e9c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4e2e:	2900      	cmp	r1, #0
   d4e30:	d134      	bne.n	d4e9c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e32:	6873      	ldr	r3, [r6, #4]
   d4e34:	2b02      	cmp	r3, #2
   d4e36:	d003      	beq.n	d4e40 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4e38:	2b0a      	cmp	r3, #10
   d4e3a:	d00b      	beq.n	d4e54 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e3c:	69f6      	ldr	r6, [r6, #28]
   d4e3e:	e7f4      	b.n	d4e2a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4e40:	f1b8 0f00 	cmp.w	r8, #0
   d4e44:	d004      	beq.n	d4e50 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e46:	6971      	ldr	r1, [r6, #20]
   d4e48:	4638      	mov	r0, r7
   d4e4a:	3104      	adds	r1, #4
   d4e4c:	f7ff ff7e 	bl	d4d4c <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4e50:	4641      	mov	r1, r8
   d4e52:	e7f3      	b.n	d4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4e54:	f1b9 0f00 	cmp.w	r9, #0
   d4e58:	d101      	bne.n	d4e5e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4e5a:	4649      	mov	r1, r9
   d4e5c:	e7ee      	b.n	d4e3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e5e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e60:	2210      	movs	r2, #16
   d4e62:	a801      	add	r0, sp, #4
   d4e64:	f001 f8e6 	bl	d6034 <memset>
                    a.v = 6;
   d4e68:	2306      	movs	r3, #6
   d4e6a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e6e:	ad01      	add	r5, sp, #4
   d4e70:	f104 0308 	add.w	r3, r4, #8
   d4e74:	3418      	adds	r4, #24
   d4e76:	6818      	ldr	r0, [r3, #0]
   d4e78:	6859      	ldr	r1, [r3, #4]
   d4e7a:	462a      	mov	r2, r5
   d4e7c:	c203      	stmia	r2!, {r0, r1}
   d4e7e:	3308      	adds	r3, #8
   d4e80:	42a3      	cmp	r3, r4
   d4e82:	4615      	mov	r5, r2
   d4e84:	d1f7      	bne.n	d4e76 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4e86:	a901      	add	r1, sp, #4
   d4e88:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4e8a:	ad07      	add	r5, sp, #28
   d4e8c:	f7ff ff1c 	bl	d4cc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4e92:	1d3c      	adds	r4, r7, #4
   d4e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4e96:	682b      	ldr	r3, [r5, #0]
   d4e98:	7023      	strb	r3, [r4, #0]
   d4e9a:	e7de      	b.n	d4e5a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4e9c:	9800      	ldr	r0, [sp, #0]
   d4e9e:	f7ff fcad 	bl	d47fc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4ea2:	4638      	mov	r0, r7
   d4ea4:	b015      	add	sp, #84	; 0x54
   d4ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4eac <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4eac:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4eae:	4a03      	ldr	r2, [pc, #12]	; (d4ebc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4eb0:	601a      	str	r2, [r3, #0]
   d4eb2:	2200      	movs	r2, #0
   d4eb4:	605a      	str	r2, [r3, #4]

} // spark
   d4eb6:	4770      	bx	lr
   d4eb8:	2003e654 	.word	0x2003e654
   d4ebc:	000d61b0 	.word	0x000d61b0

000d4ec0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ec2:	4606      	mov	r6, r0
   d4ec4:	460d      	mov	r5, r1
  size_t n = 0;
   d4ec6:	188f      	adds	r7, r1, r2
   d4ec8:	2400      	movs	r4, #0
  while (size--) {
   d4eca:	42bd      	cmp	r5, r7
   d4ecc:	d00c      	beq.n	d4ee8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4ece:	6833      	ldr	r3, [r6, #0]
   d4ed0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ed4:	689b      	ldr	r3, [r3, #8]
   d4ed6:	4630      	mov	r0, r6
   d4ed8:	4798      	blx	r3
     if (chunk>=0)
   d4eda:	1e03      	subs	r3, r0, #0
   d4edc:	db01      	blt.n	d4ee2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4ede:	441c      	add	r4, r3
  while (size--) {
   d4ee0:	e7f3      	b.n	d4eca <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4ee2:	2c00      	cmp	r4, #0
   d4ee4:	bf08      	it	eq
   d4ee6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4ee8:	4620      	mov	r0, r4
   d4eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4eec <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4eec:	b513      	push	{r0, r1, r4, lr}
   d4eee:	4604      	mov	r4, r0
    }
   d4ef0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4ef2:	b159      	cbz	r1, d4f0c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4ef4:	9101      	str	r1, [sp, #4]
   d4ef6:	f001 f8d1 	bl	d609c <strlen>
   d4efa:	6823      	ldr	r3, [r4, #0]
   d4efc:	9901      	ldr	r1, [sp, #4]
   d4efe:	68db      	ldr	r3, [r3, #12]
   d4f00:	4602      	mov	r2, r0
   d4f02:	4620      	mov	r0, r4
    }
   d4f04:	b002      	add	sp, #8
   d4f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4f0a:	4718      	bx	r3
    }
   d4f0c:	b002      	add	sp, #8
   d4f0e:	bd10      	pop	{r4, pc}

000d4f10 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4f10:	b508      	push	{r3, lr}
  return write(str);
   d4f12:	f7ff ffeb 	bl	d4eec <_ZN5Print5writeEPKc>
}
   d4f16:	bd08      	pop	{r3, pc}

000d4f18 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4f18:	6803      	ldr	r3, [r0, #0]
   d4f1a:	689b      	ldr	r3, [r3, #8]
   d4f1c:	4718      	bx	r3

000d4f1e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d4f1e:	680a      	ldr	r2, [r1, #0]
 {
   d4f20:	460b      	mov	r3, r1
   return x.printTo(*this);
   d4f22:	6812      	ldr	r2, [r2, #0]
   d4f24:	4601      	mov	r1, r0
   d4f26:	4618      	mov	r0, r3
   d4f28:	4710      	bx	r2

000d4f2a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4f2a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4f2c:	210d      	movs	r1, #13
{
   d4f2e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4f30:	f7ff fff2 	bl	d4f18 <_ZN5Print5printEc>
  n += print('\n');
   d4f34:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4f36:	4604      	mov	r4, r0
  n += print('\n');
   d4f38:	4628      	mov	r0, r5
   d4f3a:	f7ff ffed 	bl	d4f18 <_ZN5Print5printEc>
  return n;
}
   d4f3e:	4420      	add	r0, r4
   d4f40:	bd38      	pop	{r3, r4, r5, pc}

000d4f42 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4f42:	b538      	push	{r3, r4, r5, lr}
   d4f44:	4605      	mov	r5, r0
  return write(str);
   d4f46:	f7ff ffd1 	bl	d4eec <_ZN5Print5writeEPKc>
   d4f4a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4f4c:	4628      	mov	r0, r5
   d4f4e:	f7ff ffec 	bl	d4f2a <_ZN5Print7printlnEv>
  return n;
}
   d4f52:	4420      	add	r0, r4
   d4f54:	bd38      	pop	{r3, r4, r5, pc}

000d4f56 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   d4f56:	b538      	push	{r3, r4, r5, lr}
   d4f58:	4605      	mov	r5, r0
   size_t n = print(x);
   d4f5a:	f7ff ffe0 	bl	d4f1e <_ZN5Print5printERK9Printable>
   d4f5e:	4604      	mov	r4, r0
   n += println();
   d4f60:	4628      	mov	r0, r5
   d4f62:	f7ff ffe2 	bl	d4f2a <_ZN5Print7printlnEv>
   return n;
 }
   d4f66:	4420      	add	r0, r4
   d4f68:	bd38      	pop	{r3, r4, r5, pc}

000d4f6a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4f6a:	b530      	push	{r4, r5, lr}
   d4f6c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4f6e:	2300      	movs	r3, #0
   d4f70:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4f74:	2a01      	cmp	r2, #1
   d4f76:	bf98      	it	ls
   d4f78:	220a      	movls	r2, #10
   d4f7a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4f7c:	460d      	mov	r5, r1
   d4f7e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4f82:	fb01 5312 	mls	r3, r1, r2, r5
   d4f86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f8a:	2b09      	cmp	r3, #9
   d4f8c:	bf94      	ite	ls
   d4f8e:	3330      	addls	r3, #48	; 0x30
   d4f90:	3337      	addhi	r3, #55	; 0x37
   d4f92:	b2db      	uxtb	r3, r3
  } while(n);
   d4f94:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f96:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4f9a:	d9ef      	bls.n	d4f7c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4f9c:	4621      	mov	r1, r4
   d4f9e:	f7ff ffa5 	bl	d4eec <_ZN5Print5writeEPKc>
}
   d4fa2:	b00b      	add	sp, #44	; 0x2c
   d4fa4:	bd30      	pop	{r4, r5, pc}

000d4fa6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4fa6:	b510      	push	{r4, lr}
   d4fa8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4faa:	f7ff fdb3 	bl	d4b14 <_ZNSt14_Function_baseD1Ev>
   d4fae:	4620      	mov	r0, r4
   d4fb0:	bd10      	pop	{r4, pc}
	...

000d4fb4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4fb4:	4803      	ldr	r0, [pc, #12]	; (d4fc4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4fb6:	4a04      	ldr	r2, [pc, #16]	; (d4fc8 <_GLOBAL__sub_I_RGB+0x14>)
   d4fb8:	4904      	ldr	r1, [pc, #16]	; (d4fcc <_GLOBAL__sub_I_RGB+0x18>)
   d4fba:	2300      	movs	r3, #0
   d4fbc:	6083      	str	r3, [r0, #8]
   d4fbe:	f000 be2f 	b.w	d5c20 <__aeabi_atexit>
   d4fc2:	bf00      	nop
   d4fc4:	2003e65c 	.word	0x2003e65c
   d4fc8:	2003e5c4 	.word	0x2003e5c4
   d4fcc:	000d4fa7 	.word	0x000d4fa7

000d4fd0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4fd0:	b510      	push	{r4, lr}
   d4fd2:	4604      	mov	r4, r0
   d4fd4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4fd6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4fd8:	f7ff fc50 	bl	d487c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4fdc:	2300      	movs	r3, #0
   d4fde:	6063      	str	r3, [r4, #4]
}
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	bd10      	pop	{r4, pc}

000d4fe4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4fe4:	b510      	push	{r4, lr}
   d4fe6:	4604      	mov	r4, r0
{
	free(buffer);
   d4fe8:	6800      	ldr	r0, [r0, #0]
   d4fea:	f7ff fd5b 	bl	d4aa4 <free>
}
   d4fee:	4620      	mov	r0, r4
   d4ff0:	bd10      	pop	{r4, pc}

000d4ff2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4ff2:	b510      	push	{r4, lr}
   d4ff4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4ff6:	6800      	ldr	r0, [r0, #0]
   d4ff8:	b108      	cbz	r0, d4ffe <_ZN6String10invalidateEv+0xc>
   d4ffa:	f7ff fd53 	bl	d4aa4 <free>
	buffer = NULL;
   d4ffe:	2300      	movs	r3, #0
	capacity = len = 0;
   d5000:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5004:	6023      	str	r3, [r4, #0]
}
   d5006:	bd10      	pop	{r4, pc}

000d5008 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5008:	b538      	push	{r3, r4, r5, lr}
   d500a:	4604      	mov	r4, r0
   d500c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d500e:	6800      	ldr	r0, [r0, #0]
   d5010:	3101      	adds	r1, #1
   d5012:	f7ff fd4f 	bl	d4ab4 <realloc>
	if (newbuffer) {
   d5016:	b110      	cbz	r0, d501e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5018:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d501c:	2001      	movs	r0, #1
	}
	return 0;
}
   d501e:	bd38      	pop	{r3, r4, r5, pc}

000d5020 <_ZN6String7reserveEj>:
{
   d5020:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5022:	6803      	ldr	r3, [r0, #0]
{
   d5024:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5026:	b123      	cbz	r3, d5032 <_ZN6String7reserveEj+0x12>
   d5028:	6843      	ldr	r3, [r0, #4]
   d502a:	428b      	cmp	r3, r1
   d502c:	d301      	bcc.n	d5032 <_ZN6String7reserveEj+0x12>
   d502e:	2001      	movs	r0, #1
}
   d5030:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5032:	4620      	mov	r0, r4
   d5034:	f7ff ffe8 	bl	d5008 <_ZN6String12changeBufferEj>
   d5038:	2800      	cmp	r0, #0
   d503a:	d0f9      	beq.n	d5030 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d503c:	68a3      	ldr	r3, [r4, #8]
   d503e:	2b00      	cmp	r3, #0
   d5040:	d1f5      	bne.n	d502e <_ZN6String7reserveEj+0xe>
   d5042:	6822      	ldr	r2, [r4, #0]
   d5044:	7013      	strb	r3, [r2, #0]
   d5046:	e7f2      	b.n	d502e <_ZN6String7reserveEj+0xe>

000d5048 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5048:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d504a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d504c:	4611      	mov	r1, r2
   d504e:	9201      	str	r2, [sp, #4]
{
   d5050:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5052:	f7ff ffe5 	bl	d5020 <_ZN6String7reserveEj>
   d5056:	9a01      	ldr	r2, [sp, #4]
   d5058:	b928      	cbnz	r0, d5066 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d505a:	4620      	mov	r0, r4
   d505c:	f7ff ffc9 	bl	d4ff2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5060:	4620      	mov	r0, r4
   d5062:	b003      	add	sp, #12
   d5064:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5066:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5068:	4629      	mov	r1, r5
   d506a:	6820      	ldr	r0, [r4, #0]
   d506c:	f000 ffd4 	bl	d6018 <memcpy>
	buffer[len] = 0;
   d5070:	6822      	ldr	r2, [r4, #0]
   d5072:	68a3      	ldr	r3, [r4, #8]
   d5074:	2100      	movs	r1, #0
   d5076:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5078:	e7f2      	b.n	d5060 <_ZN6String4copyEPKcj+0x18>

000d507a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d507a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d507c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d507e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5082:	4604      	mov	r4, r0
	len = 0;
   d5084:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5086:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5088:	b141      	cbz	r1, d509c <_ZN6StringC1EPKc+0x22>
   d508a:	4608      	mov	r0, r1
   d508c:	9101      	str	r1, [sp, #4]
   d508e:	f001 f805 	bl	d609c <strlen>
   d5092:	9901      	ldr	r1, [sp, #4]
   d5094:	4602      	mov	r2, r0
   d5096:	4620      	mov	r0, r4
   d5098:	f7ff ffd6 	bl	d5048 <_ZN6String4copyEPKcj>
}
   d509c:	4620      	mov	r0, r4
   d509e:	b002      	add	sp, #8
   d50a0:	bd10      	pop	{r4, pc}

000d50a2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d50a2:	b513      	push	{r0, r1, r4, lr}
   d50a4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d50a6:	b159      	cbz	r1, d50c0 <_ZN6StringaSEPKc+0x1e>
   d50a8:	4608      	mov	r0, r1
   d50aa:	9101      	str	r1, [sp, #4]
   d50ac:	f000 fff6 	bl	d609c <strlen>
   d50b0:	9901      	ldr	r1, [sp, #4]
   d50b2:	4602      	mov	r2, r0
   d50b4:	4620      	mov	r0, r4
   d50b6:	f7ff ffc7 	bl	d5048 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d50ba:	4620      	mov	r0, r4
   d50bc:	b002      	add	sp, #8
   d50be:	bd10      	pop	{r4, pc}
	else invalidate();
   d50c0:	f7ff ff97 	bl	d4ff2 <_ZN6String10invalidateEv>
   d50c4:	e7f9      	b.n	d50ba <_ZN6StringaSEPKc+0x18>

000d50c6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d50c6:	b570      	push	{r4, r5, r6, lr}
   d50c8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d50ca:	460e      	mov	r6, r1
   d50cc:	b909      	cbnz	r1, d50d2 <_ZN6String6concatEPKcj+0xc>
   d50ce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d50d0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d50d2:	b16a      	cbz	r2, d50f0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d50d4:	6884      	ldr	r4, [r0, #8]
   d50d6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d50d8:	4621      	mov	r1, r4
   d50da:	f7ff ffa1 	bl	d5020 <_ZN6String7reserveEj>
   d50de:	2800      	cmp	r0, #0
   d50e0:	d0f5      	beq.n	d50ce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d50e2:	6828      	ldr	r0, [r5, #0]
   d50e4:	68ab      	ldr	r3, [r5, #8]
   d50e6:	4631      	mov	r1, r6
   d50e8:	4418      	add	r0, r3
   d50ea:	f000 ffcf 	bl	d608c <strcpy>
	len = newlen;
   d50ee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d50f0:	2001      	movs	r0, #1
   d50f2:	e7ed      	b.n	d50d0 <_ZN6String6concatEPKcj+0xa>

000d50f4 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d50f4:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d50f6:	2300      	movs	r3, #0
	buf[0] = c;
   d50f8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d50fc:	2201      	movs	r2, #1
   d50fe:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d5100:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d5104:	f7ff ffdf 	bl	d50c6 <_ZN6String6concatEPKcj>
}
   d5108:	b003      	add	sp, #12
   d510a:	f85d fb04 	ldr.w	pc, [sp], #4

000d510e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d510e:	b510      	push	{r4, lr}
   d5110:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5112:	6800      	ldr	r0, [r0, #0]
   d5114:	b118      	cbz	r0, d511e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5116:	f7ff fcc5 	bl	d4aa4 <free>
            wakeupSource_ = nullptr;
   d511a:	2300      	movs	r3, #0
   d511c:	6023      	str	r3, [r4, #0]
        }
    }
   d511e:	bd10      	pop	{r4, pc}

000d5120 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d5120:	b510      	push	{r4, lr}
   d5122:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5124:	f7ff fff3 	bl	d510e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d5128:	4620      	mov	r0, r4
   d512a:	bd10      	pop	{r4, pc}

000d512c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d512c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d512e:	4b09      	ldr	r3, [pc, #36]	; (d5154 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5130:	4c09      	ldr	r4, [pc, #36]	; (d5158 <_GLOBAL__sub_I_System+0x2c>)
   d5132:	2202      	movs	r2, #2
   d5134:	2000      	movs	r0, #0
   d5136:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5138:	4b08      	ldr	r3, [pc, #32]	; (d515c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d513a:	6020      	str	r0, [r4, #0]
   d513c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d513e:	71a0      	strb	r0, [r4, #6]
   d5140:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5142:	f7ff fc23 	bl	d498c <set_system_mode>
SystemClass System;
   d5146:	4620      	mov	r0, r4
   d5148:	4a05      	ldr	r2, [pc, #20]	; (d5160 <_GLOBAL__sub_I_System+0x34>)
   d514a:	4906      	ldr	r1, [pc, #24]	; (d5164 <_GLOBAL__sub_I_System+0x38>)
   d514c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5150:	f000 bd66 	b.w	d5c20 <__aeabi_atexit>
   d5154:	2003e678 	.word	0x2003e678
   d5158:	2003e66c 	.word	0x2003e66c
   d515c:	ffff0000 	.word	0xffff0000
   d5160:	2003e5c4 	.word	0x2003e5c4
   d5164:	000d5121 	.word	0x000d5121

000d5168 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5168:	4b02      	ldr	r3, [pc, #8]	; (d5174 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d516a:	681a      	ldr	r2, [r3, #0]
   d516c:	4b02      	ldr	r3, [pc, #8]	; (d5178 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d516e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d5170:	4770      	bx	lr
   d5172:	bf00      	nop
   d5174:	2003e55c 	.word	0x2003e55c
   d5178:	2003e67c 	.word	0x2003e67c

000d517c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d517c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d517e:	6804      	ldr	r4, [r0, #0]
   d5180:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5182:	46a4      	mov	ip, r4
    }
   d5184:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5188:	4760      	bx	ip

000d518a <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d518a:	6803      	ldr	r3, [r0, #0]
   d518c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d518e:	4718      	bx	r3

000d5190 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5190:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5192:	4770      	bx	lr

000d5194 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5194:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5196:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5198:	1a10      	subs	r0, r2, r0
   d519a:	4770      	bx	lr

000d519c <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d519c:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d519e:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d51a0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d51a4:	68db      	ldr	r3, [r3, #12]
   d51a6:	2201      	movs	r2, #1
   d51a8:	f10d 0107 	add.w	r1, sp, #7
   d51ac:	4798      	blx	r3
}
   d51ae:	b003      	add	sp, #12
   d51b0:	f85d fb04 	ldr.w	pc, [sp], #4

000d51b4 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d51b4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d51b6:	6803      	ldr	r3, [r0, #0]
   d51b8:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d51ba:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d51bc:	4798      	blx	r3
   d51be:	b128      	cbz	r0, d51cc <_ZN3UDP4readEv+0x18>
   d51c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d51c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d51c4:	1c59      	adds	r1, r3, #1
   d51c6:	86e1      	strh	r1, [r4, #54]	; 0x36
   d51c8:	5cd0      	ldrb	r0, [r2, r3]
}
   d51ca:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d51cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d51d0:	e7fb      	b.n	d51ca <_ZN3UDP4readEv+0x16>

000d51d2 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d51d2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d51d4:	6803      	ldr	r3, [r0, #0]
   d51d6:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d51d8:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d51da:	4798      	blx	r3
   d51dc:	b118      	cbz	r0, d51e6 <_ZN3UDP4peekEv+0x14>
   d51de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d51e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d51e2:	5cd0      	ldrb	r0, [r2, r3]
}
   d51e4:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d51e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d51ea:	e7fb      	b.n	d51e4 <_ZN3UDP4peekEv+0x12>

000d51ec <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d51ec:	4770      	bx	lr

000d51ee <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d51ee:	b410      	push	{r4}
   d51f0:	4603      	mov	r3, r0
   d51f2:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d51f4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d51f6:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d51f8:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d51fa:	6803      	ldr	r3, [r0, #0]
   d51fc:	1a52      	subs	r2, r2, r1
   d51fe:	68db      	ldr	r3, [r3, #12]
   d5200:	4421      	add	r1, r4
}
   d5202:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d5206:	4718      	bx	r3

000d5208 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5208:	f1a0 0010 	sub.w	r0, r0, #16
   d520c:	f7ff bfef 	b.w	d51ee <_ZNK3UDP7printToER5Print>

000d5210 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5210:	b570      	push	{r4, r5, r6, lr}
    stop();
   d5212:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5214:	b08c      	sub	sp, #48	; 0x30
    stop();
   d5216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5218:	4604      	mov	r4, r0
   d521a:	460e      	mov	r6, r1
   d521c:	4615      	mov	r5, r2
    stop();
   d521e:	4798      	blx	r3
    const int one = 1;
   d5220:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d5222:	221c      	movs	r2, #28
   d5224:	2100      	movs	r1, #0
   d5226:	a805      	add	r0, sp, #20
    const int one = 1;
   d5228:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d522a:	f000 ff03 	bl	d6034 <memset>
    saddr.sin6_len = sizeof(saddr);
   d522e:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d5232:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d5234:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d5238:	f7ff fad8 	bl	d47ec <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d523c:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d523e:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5242:	2102      	movs	r1, #2
   d5244:	200a      	movs	r0, #10
   d5246:	f7ff fb11 	bl	d486c <sock_socket>
    if (_sock < 0) {
   d524a:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d524c:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d524e:	db25      	blt.n	d529c <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5250:	2204      	movs	r2, #4
   d5252:	9200      	str	r2, [sp, #0]
   d5254:	ab02      	add	r3, sp, #8
   d5256:	f640 71ff 	movw	r1, #4095	; 0xfff
   d525a:	f7ff fae7 	bl	d482c <sock_setsockopt>
   d525e:	b9e8      	cbnz	r0, d529c <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d5260:	b195      	cbz	r5, d5288 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d5262:	9003      	str	r0, [sp, #12]
   d5264:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5268:	a903      	add	r1, sp, #12
   d526a:	b2e8      	uxtb	r0, r5
   d526c:	f7ff fa9e 	bl	d47ac <if_index_to_name>
   d5270:	b9a0      	cbnz	r0, d529c <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5272:	2306      	movs	r3, #6
   d5274:	9300      	str	r3, [sp, #0]
   d5276:	6960      	ldr	r0, [r4, #20]
   d5278:	ab03      	add	r3, sp, #12
   d527a:	f241 020b 	movw	r2, #4107	; 0x100b
   d527e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5282:	f7ff fad3 	bl	d482c <sock_setsockopt>
   d5286:	b948      	cbnz	r0, d529c <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5288:	6960      	ldr	r0, [r4, #20]
   d528a:	221c      	movs	r2, #28
   d528c:	a905      	add	r1, sp, #20
   d528e:	f7ff fac5 	bl	d481c <sock_bind>
   d5292:	b918      	cbnz	r0, d529c <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d5294:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d5296:	2001      	movs	r0, #1
}
   d5298:	b00c      	add	sp, #48	; 0x30
   d529a:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d529c:	6823      	ldr	r3, [r4, #0]
   d529e:	4620      	mov	r0, r4
   d52a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d52a2:	4798      	blx	r3
   d52a4:	2000      	movs	r0, #0
   d52a6:	e7f7      	b.n	d5298 <_ZN3UDP5beginEtm+0x88>

000d52a8 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d52a8:	b510      	push	{r4, lr}
   d52aa:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d52ac:	6940      	ldr	r0, [r0, #20]
   d52ae:	2800      	cmp	r0, #0
   d52b0:	db01      	blt.n	d52b6 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d52b2:	f7ff fac3 	bl	d483c <sock_close>
    _sock = -1;
   d52b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d52ba:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d52bc:	2300      	movs	r3, #0
   d52be:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d52c0:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d52c2:	bd10      	pop	{r4, pc}

000d52c4 <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d52c4:	b570      	push	{r4, r5, r6, lr}
   d52c6:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d52c8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d52ca:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d52cc:	b168      	cbz	r0, d52ea <_ZN3UDP5writeEPKhj+0x26>
   d52ce:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d52d0:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d52d2:	4294      	cmp	r4, r2
   d52d4:	bf28      	it	cs
   d52d6:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d52d8:	4622      	mov	r2, r4
   d52da:	4430      	add	r0, r6
   d52dc:	f000 fe9c 	bl	d6018 <memcpy>
    _offset += size;
   d52e0:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d52e2:	4423      	add	r3, r4
   d52e4:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d52e6:	4620      	mov	r0, r4
   d52e8:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d52ea:	4604      	mov	r4, r0
   d52ec:	e7f1      	b.n	d52d2 <_ZN3UDP5writeEPKhj+0xe>

000d52ee <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d52ee:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d52f0:	6803      	ldr	r3, [r0, #0]
   d52f2:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d52f4:	4604      	mov	r4, r0
   d52f6:	460f      	mov	r7, r1
   d52f8:	4616      	mov	r6, r2
    if (available()) {
   d52fa:	4798      	blx	r3
   d52fc:	b190      	cbz	r0, d5324 <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d52fe:	6823      	ldr	r3, [r4, #0]
   d5300:	4620      	mov	r0, r4
   d5302:	691b      	ldr	r3, [r3, #16]
   d5304:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5306:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5308:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d530a:	4286      	cmp	r6, r0
   d530c:	bfa8      	it	ge
   d530e:	4606      	movge	r6, r0
   d5310:	4419      	add	r1, r3
   d5312:	4632      	mov	r2, r6
   d5314:	4638      	mov	r0, r7
   d5316:	f000 fe7f 	bl	d6018 <memcpy>
        _offset += read;
   d531a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d531c:	4433      	add	r3, r6
   d531e:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d5320:	4630      	mov	r0, r6
   d5322:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d5324:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d5328:	e7fa      	b.n	d5320 <_ZN3UDP4readEPhj+0x32>
	...

000d532c <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d532c:	b570      	push	{r4, r5, r6, lr}
   d532e:	4604      	mov	r4, r0
   d5330:	4b05      	ldr	r3, [pc, #20]	; (d5348 <_ZN3UDP8remoteIPEv+0x1c>)
   d5332:	f844 3b04 	str.w	r3, [r4], #4
   d5336:	f101 0520 	add.w	r5, r1, #32
   d533a:	4606      	mov	r6, r0
   d533c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d533e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5340:	682b      	ldr	r3, [r5, #0]
   d5342:	7023      	strb	r3, [r4, #0]
   d5344:	4630      	mov	r0, r6
   d5346:	bd70      	pop	{r4, r5, r6, pc}
   d5348:	000d6198 	.word	0x000d6198

000d534c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d534c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d534e:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5350:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5352:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5354:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5356:	4a0a      	ldr	r2, [pc, #40]	; (d5380 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5358:	9202      	str	r2, [sp, #8]
   d535a:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d535c:	468c      	mov	ip, r1
   d535e:	4606      	mov	r6, r0
   d5360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5362:	ad03      	add	r5, sp, #12
   d5364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5366:	6823      	ldr	r3, [r4, #0]
   d5368:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d536a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d536e:	9300      	str	r3, [sp, #0]
   d5370:	4672      	mov	r2, lr
   d5372:	ab02      	add	r3, sp, #8
   d5374:	4661      	mov	r1, ip
   d5376:	4630      	mov	r0, r6
   d5378:	47b8      	blx	r7
    }
   d537a:	b009      	add	sp, #36	; 0x24
   d537c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d537e:	bf00      	nop
   d5380:	000d6198 	.word	0x000d6198

000d5384 <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d5384:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5386:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d5388:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d538a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d538c:	4b0c      	ldr	r3, [pc, #48]	; (d53c0 <_ZN3UDP9endPacketEv+0x3c>)
   d538e:	9302      	str	r3, [sp, #8]
   d5390:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d5394:	4604      	mov	r4, r0
   d5396:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5398:	ad03      	add	r5, sp, #12
   d539a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d539c:	6833      	ldr	r3, [r6, #0]
   d539e:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d53a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d53a2:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d53a4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d53a6:	9300      	str	r3, [sp, #0]
   d53a8:	4620      	mov	r0, r4
   d53aa:	ab02      	add	r3, sp, #8
   d53ac:	47b8      	blx	r7
    flush(); // wait for send to complete
   d53ae:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d53b0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d53b2:	69db      	ldr	r3, [r3, #28]
   d53b4:	4620      	mov	r0, r4
   d53b6:	4798      	blx	r3
}
   d53b8:	4628      	mov	r0, r5
   d53ba:	b009      	add	sp, #36	; 0x24
   d53bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53be:	bf00      	nop
   d53c0:	000d6198 	.word	0x000d6198

000d53c4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d53c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d53c6:	7843      	ldrb	r3, [r0, #1]
   d53c8:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d53ca:	b08d      	sub	sp, #52	; 0x34
   d53cc:	4605      	mov	r5, r0
   d53ce:	460c      	mov	r4, r1
   d53d0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d53d2:	d104      	bne.n	d53de <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d53d4:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d53d6:	4620      	mov	r0, r4
   d53d8:	f7ff fcb8 	bl	d4d4c <_ZN9IPAddressaSEPKh>
   d53dc:	e022      	b.n	d5424 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d53de:	2b0a      	cmp	r3, #10
   d53e0:	d125      	bne.n	d542e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d53e2:	2211      	movs	r2, #17
   d53e4:	2100      	movs	r1, #0
   d53e6:	a801      	add	r0, sp, #4
   d53e8:	f000 fe24 	bl	d6034 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d53ec:	68ab      	ldr	r3, [r5, #8]
   d53ee:	b303      	cbz	r3, d5432 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d53f0:	f105 0308 	add.w	r3, r5, #8
   d53f4:	ae01      	add	r6, sp, #4
   d53f6:	f105 0c18 	add.w	ip, r5, #24
   d53fa:	6818      	ldr	r0, [r3, #0]
   d53fc:	6859      	ldr	r1, [r3, #4]
   d53fe:	4632      	mov	r2, r6
   d5400:	c203      	stmia	r2!, {r0, r1}
   d5402:	3308      	adds	r3, #8
   d5404:	4563      	cmp	r3, ip
   d5406:	4616      	mov	r6, r2
   d5408:	d1f7      	bne.n	d53fa <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d540a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d540c:	a901      	add	r1, sp, #4
   d540e:	a806      	add	r0, sp, #24
   d5410:	ae07      	add	r6, sp, #28
            a.v = 6;
   d5412:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5416:	f7ff fc57 	bl	d4cc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d541a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d541c:	3404      	adds	r4, #4
   d541e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5420:	6833      	ldr	r3, [r6, #0]
   d5422:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d5424:	b11f      	cbz	r7, d542e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d5426:	8868      	ldrh	r0, [r5, #2]
   d5428:	f7ff f9d8 	bl	d47dc <inet_ntohs>
   d542c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d542e:	b00d      	add	sp, #52	; 0x34
   d5430:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5432:	68eb      	ldr	r3, [r5, #12]
   d5434:	2b00      	cmp	r3, #0
   d5436:	d1db      	bne.n	d53f0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d5438:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d543c:	692e      	ldr	r6, [r5, #16]
   d543e:	f7ff f9c5 	bl	d47cc <inet_htonl>
   d5442:	4286      	cmp	r6, r0
   d5444:	d1d4      	bne.n	d53f0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d5446:	f105 0114 	add.w	r1, r5, #20
   d544a:	e7c4      	b.n	d53d6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d544c <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5450:	4617      	mov	r7, r2
   d5452:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5454:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d5456:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5458:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d545a:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d545c:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d545e:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5460:	f7ff f9d4 	bl	d480c <netdb_getaddrinfo>
   d5464:	1e04      	subs	r4, r0, #0
   d5466:	db20      	blt.n	d54aa <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d5468:	9b01      	ldr	r3, [sp, #4]
   d546a:	b32b      	cbz	r3, d54b8 <_ZN3UDP11beginPacketEPKct+0x6c>
   d546c:	695b      	ldr	r3, [r3, #20]
   d546e:	b31b      	cbz	r3, d54b8 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d5470:	a802      	add	r0, sp, #8
   d5472:	f7ff fc1b 	bl	d4cac <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5476:	9b01      	ldr	r3, [sp, #4]
   d5478:	2200      	movs	r2, #0
   d547a:	6958      	ldr	r0, [r3, #20]
   d547c:	a902      	add	r1, sp, #8
   d547e:	f7ff ffa1 	bl	d53c4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d5482:	a802      	add	r0, sp, #8
   d5484:	f7ff fc32 	bl	d4cec <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5488:	b1b0      	cbz	r0, d54b8 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d548a:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d548c:	ad03      	add	r5, sp, #12
   d548e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5492:	4b0b      	ldr	r3, [pc, #44]	; (d54c0 <_ZN3UDP11beginPacketEPKct+0x74>)
   d5494:	9308      	str	r3, [sp, #32]
   d5496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5498:	ac09      	add	r4, sp, #36	; 0x24
   d549a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d549c:	682b      	ldr	r3, [r5, #0]
   d549e:	7023      	strb	r3, [r4, #0]
   d54a0:	463a      	mov	r2, r7
   d54a2:	a908      	add	r1, sp, #32
   d54a4:	4630      	mov	r0, r6
   d54a6:	47c0      	blx	r8
   d54a8:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d54aa:	9801      	ldr	r0, [sp, #4]
   d54ac:	f7ff f9a6 	bl	d47fc <netdb_freeaddrinfo>
}
   d54b0:	4620      	mov	r0, r4
   d54b2:	b00e      	add	sp, #56	; 0x38
   d54b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d54b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d54bc:	e7f5      	b.n	d54aa <_ZN3UDP11beginPacketEPKct+0x5e>
   d54be:	bf00      	nop
   d54c0:	000d6198 	.word	0x000d6198

000d54c4 <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d54c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d54c8:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d54cc:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d54d0:	b090      	sub	sp, #64	; 0x40
   d54d2:	4605      	mov	r5, r0
   d54d4:	460e      	mov	r6, r1
   d54d6:	4690      	mov	r8, r2
   d54d8:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d54da:	db3c      	blt.n	d5556 <_ZN3UDP13receivePacketEPhjm+0x92>
   d54dc:	2900      	cmp	r1, #0
   d54de:	d03a      	beq.n	d5556 <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d54e0:	f04f 0a1c 	mov.w	sl, #28
   d54e4:	af09      	add	r7, sp, #36	; 0x24
   d54e6:	4652      	mov	r2, sl
   d54e8:	2100      	movs	r1, #0
   d54ea:	4638      	mov	r0, r7
   d54ec:	f000 fda2 	bl	d6034 <memset>
        socklen_t slen = sizeof(saddr);
   d54f0:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d54f4:	b1dc      	cbz	r4, d552e <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d54f6:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d54f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d54fc:	fbb4 f3f0 	udiv	r3, r4, r0
   d5500:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5504:	fb00 4313 	mls	r3, r0, r3, r4
   d5508:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d550a:	2310      	movs	r3, #16
            struct timeval tv = {};
   d550c:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d550e:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5510:	9300      	str	r3, [sp, #0]
   d5512:	f241 0206 	movw	r2, #4102	; 0x1006
   d5516:	446b      	add	r3, sp
   d5518:	f640 71ff 	movw	r1, #4095	; 0xfff
   d551c:	4648      	mov	r0, r9
   d551e:	f7ff f985 	bl	d482c <sock_setsockopt>
            if (ret) {
   d5522:	4604      	mov	r4, r0
   d5524:	b120      	cbz	r0, d5530 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d5526:	4620      	mov	r0, r4
   d5528:	b010      	add	sp, #64	; 0x40
   d552a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d552e:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5530:	ab03      	add	r3, sp, #12
   d5532:	e9cd 7300 	strd	r7, r3, [sp]
   d5536:	6968      	ldr	r0, [r5, #20]
   d5538:	4623      	mov	r3, r4
   d553a:	4642      	mov	r2, r8
   d553c:	4631      	mov	r1, r6
   d553e:	f7ff f985 	bl	d484c <sock_recvfrom>
        if (ret >= 0) {
   d5542:	1e04      	subs	r4, r0, #0
   d5544:	dbef      	blt.n	d5526 <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5546:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d554a:	f105 011c 	add.w	r1, r5, #28
   d554e:	4638      	mov	r0, r7
   d5550:	f7ff ff38 	bl	d53c4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d5554:	e7e7      	b.n	d5526 <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d5556:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d555a:	e7e4      	b.n	d5526 <_ZN3UDP13receivePacketEPhjm+0x62>

000d555c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d555c:	b538      	push	{r3, r4, r5, lr}
   d555e:	4605      	mov	r5, r0
   d5560:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d5562:	7d2b      	ldrb	r3, [r5, #20]
   d5564:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5566:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5568:	d110      	bne.n	d558c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d556a:	f640 231c 	movw	r3, #2588	; 0xa1c
   d556e:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5570:	f7ff f93c 	bl	d47ec <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5574:	3408      	adds	r4, #8
   d5576:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d5578:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d557c:	3514      	adds	r5, #20
   d557e:	f853 2b04 	ldr.w	r2, [r3], #4
   d5582:	f844 2b04 	str.w	r2, [r4], #4
   d5586:	42ab      	cmp	r3, r5
   d5588:	d1f9      	bne.n	d557e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d558a:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d558c:	2b04      	cmp	r3, #4
   d558e:	d1fc      	bne.n	d558a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d5590:	f44f 7304 	mov.w	r3, #528	; 0x210
   d5594:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d5596:	f7ff f929 	bl	d47ec <inet_htons>
   d559a:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d559c:	6868      	ldr	r0, [r5, #4]
   d559e:	f7ff f915 	bl	d47cc <inet_htonl>
   d55a2:	6060      	str	r0, [r4, #4]
}
   d55a4:	e7f1      	b.n	d558a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d55a6 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d55a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d55aa:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d55ac:	af03      	add	r7, sp, #12
   d55ae:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d55b2:	4698      	mov	r8, r3
   d55b4:	4604      	mov	r4, r0
   d55b6:	460d      	mov	r5, r1
   d55b8:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d55ba:	2100      	movs	r1, #0
   d55bc:	464a      	mov	r2, r9
   d55be:	4638      	mov	r0, r7
   d55c0:	f000 fd38 	bl	d6034 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d55c4:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d55c8:	463a      	mov	r2, r7
   d55ca:	4640      	mov	r0, r8
   d55cc:	f7ff ffc6 	bl	d555c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d55d0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d55d4:	b153      	cbz	r3, d55ec <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d55d6:	e9cd 7900 	strd	r7, r9, [sp]
   d55da:	6960      	ldr	r0, [r4, #20]
   d55dc:	2300      	movs	r3, #0
   d55de:	4632      	mov	r2, r6
   d55e0:	4629      	mov	r1, r5
   d55e2:	f7ff f93b 	bl	d485c <sock_sendto>
}
   d55e6:	b00b      	add	sp, #44	; 0x2c
   d55e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d55ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d55f0:	e7f9      	b.n	d55e6 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d55f4 <_ZN3UDPC1Ev>:
UDP::UDP()
   d55f4:	b538      	push	{r3, r4, r5, lr}
   d55f6:	2500      	movs	r5, #0
   d55f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d55fc:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d5600:	4b0b      	ldr	r3, [pc, #44]	; (d5630 <_ZN3UDPC1Ev+0x3c>)
   d5602:	f103 0208 	add.w	r2, r3, #8
   d5606:	336c      	adds	r3, #108	; 0x6c
   d5608:	6103      	str	r3, [r0, #16]
   d560a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d560e:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d5610:	6002      	str	r2, [r0, #0]
   d5612:	6143      	str	r3, [r0, #20]
   d5614:	301c      	adds	r0, #28
   d5616:	f7ff fb49 	bl	d4cac <_ZN9IPAddressC1Ev>
   d561a:	f44f 7300 	mov.w	r3, #512	; 0x200
   d561e:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d5622:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5624:	8725      	strh	r5, [r4, #56]	; 0x38
   d5626:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5628:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d562c:	4620      	mov	r0, r4
   d562e:	bd38      	pop	{r3, r4, r5, pc}
   d5630:	000d61f8 	.word	0x000d61f8

000d5634 <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d5634:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d5636:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d563a:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d563c:	b123      	cbz	r3, d5648 <_ZN3UDP13releaseBufferEv+0x14>
   d563e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5640:	b110      	cbz	r0, d5648 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d5642:	2101      	movs	r1, #1
   d5644:	f000 faf1 	bl	d5c2a <_ZdlPvj>
    _buffer = NULL;
   d5648:	2300      	movs	r3, #0
   d564a:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d564c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5650:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d5652:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5654:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d5656:	bd10      	pop	{r4, pc}

000d5658 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5658:	b570      	push	{r4, r5, r6, lr}
   d565a:	4604      	mov	r4, r0
   d565c:	4616      	mov	r6, r2
   d565e:	460d      	mov	r5, r1
    releaseBuffer();
   d5660:	f7ff ffe8 	bl	d5634 <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d5664:	2300      	movs	r3, #0
    _buffer = buffer;
   d5666:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5668:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d566a:	b12e      	cbz	r6, d5678 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d566c:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d566e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5670:	3800      	subs	r0, #0
   d5672:	bf18      	it	ne
   d5674:	2001      	movne	r0, #1
   d5676:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d5678:	2d00      	cmp	r5, #0
   d567a:	d0f8      	beq.n	d566e <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d567c:	4628      	mov	r0, r5
   d567e:	f7fe fd08 	bl	d4092 <_Znaj>
        _buffer_allocated = true;
   d5682:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d5684:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d5686:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d568a:	2800      	cmp	r0, #0
   d568c:	d0ef      	beq.n	d566e <_ZN3UDP9setBufferEjPh+0x16>
   d568e:	e7ed      	b.n	d566c <_ZN3UDP9setBufferEjPh+0x14>

000d5690 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5692:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d5694:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5696:	4605      	mov	r5, r0
   d5698:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d569a:	b91a      	cbnz	r2, d56a4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d569c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d569e:	b109      	cbz	r1, d56a4 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d56a0:	f7ff ffda 	bl	d5658 <_ZN3UDP9setBufferEjPh>
   d56a4:	3404      	adds	r4, #4
   d56a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d56a8:	f105 0620 	add.w	r6, r5, #32
   d56ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d56ae:	6823      	ldr	r3, [r4, #0]
   d56b0:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d56b2:	2300      	movs	r3, #0
}
   d56b4:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d56b6:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d56b8:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d56ba:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d56bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d56be <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d56be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d56c0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d56c2:	4604      	mov	r4, r0
   d56c4:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d56c6:	b92a      	cbnz	r2, d56d4 <_ZN3UDP11parsePacketEm+0x16>
   d56c8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d56ca:	b119      	cbz	r1, d56d4 <_ZN3UDP11parsePacketEm+0x16>
   d56cc:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d56ce:	f7ff ffc3 	bl	d5658 <_ZN3UDP9setBufferEjPh>
   d56d2:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d56d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d56d6:	2200      	movs	r2, #0
   d56d8:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d56da:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d56dc:	b141      	cbz	r1, d56f0 <_ZN3UDP11parsePacketEm+0x32>
   d56de:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d56e0:	b132      	cbz	r2, d56f0 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d56e2:	6820      	ldr	r0, [r4, #0]
   d56e4:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d56e6:	4620      	mov	r0, r4
   d56e8:	47a8      	blx	r5
        if (result > 0) {
   d56ea:	2800      	cmp	r0, #0
            _total = result;
   d56ec:	bfc8      	it	gt
   d56ee:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d56f0:	6823      	ldr	r3, [r4, #0]
   d56f2:	691b      	ldr	r3, [r3, #16]
   d56f4:	4620      	mov	r0, r4
}
   d56f6:	b003      	add	sp, #12
   d56f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d56fc:	4718      	bx	r3

000d56fe <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d56fe:	4770      	bx	lr

000d5700 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5700:	7441      	strb	r1, [r0, #17]
}
   d5702:	4770      	bx	lr

000d5704 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d5704:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d5706:	7c00      	ldrb	r0, [r0, #16]
   d5708:	f7ff f900 	bl	d490c <hal_usart_available_data_for_write>
}
   d570c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5710:	bd08      	pop	{r3, pc}

000d5712 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5712:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d5714:	7c00      	ldrb	r0, [r0, #16]
   d5716:	f7ff f8d1 	bl	d48bc <hal_usart_available>
}
   d571a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d571e:	bd08      	pop	{r3, pc}

000d5720 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5720:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d5722:	7c00      	ldrb	r0, [r0, #16]
   d5724:	f7ff f8da 	bl	d48dc <hal_usart_peek>
}
   d5728:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d572c:	bd08      	pop	{r3, pc}

000d572e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d572e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5730:	7c00      	ldrb	r0, [r0, #16]
   d5732:	f7ff f8cb 	bl	d48cc <hal_usart_read>
}
   d5736:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d573a:	bd08      	pop	{r3, pc}

000d573c <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d573c:	7c00      	ldrb	r0, [r0, #16]
   d573e:	f7ff b8d5 	b.w	d48ec <hal_usart_flush>

000d5742 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5742:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5744:	7c45      	ldrb	r5, [r0, #17]
{
   d5746:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5748:	b12d      	cbz	r5, d5756 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d574a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d574c:	b003      	add	sp, #12
   d574e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5752:	f7ff b8ab 	b.w	d48ac <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5756:	7c00      	ldrb	r0, [r0, #16]
   d5758:	9101      	str	r1, [sp, #4]
   d575a:	f7ff f8d7 	bl	d490c <hal_usart_available_data_for_write>
   d575e:	2800      	cmp	r0, #0
   d5760:	9901      	ldr	r1, [sp, #4]
   d5762:	dcf2      	bgt.n	d574a <_ZN11USARTSerial5writeEh+0x8>
}
   d5764:	4628      	mov	r0, r5
   d5766:	b003      	add	sp, #12
   d5768:	bd30      	pop	{r4, r5, pc}

000d576a <_ZN11USARTSerialD0Ev>:
   d576a:	b510      	push	{r4, lr}
   d576c:	2114      	movs	r1, #20
   d576e:	4604      	mov	r4, r0
   d5770:	f000 fa5b 	bl	d5c2a <_ZdlPvj>
   d5774:	4620      	mov	r0, r4
   d5776:	bd10      	pop	{r4, pc}

000d5778 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5778:	b510      	push	{r4, lr}
   d577a:	f04f 0c00 	mov.w	ip, #0
   d577e:	4604      	mov	r4, r0
   d5780:	4608      	mov	r0, r1
   d5782:	4611      	mov	r1, r2
   d5784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5788:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d578c:	4a04      	ldr	r2, [pc, #16]	; (d57a0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d578e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5790:	2201      	movs	r2, #1
  _serial = serial;
   d5792:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5794:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d5796:	461a      	mov	r2, r3
   d5798:	f7ff f880 	bl	d489c <hal_usart_init>
}
   d579c:	4620      	mov	r0, r4
   d579e:	bd10      	pop	{r4, pc}
   d57a0:	000d6270 	.word	0x000d6270

000d57a4 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d57a4:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d57a6:	4c0e      	ldr	r4, [pc, #56]	; (d57e0 <_Z22__fetch_global_Serial1v+0x3c>)
   d57a8:	7821      	ldrb	r1, [r4, #0]
   d57aa:	f3bf 8f5b 	dmb	ish
   d57ae:	f011 0101 	ands.w	r1, r1, #1
   d57b2:	d112      	bne.n	d57da <_Z22__fetch_global_Serial1v+0x36>
   d57b4:	4620      	mov	r0, r4
   d57b6:	9101      	str	r1, [sp, #4]
   d57b8:	f7fe fc6f 	bl	d409a <__cxa_guard_acquire>
   d57bc:	9901      	ldr	r1, [sp, #4]
   d57be:	b160      	cbz	r0, d57da <_Z22__fetch_global_Serial1v+0x36>
   d57c0:	4a08      	ldr	r2, [pc, #32]	; (d57e4 <_Z22__fetch_global_Serial1v+0x40>)
   d57c2:	4b09      	ldr	r3, [pc, #36]	; (d57e8 <_Z22__fetch_global_Serial1v+0x44>)
   d57c4:	4809      	ldr	r0, [pc, #36]	; (d57ec <_Z22__fetch_global_Serial1v+0x48>)
   d57c6:	f7ff ffd7 	bl	d5778 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d57ca:	4620      	mov	r0, r4
   d57cc:	f7fe fc6a 	bl	d40a4 <__cxa_guard_release>
   d57d0:	4a07      	ldr	r2, [pc, #28]	; (d57f0 <_Z22__fetch_global_Serial1v+0x4c>)
   d57d2:	4908      	ldr	r1, [pc, #32]	; (d57f4 <_Z22__fetch_global_Serial1v+0x50>)
   d57d4:	4805      	ldr	r0, [pc, #20]	; (d57ec <_Z22__fetch_global_Serial1v+0x48>)
   d57d6:	f000 fa23 	bl	d5c20 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d57da:	4804      	ldr	r0, [pc, #16]	; (d57ec <_Z22__fetch_global_Serial1v+0x48>)
   d57dc:	b002      	add	sp, #8
   d57de:	bd10      	pop	{r4, pc}
   d57e0:	2003e680 	.word	0x2003e680
   d57e4:	2003e684 	.word	0x2003e684
   d57e8:	2003e708 	.word	0x2003e708
   d57ec:	2003e78c 	.word	0x2003e78c
   d57f0:	2003e5c4 	.word	0x2003e5c4
   d57f4:	000d56ff 	.word	0x000d56ff

000d57f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d57f8:	7441      	strb	r1, [r0, #17]
}
   d57fa:	4770      	bx	lr

000d57fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d57fc:	4770      	bx	lr

000d57fe <_ZN9USBSerial4readEv>:
{
   d57fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5800:	2100      	movs	r1, #0
   d5802:	7c00      	ldrb	r0, [r0, #16]
   d5804:	f7ff f8aa 	bl	d495c <HAL_USB_USART_Receive_Data>
}
   d5808:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d580c:	bd08      	pop	{r3, pc}

000d580e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d580e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5810:	2101      	movs	r1, #1
   d5812:	7c00      	ldrb	r0, [r0, #16]
   d5814:	f7ff f8a2 	bl	d495c <HAL_USB_USART_Receive_Data>
}
   d5818:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d581c:	bd08      	pop	{r3, pc}

000d581e <_ZN9USBSerial17availableForWriteEv>:
{
   d581e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5820:	7c00      	ldrb	r0, [r0, #16]
   d5822:	f7ff f893 	bl	d494c <HAL_USB_USART_Available_Data_For_Write>
}
   d5826:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d582a:	bd08      	pop	{r3, pc}

000d582c <_ZN9USBSerial9availableEv>:
{
   d582c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d582e:	7c00      	ldrb	r0, [r0, #16]
   d5830:	f7ff f884 	bl	d493c <HAL_USB_USART_Available_Data>
}
   d5834:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5838:	bd08      	pop	{r3, pc}

000d583a <_ZN9USBSerial5writeEh>:
{
   d583a:	b513      	push	{r0, r1, r4, lr}
   d583c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d583e:	7c00      	ldrb	r0, [r0, #16]
{
   d5840:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5842:	f7ff f883 	bl	d494c <HAL_USB_USART_Available_Data_For_Write>
   d5846:	2800      	cmp	r0, #0
   d5848:	9901      	ldr	r1, [sp, #4]
   d584a:	dc01      	bgt.n	d5850 <_ZN9USBSerial5writeEh+0x16>
   d584c:	7c60      	ldrb	r0, [r4, #17]
   d584e:	b120      	cbz	r0, d585a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5850:	7c20      	ldrb	r0, [r4, #16]
   d5852:	f7ff f88b 	bl	d496c <HAL_USB_USART_Send_Data>
   d5856:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d585a:	b002      	add	sp, #8
   d585c:	bd10      	pop	{r4, pc}

000d585e <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d585e:	7c00      	ldrb	r0, [r0, #16]
   d5860:	f7ff b88c 	b.w	d497c <HAL_USB_USART_Flush_Data>

000d5864 <_ZN9USBSerialD0Ev>:
   d5864:	b510      	push	{r4, lr}
   d5866:	2114      	movs	r1, #20
   d5868:	4604      	mov	r4, r0
   d586a:	f000 f9de 	bl	d5c2a <_ZdlPvj>
   d586e:	4620      	mov	r0, r4
   d5870:	bd10      	pop	{r4, pc}
	...

000d5874 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5874:	b510      	push	{r4, lr}
   d5876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d587a:	4604      	mov	r4, r0
   d587c:	4608      	mov	r0, r1
   d587e:	2100      	movs	r1, #0
   d5880:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5884:	4b04      	ldr	r3, [pc, #16]	; (d5898 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5886:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5888:	2301      	movs	r3, #1
  _serial = serial;
   d588a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d588c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d588e:	4611      	mov	r1, r2
   d5890:	f7ff f844 	bl	d491c <HAL_USB_USART_Init>
}
   d5894:	4620      	mov	r0, r4
   d5896:	bd10      	pop	{r4, pc}
   d5898:	000d62a0 	.word	0x000d62a0

000d589c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d589c:	7c00      	ldrb	r0, [r0, #16]
   d589e:	2200      	movs	r2, #0
   d58a0:	f7ff b844 	b.w	d492c <HAL_USB_USART_Begin>

000d58a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d58a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d58a6:	2214      	movs	r2, #20
{
   d58a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d58aa:	2100      	movs	r1, #0
   d58ac:	f000 fbc2 	bl	d6034 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d58b0:	4620      	mov	r0, r4
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d58b4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58b6:	4c10      	ldr	r4, [pc, #64]	; (d58f8 <_Z16_fetch_usbserialv+0x44>)
{
   d58b8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d58ba:	a803      	add	r0, sp, #12
   d58bc:	f7ff fff2 	bl	d58a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d58c0:	7821      	ldrb	r1, [r4, #0]
   d58c2:	f3bf 8f5b 	dmb	ish
   d58c6:	f011 0101 	ands.w	r1, r1, #1
   d58ca:	d111      	bne.n	d58f0 <_Z16_fetch_usbserialv+0x3c>
   d58cc:	4620      	mov	r0, r4
   d58ce:	9101      	str	r1, [sp, #4]
   d58d0:	f7fe fbe3 	bl	d409a <__cxa_guard_acquire>
   d58d4:	9901      	ldr	r1, [sp, #4]
   d58d6:	b158      	cbz	r0, d58f0 <_Z16_fetch_usbserialv+0x3c>
   d58d8:	aa03      	add	r2, sp, #12
   d58da:	4808      	ldr	r0, [pc, #32]	; (d58fc <_Z16_fetch_usbserialv+0x48>)
   d58dc:	f7ff ffca 	bl	d5874 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d58e0:	4620      	mov	r0, r4
   d58e2:	f7fe fbdf 	bl	d40a4 <__cxa_guard_release>
   d58e6:	4a06      	ldr	r2, [pc, #24]	; (d5900 <_Z16_fetch_usbserialv+0x4c>)
   d58e8:	4906      	ldr	r1, [pc, #24]	; (d5904 <_Z16_fetch_usbserialv+0x50>)
   d58ea:	4804      	ldr	r0, [pc, #16]	; (d58fc <_Z16_fetch_usbserialv+0x48>)
   d58ec:	f000 f998 	bl	d5c20 <__aeabi_atexit>
	return _usbserial;
}
   d58f0:	4802      	ldr	r0, [pc, #8]	; (d58fc <_Z16_fetch_usbserialv+0x48>)
   d58f2:	b008      	add	sp, #32
   d58f4:	bd10      	pop	{r4, pc}
   d58f6:	bf00      	nop
   d58f8:	2003e7a0 	.word	0x2003e7a0
   d58fc:	2003e7a4 	.word	0x2003e7a4
   d5900:	2003e5c4 	.word	0x2003e5c4
   d5904:	000d57fd 	.word	0x000d57fd

000d5908 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5908:	2200      	movs	r2, #0
   d590a:	6840      	ldr	r0, [r0, #4]
   d590c:	4611      	mov	r1, r2
   d590e:	f7ff b889 	b.w	d4a24 <network_ready>

000d5912 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5912:	2200      	movs	r2, #0
   d5914:	6840      	ldr	r0, [r0, #4]
   d5916:	4611      	mov	r1, r2
   d5918:	f7ff b8a4 	b.w	d4a64 <network_listening>

000d591c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d591c:	2200      	movs	r2, #0
   d591e:	6840      	ldr	r0, [r0, #4]
   d5920:	4611      	mov	r1, r2
   d5922:	f7ff b8af 	b.w	d4a84 <network_get_listen_timeout>

000d5926 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5926:	6840      	ldr	r0, [r0, #4]
   d5928:	2200      	movs	r2, #0
   d592a:	f7ff b8a3 	b.w	d4a74 <network_set_listen_timeout>

000d592e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d592e:	6840      	ldr	r0, [r0, #4]
   d5930:	2200      	movs	r2, #0
   d5932:	f081 0101 	eor.w	r1, r1, #1
   d5936:	f7ff b88d 	b.w	d4a54 <network_listen>

000d593a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d593a:	2300      	movs	r3, #0
   d593c:	6840      	ldr	r0, [r0, #4]
   d593e:	461a      	mov	r2, r3
   d5940:	4619      	mov	r1, r3
   d5942:	f7ff b87f 	b.w	d4a44 <network_off>

000d5946 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5946:	2300      	movs	r3, #0
   d5948:	6840      	ldr	r0, [r0, #4]
   d594a:	461a      	mov	r2, r3
   d594c:	4619      	mov	r1, r3
   d594e:	f7ff b871 	b.w	d4a34 <network_on>

000d5952 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5952:	2200      	movs	r2, #0
   d5954:	6840      	ldr	r0, [r0, #4]
   d5956:	4611      	mov	r1, r2
   d5958:	f7ff b854 	b.w	d4a04 <network_connecting>

000d595c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d595c:	6840      	ldr	r0, [r0, #4]
   d595e:	2200      	movs	r2, #0
   d5960:	2102      	movs	r1, #2
   d5962:	f7ff b857 	b.w	d4a14 <network_disconnect>

000d5966 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5966:	2300      	movs	r3, #0
   d5968:	6840      	ldr	r0, [r0, #4]
   d596a:	461a      	mov	r2, r3
   d596c:	f7ff b842 	b.w	d49f4 <network_connect>

000d5970 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5970:	4b02      	ldr	r3, [pc, #8]	; (d597c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5972:	2204      	movs	r2, #4
   d5974:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5976:	4a02      	ldr	r2, [pc, #8]	; (d5980 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5978:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d597a:	4770      	bx	lr
   d597c:	2003e7b8 	.word	0x2003e7b8
   d5980:	000d62d0 	.word	0x000d62d0

000d5984 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d5984:	4b01      	ldr	r3, [pc, #4]	; (d598c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d5986:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5988:	4770      	bx	lr
   d598a:	bf00      	nop
   d598c:	2003e560 	.word	0x2003e560

000d5990 <serialEventRun>:
{
   d5990:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5992:	4b0b      	ldr	r3, [pc, #44]	; (d59c0 <serialEventRun+0x30>)
   d5994:	b143      	cbz	r3, d59a8 <serialEventRun+0x18>
   d5996:	f7ff ff8d 	bl	d58b4 <_Z16_fetch_usbserialv>
   d599a:	6803      	ldr	r3, [r0, #0]
   d599c:	691b      	ldr	r3, [r3, #16]
   d599e:	4798      	blx	r3
   d59a0:	2800      	cmp	r0, #0
   d59a2:	dd01      	ble.n	d59a8 <serialEventRun+0x18>
        serialEvent();
   d59a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d59a8:	4b06      	ldr	r3, [pc, #24]	; (d59c4 <serialEventRun+0x34>)
   d59aa:	b143      	cbz	r3, d59be <serialEventRun+0x2e>
   d59ac:	f7ff fefa 	bl	d57a4 <_Z22__fetch_global_Serial1v>
   d59b0:	6803      	ldr	r3, [r0, #0]
   d59b2:	691b      	ldr	r3, [r3, #16]
   d59b4:	4798      	blx	r3
   d59b6:	2800      	cmp	r0, #0
   d59b8:	dd01      	ble.n	d59be <serialEventRun+0x2e>
        serialEvent1();
   d59ba:	f3af 8000 	nop.w
}
   d59be:	bd08      	pop	{r3, pc}
	...

000d59c8 <_post_loop>:
{
   d59c8:	b508      	push	{r3, lr}
	serialEventRun();
   d59ca:	f7ff ffe1 	bl	d5990 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d59ce:	f7fe fe75 	bl	d46bc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d59d2:	4b01      	ldr	r3, [pc, #4]	; (d59d8 <_post_loop+0x10>)
   d59d4:	6018      	str	r0, [r3, #0]
}
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	2003e7d4 	.word	0x2003e7d4

000d59dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d59dc:	4802      	ldr	r0, [pc, #8]	; (d59e8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d59de:	4a03      	ldr	r2, [pc, #12]	; (d59ec <_Z33system_initialize_user_backup_ramv+0x10>)
   d59e0:	4903      	ldr	r1, [pc, #12]	; (d59f0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d59e2:	1a12      	subs	r2, r2, r0
   d59e4:	f000 bb18 	b.w	d6018 <memcpy>
   d59e8:	2003f400 	.word	0x2003f400
   d59ec:	2003f404 	.word	0x2003f404
   d59f0:	000d6330 	.word	0x000d6330

000d59f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d59f4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d59f6:	2300      	movs	r3, #0
   d59f8:	9300      	str	r3, [sp, #0]
   d59fa:	461a      	mov	r2, r3
   d59fc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a00:	f7fe ffde 	bl	d49c0 <system_ctrl_set_result>
}
   d5a04:	b003      	add	sp, #12
   d5a06:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a0c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5a0c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5a0e:	8843      	ldrh	r3, [r0, #2]
   d5a10:	2b0a      	cmp	r3, #10
   d5a12:	d008      	beq.n	d5a26 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5a14:	2b50      	cmp	r3, #80	; 0x50
   d5a16:	d10b      	bne.n	d5a30 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5a18:	4b09      	ldr	r3, [pc, #36]	; (d5a40 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5a1a:	681b      	ldr	r3, [r3, #0]
   d5a1c:	b14b      	cbz	r3, d5a32 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5a1e:	b003      	add	sp, #12
   d5a20:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5a24:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5a26:	f7ff ffe5 	bl	d59f4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5a2a:	b003      	add	sp, #12
   d5a2c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5a30:	2300      	movs	r3, #0
   d5a32:	9300      	str	r3, [sp, #0]
   d5a34:	461a      	mov	r2, r3
   d5a36:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5a3a:	f7fe ffc1 	bl	d49c0 <system_ctrl_set_result>
}
   d5a3e:	e7f4      	b.n	d5a2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5a40:	2003e7c4 	.word	0x2003e7c4

000d5a44 <module_user_init_hook>:
{
   d5a44:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5a46:	4c12      	ldr	r4, [pc, #72]	; (d5a90 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5a48:	4812      	ldr	r0, [pc, #72]	; (d5a94 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5a4a:	4d13      	ldr	r5, [pc, #76]	; (d5a98 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5a4c:	2100      	movs	r1, #0
   d5a4e:	f7ff f839 	bl	d4ac4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5a52:	6823      	ldr	r3, [r4, #0]
   d5a54:	42ab      	cmp	r3, r5
   d5a56:	4b11      	ldr	r3, [pc, #68]	; (d5a9c <module_user_init_hook+0x58>)
   d5a58:	bf0c      	ite	eq
   d5a5a:	2201      	moveq	r2, #1
   d5a5c:	2200      	movne	r2, #0
   d5a5e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5a60:	d002      	beq.n	d5a68 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5a62:	f7ff ffbb 	bl	d59dc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5a66:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5a68:	f7fe fe20 	bl	d46ac <HAL_RNG_GetRandomNumber>
   d5a6c:	4604      	mov	r4, r0
    srand(seed);
   d5a6e:	f000 fae9 	bl	d6044 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5a72:	4b0b      	ldr	r3, [pc, #44]	; (d5aa0 <module_user_init_hook+0x5c>)
   d5a74:	b113      	cbz	r3, d5a7c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5a76:	4620      	mov	r0, r4
   d5a78:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5a7c:	2100      	movs	r1, #0
   d5a7e:	4808      	ldr	r0, [pc, #32]	; (d5aa0 <module_user_init_hook+0x5c>)
   d5a80:	f7fe ffa8 	bl	d49d4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d5a84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5a88:	4806      	ldr	r0, [pc, #24]	; (d5aa4 <module_user_init_hook+0x60>)
   d5a8a:	2100      	movs	r1, #0
   d5a8c:	f7fe bf8e 	b.w	d49ac <system_ctrl_set_app_request_handler>
   d5a90:	2003f400 	.word	0x2003f400
   d5a94:	000d5985 	.word	0x000d5985
   d5a98:	9a271c1e 	.word	0x9a271c1e
   d5a9c:	2003e7c0 	.word	0x2003e7c0
   d5aa0:	00000000 	.word	0x00000000
   d5aa4:	000d5a0d 	.word	0x000d5a0d

000d5aa8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5aa8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d5aaa:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d5aac:	d902      	bls.n	d5ab4 <pinAvailable+0xc>
    return false;
   d5aae:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d5ab0:	b002      	add	sp, #8
   d5ab2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d5ab4:	f1a0 030b 	sub.w	r3, r0, #11
   d5ab8:	2b02      	cmp	r3, #2
   d5aba:	d81a      	bhi.n	d5af2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d5abc:	4c17      	ldr	r4, [pc, #92]	; (d5b1c <pinAvailable+0x74>)
   d5abe:	7821      	ldrb	r1, [r4, #0]
   d5ac0:	f3bf 8f5b 	dmb	ish
   d5ac4:	f011 0101 	ands.w	r1, r1, #1
   d5ac8:	d10b      	bne.n	d5ae2 <pinAvailable+0x3a>
   d5aca:	4620      	mov	r0, r4
   d5acc:	9101      	str	r1, [sp, #4]
   d5ace:	f7fe fae4 	bl	d409a <__cxa_guard_acquire>
   d5ad2:	9901      	ldr	r1, [sp, #4]
   d5ad4:	b128      	cbz	r0, d5ae2 <pinAvailable+0x3a>
   d5ad6:	4812      	ldr	r0, [pc, #72]	; (d5b20 <pinAvailable+0x78>)
   d5ad8:	f7ff fa7a 	bl	d4fd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d5adc:	4620      	mov	r0, r4
   d5ade:	f7fe fae1 	bl	d40a4 <__cxa_guard_release>
   d5ae2:	4b0f      	ldr	r3, [pc, #60]	; (d5b20 <pinAvailable+0x78>)
   d5ae4:	7818      	ldrb	r0, [r3, #0]
   d5ae6:	f7fe fed1 	bl	d488c <hal_spi_is_enabled>
   d5aea:	2800      	cmp	r0, #0
   d5aec:	d1df      	bne.n	d5aae <pinAvailable+0x6>
  return true; // 'pin' is available
   d5aee:	2001      	movs	r0, #1
   d5af0:	e7de      	b.n	d5ab0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d5af2:	2801      	cmp	r0, #1
   d5af4:	d809      	bhi.n	d5b0a <pinAvailable+0x62>
   d5af6:	f000 f86b 	bl	d5bd0 <_Z19__fetch_global_Wirev>
   d5afa:	2100      	movs	r1, #0
   d5afc:	7c00      	ldrb	r0, [r0, #16]
   d5afe:	f7fe fe45 	bl	d478c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d5b02:	f080 0001 	eor.w	r0, r0, #1
   d5b06:	b2c0      	uxtb	r0, r0
   d5b08:	e7d2      	b.n	d5ab0 <pinAvailable+0x8>
   d5b0a:	3809      	subs	r0, #9
   d5b0c:	2801      	cmp	r0, #1
   d5b0e:	d8ee      	bhi.n	d5aee <pinAvailable+0x46>
   d5b10:	f7ff fe48 	bl	d57a4 <_Z22__fetch_global_Serial1v>
   d5b14:	7c00      	ldrb	r0, [r0, #16]
   d5b16:	f7fe fef1 	bl	d48fc <hal_usart_is_enabled>
   d5b1a:	e7f2      	b.n	d5b02 <pinAvailable+0x5a>
   d5b1c:	2003e7c8 	.word	0x2003e7c8
   d5b20:	2003e7cc 	.word	0x2003e7cc

000d5b24 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b24:	2823      	cmp	r0, #35	; 0x23
{
   d5b26:	b538      	push	{r3, r4, r5, lr}
   d5b28:	4604      	mov	r4, r0
   d5b2a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5b2c:	d80a      	bhi.n	d5b44 <pinMode+0x20>
   d5b2e:	29ff      	cmp	r1, #255	; 0xff
   d5b30:	d008      	beq.n	d5b44 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5b32:	f7ff ffb9 	bl	d5aa8 <pinAvailable>
   d5b36:	b128      	cbz	r0, d5b44 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5b38:	4629      	mov	r1, r5
   d5b3a:	4620      	mov	r0, r4
}
   d5b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5b40:	f7fe bdc4 	b.w	d46cc <HAL_Pin_Mode>
}
   d5b44:	bd38      	pop	{r3, r4, r5, pc}

000d5b46 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5b46:	b538      	push	{r3, r4, r5, lr}
   d5b48:	4604      	mov	r4, r0
   d5b4a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5b4c:	f7fe fdc6 	bl	d46dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5b50:	28ff      	cmp	r0, #255	; 0xff
   d5b52:	d010      	beq.n	d5b76 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5b54:	2806      	cmp	r0, #6
   d5b56:	d804      	bhi.n	d5b62 <digitalWrite+0x1c>
   d5b58:	234d      	movs	r3, #77	; 0x4d
   d5b5a:	fa23 f000 	lsr.w	r0, r3, r0
   d5b5e:	07c3      	lsls	r3, r0, #31
   d5b60:	d409      	bmi.n	d5b76 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5b62:	4620      	mov	r0, r4
   d5b64:	f7ff ffa0 	bl	d5aa8 <pinAvailable>
   d5b68:	b128      	cbz	r0, d5b76 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5b6a:	4629      	mov	r1, r5
   d5b6c:	4620      	mov	r0, r4
}
   d5b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5b72:	f7fe bdbb 	b.w	d46ec <HAL_GPIO_Write>
}
   d5b76:	bd38      	pop	{r3, r4, r5, pc}

000d5b78 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5b78:	b510      	push	{r4, lr}
   d5b7a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5b7c:	f7fe fdae 	bl	d46dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d5b80:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d5b82:	b2db      	uxtb	r3, r3
   d5b84:	2b01      	cmp	r3, #1
   d5b86:	d908      	bls.n	d5b9a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5b88:	4620      	mov	r0, r4
   d5b8a:	f7ff ff8d 	bl	d5aa8 <pinAvailable>
   d5b8e:	b120      	cbz	r0, d5b9a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5b90:	4620      	mov	r0, r4
}
   d5b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5b96:	f7fe bdb1 	b.w	d46fc <HAL_GPIO_Read>
}
   d5b9a:	2000      	movs	r0, #0
   d5b9c:	bd10      	pop	{r4, pc}
	...

000d5ba0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5ba0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5ba2:	2300      	movs	r3, #0
   d5ba4:	2520      	movs	r5, #32
   d5ba6:	8043      	strh	r3, [r0, #2]
   d5ba8:	2314      	movs	r3, #20
{
   d5baa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d5bac:	8003      	strh	r3, [r0, #0]
   d5bae:	6085      	str	r5, [r0, #8]
   d5bb0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5bb2:	4906      	ldr	r1, [pc, #24]	; (d5bcc <_Z17acquireWireBufferv+0x2c>)
   d5bb4:	4628      	mov	r0, r5
   d5bb6:	f000 f83a 	bl	d5c2e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5bba:	4904      	ldr	r1, [pc, #16]	; (d5bcc <_Z17acquireWireBufferv+0x2c>)
	};
   d5bbc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d5bbe:	4628      	mov	r0, r5
   d5bc0:	f000 f835 	bl	d5c2e <_ZnajRKSt9nothrow_t>
	};
   d5bc4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d5bc6:	4620      	mov	r0, r4
   d5bc8:	bd38      	pop	{r3, r4, r5, pc}
   d5bca:	bf00      	nop
   d5bcc:	000d62fc 	.word	0x000d62fc

000d5bd0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5bd0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5bd2:	4d0f      	ldr	r5, [pc, #60]	; (d5c10 <_Z19__fetch_global_Wirev+0x40>)
   d5bd4:	7829      	ldrb	r1, [r5, #0]
   d5bd6:	f3bf 8f5b 	dmb	ish
   d5bda:	f011 0401 	ands.w	r4, r1, #1
{
   d5bde:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5be0:	d113      	bne.n	d5c0a <_Z19__fetch_global_Wirev+0x3a>
   d5be2:	4628      	mov	r0, r5
   d5be4:	f7fe fa59 	bl	d409a <__cxa_guard_acquire>
   d5be8:	b178      	cbz	r0, d5c0a <_Z19__fetch_global_Wirev+0x3a>
   d5bea:	a801      	add	r0, sp, #4
   d5bec:	f7ff ffd8 	bl	d5ba0 <_Z17acquireWireBufferv>
   d5bf0:	aa01      	add	r2, sp, #4
   d5bf2:	4621      	mov	r1, r4
   d5bf4:	4807      	ldr	r0, [pc, #28]	; (d5c14 <_Z19__fetch_global_Wirev+0x44>)
   d5bf6:	f7ff f801 	bl	d4bfc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5bfa:	4628      	mov	r0, r5
   d5bfc:	f7fe fa52 	bl	d40a4 <__cxa_guard_release>
   d5c00:	4a05      	ldr	r2, [pc, #20]	; (d5c18 <_Z19__fetch_global_Wirev+0x48>)
   d5c02:	4906      	ldr	r1, [pc, #24]	; (d5c1c <_Z19__fetch_global_Wirev+0x4c>)
   d5c04:	4803      	ldr	r0, [pc, #12]	; (d5c14 <_Z19__fetch_global_Wirev+0x44>)
   d5c06:	f000 f80b 	bl	d5c20 <__aeabi_atexit>
	return wire;
}
   d5c0a:	4802      	ldr	r0, [pc, #8]	; (d5c14 <_Z19__fetch_global_Wirev+0x44>)
   d5c0c:	b007      	add	sp, #28
   d5c0e:	bd30      	pop	{r4, r5, pc}
   d5c10:	2003e7d8 	.word	0x2003e7d8
   d5c14:	2003e7dc 	.word	0x2003e7dc
   d5c18:	2003e5c4 	.word	0x2003e5c4
   d5c1c:	000d4ba5 	.word	0x000d4ba5

000d5c20 <__aeabi_atexit>:
   d5c20:	460b      	mov	r3, r1
   d5c22:	4601      	mov	r1, r0
   d5c24:	4618      	mov	r0, r3
   d5c26:	f000 b9e9 	b.w	d5ffc <__cxa_atexit>

000d5c2a <_ZdlPvj>:
   d5c2a:	f7fe ba34 	b.w	d4096 <_ZdlPv>

000d5c2e <_ZnajRKSt9nothrow_t>:
   d5c2e:	f7fe ba30 	b.w	d4092 <_Znaj>
	...

000d5c34 <__aeabi_drsub>:
   d5c34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5c38:	e002      	b.n	d5c40 <__adddf3>
   d5c3a:	bf00      	nop

000d5c3c <__aeabi_dsub>:
   d5c3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5c40 <__adddf3>:
   d5c40:	b530      	push	{r4, r5, lr}
   d5c42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5c46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d5c4a:	ea94 0f05 	teq	r4, r5
   d5c4e:	bf08      	it	eq
   d5c50:	ea90 0f02 	teqeq	r0, r2
   d5c54:	bf1f      	itttt	ne
   d5c56:	ea54 0c00 	orrsne.w	ip, r4, r0
   d5c5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d5c5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5c62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5c66:	f000 80e2 	beq.w	d5e2e <__adddf3+0x1ee>
   d5c6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5c6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5c72:	bfb8      	it	lt
   d5c74:	426d      	neglt	r5, r5
   d5c76:	dd0c      	ble.n	d5c92 <__adddf3+0x52>
   d5c78:	442c      	add	r4, r5
   d5c7a:	ea80 0202 	eor.w	r2, r0, r2
   d5c7e:	ea81 0303 	eor.w	r3, r1, r3
   d5c82:	ea82 0000 	eor.w	r0, r2, r0
   d5c86:	ea83 0101 	eor.w	r1, r3, r1
   d5c8a:	ea80 0202 	eor.w	r2, r0, r2
   d5c8e:	ea81 0303 	eor.w	r3, r1, r3
   d5c92:	2d36      	cmp	r5, #54	; 0x36
   d5c94:	bf88      	it	hi
   d5c96:	bd30      	pophi	{r4, r5, pc}
   d5c98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5c9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5ca0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5ca4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5ca8:	d002      	beq.n	d5cb0 <__adddf3+0x70>
   d5caa:	4240      	negs	r0, r0
   d5cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5cb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d5cb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5cb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5cbc:	d002      	beq.n	d5cc4 <__adddf3+0x84>
   d5cbe:	4252      	negs	r2, r2
   d5cc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d5cc4:	ea94 0f05 	teq	r4, r5
   d5cc8:	f000 80a7 	beq.w	d5e1a <__adddf3+0x1da>
   d5ccc:	f1a4 0401 	sub.w	r4, r4, #1
   d5cd0:	f1d5 0e20 	rsbs	lr, r5, #32
   d5cd4:	db0d      	blt.n	d5cf2 <__adddf3+0xb2>
   d5cd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5cda:	fa22 f205 	lsr.w	r2, r2, r5
   d5cde:	1880      	adds	r0, r0, r2
   d5ce0:	f141 0100 	adc.w	r1, r1, #0
   d5ce4:	fa03 f20e 	lsl.w	r2, r3, lr
   d5ce8:	1880      	adds	r0, r0, r2
   d5cea:	fa43 f305 	asr.w	r3, r3, r5
   d5cee:	4159      	adcs	r1, r3
   d5cf0:	e00e      	b.n	d5d10 <__adddf3+0xd0>
   d5cf2:	f1a5 0520 	sub.w	r5, r5, #32
   d5cf6:	f10e 0e20 	add.w	lr, lr, #32
   d5cfa:	2a01      	cmp	r2, #1
   d5cfc:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5d00:	bf28      	it	cs
   d5d02:	f04c 0c02 	orrcs.w	ip, ip, #2
   d5d06:	fa43 f305 	asr.w	r3, r3, r5
   d5d0a:	18c0      	adds	r0, r0, r3
   d5d0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5d14:	d507      	bpl.n	d5d26 <__adddf3+0xe6>
   d5d16:	f04f 0e00 	mov.w	lr, #0
   d5d1a:	f1dc 0c00 	rsbs	ip, ip, #0
   d5d1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5d22:	eb6e 0101 	sbc.w	r1, lr, r1
   d5d26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d5d2a:	d31b      	bcc.n	d5d64 <__adddf3+0x124>
   d5d2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5d30:	d30c      	bcc.n	d5d4c <__adddf3+0x10c>
   d5d32:	0849      	lsrs	r1, r1, #1
   d5d34:	ea5f 0030 	movs.w	r0, r0, rrx
   d5d38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d5d3c:	f104 0401 	add.w	r4, r4, #1
   d5d40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5d44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5d48:	f080 809a 	bcs.w	d5e80 <__adddf3+0x240>
   d5d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5d50:	bf08      	it	eq
   d5d52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5d56:	f150 0000 	adcs.w	r0, r0, #0
   d5d5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5d5e:	ea41 0105 	orr.w	r1, r1, r5
   d5d62:	bd30      	pop	{r4, r5, pc}
   d5d64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5d68:	4140      	adcs	r0, r0
   d5d6a:	eb41 0101 	adc.w	r1, r1, r1
   d5d6e:	3c01      	subs	r4, #1
   d5d70:	bf28      	it	cs
   d5d72:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5d76:	d2e9      	bcs.n	d5d4c <__adddf3+0x10c>
   d5d78:	f091 0f00 	teq	r1, #0
   d5d7c:	bf04      	itt	eq
   d5d7e:	4601      	moveq	r1, r0
   d5d80:	2000      	moveq	r0, #0
   d5d82:	fab1 f381 	clz	r3, r1
   d5d86:	bf08      	it	eq
   d5d88:	3320      	addeq	r3, #32
   d5d8a:	f1a3 030b 	sub.w	r3, r3, #11
   d5d8e:	f1b3 0220 	subs.w	r2, r3, #32
   d5d92:	da0c      	bge.n	d5dae <__adddf3+0x16e>
   d5d94:	320c      	adds	r2, #12
   d5d96:	dd08      	ble.n	d5daa <__adddf3+0x16a>
   d5d98:	f102 0c14 	add.w	ip, r2, #20
   d5d9c:	f1c2 020c 	rsb	r2, r2, #12
   d5da0:	fa01 f00c 	lsl.w	r0, r1, ip
   d5da4:	fa21 f102 	lsr.w	r1, r1, r2
   d5da8:	e00c      	b.n	d5dc4 <__adddf3+0x184>
   d5daa:	f102 0214 	add.w	r2, r2, #20
   d5dae:	bfd8      	it	le
   d5db0:	f1c2 0c20 	rsble	ip, r2, #32
   d5db4:	fa01 f102 	lsl.w	r1, r1, r2
   d5db8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5dbc:	bfdc      	itt	le
   d5dbe:	ea41 010c 	orrle.w	r1, r1, ip
   d5dc2:	4090      	lslle	r0, r2
   d5dc4:	1ae4      	subs	r4, r4, r3
   d5dc6:	bfa2      	ittt	ge
   d5dc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5dcc:	4329      	orrge	r1, r5
   d5dce:	bd30      	popge	{r4, r5, pc}
   d5dd0:	ea6f 0404 	mvn.w	r4, r4
   d5dd4:	3c1f      	subs	r4, #31
   d5dd6:	da1c      	bge.n	d5e12 <__adddf3+0x1d2>
   d5dd8:	340c      	adds	r4, #12
   d5dda:	dc0e      	bgt.n	d5dfa <__adddf3+0x1ba>
   d5ddc:	f104 0414 	add.w	r4, r4, #20
   d5de0:	f1c4 0220 	rsb	r2, r4, #32
   d5de4:	fa20 f004 	lsr.w	r0, r0, r4
   d5de8:	fa01 f302 	lsl.w	r3, r1, r2
   d5dec:	ea40 0003 	orr.w	r0, r0, r3
   d5df0:	fa21 f304 	lsr.w	r3, r1, r4
   d5df4:	ea45 0103 	orr.w	r1, r5, r3
   d5df8:	bd30      	pop	{r4, r5, pc}
   d5dfa:	f1c4 040c 	rsb	r4, r4, #12
   d5dfe:	f1c4 0220 	rsb	r2, r4, #32
   d5e02:	fa20 f002 	lsr.w	r0, r0, r2
   d5e06:	fa01 f304 	lsl.w	r3, r1, r4
   d5e0a:	ea40 0003 	orr.w	r0, r0, r3
   d5e0e:	4629      	mov	r1, r5
   d5e10:	bd30      	pop	{r4, r5, pc}
   d5e12:	fa21 f004 	lsr.w	r0, r1, r4
   d5e16:	4629      	mov	r1, r5
   d5e18:	bd30      	pop	{r4, r5, pc}
   d5e1a:	f094 0f00 	teq	r4, #0
   d5e1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5e22:	bf06      	itte	eq
   d5e24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5e28:	3401      	addeq	r4, #1
   d5e2a:	3d01      	subne	r5, #1
   d5e2c:	e74e      	b.n	d5ccc <__adddf3+0x8c>
   d5e2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e32:	bf18      	it	ne
   d5e34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5e38:	d029      	beq.n	d5e8e <__adddf3+0x24e>
   d5e3a:	ea94 0f05 	teq	r4, r5
   d5e3e:	bf08      	it	eq
   d5e40:	ea90 0f02 	teqeq	r0, r2
   d5e44:	d005      	beq.n	d5e52 <__adddf3+0x212>
   d5e46:	ea54 0c00 	orrs.w	ip, r4, r0
   d5e4a:	bf04      	itt	eq
   d5e4c:	4619      	moveq	r1, r3
   d5e4e:	4610      	moveq	r0, r2
   d5e50:	bd30      	pop	{r4, r5, pc}
   d5e52:	ea91 0f03 	teq	r1, r3
   d5e56:	bf1e      	ittt	ne
   d5e58:	2100      	movne	r1, #0
   d5e5a:	2000      	movne	r0, #0
   d5e5c:	bd30      	popne	{r4, r5, pc}
   d5e5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5e62:	d105      	bne.n	d5e70 <__adddf3+0x230>
   d5e64:	0040      	lsls	r0, r0, #1
   d5e66:	4149      	adcs	r1, r1
   d5e68:	bf28      	it	cs
   d5e6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5e6e:	bd30      	pop	{r4, r5, pc}
   d5e70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5e74:	bf3c      	itt	cc
   d5e76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5e7a:	bd30      	popcc	{r4, r5, pc}
   d5e7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5e80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5e84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5e88:	f04f 0000 	mov.w	r0, #0
   d5e8c:	bd30      	pop	{r4, r5, pc}
   d5e8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5e92:	bf1a      	itte	ne
   d5e94:	4619      	movne	r1, r3
   d5e96:	4610      	movne	r0, r2
   d5e98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5e9c:	bf1c      	itt	ne
   d5e9e:	460b      	movne	r3, r1
   d5ea0:	4602      	movne	r2, r0
   d5ea2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5ea6:	bf06      	itte	eq
   d5ea8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5eac:	ea91 0f03 	teqeq	r1, r3
   d5eb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5eb4:	bd30      	pop	{r4, r5, pc}
   d5eb6:	bf00      	nop

000d5eb8 <__aeabi_ui2d>:
   d5eb8:	f090 0f00 	teq	r0, #0
   d5ebc:	bf04      	itt	eq
   d5ebe:	2100      	moveq	r1, #0
   d5ec0:	4770      	bxeq	lr
   d5ec2:	b530      	push	{r4, r5, lr}
   d5ec4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ec8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5ecc:	f04f 0500 	mov.w	r5, #0
   d5ed0:	f04f 0100 	mov.w	r1, #0
   d5ed4:	e750      	b.n	d5d78 <__adddf3+0x138>
   d5ed6:	bf00      	nop

000d5ed8 <__aeabi_i2d>:
   d5ed8:	f090 0f00 	teq	r0, #0
   d5edc:	bf04      	itt	eq
   d5ede:	2100      	moveq	r1, #0
   d5ee0:	4770      	bxeq	lr
   d5ee2:	b530      	push	{r4, r5, lr}
   d5ee4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ee8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5eec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ef0:	bf48      	it	mi
   d5ef2:	4240      	negmi	r0, r0
   d5ef4:	f04f 0100 	mov.w	r1, #0
   d5ef8:	e73e      	b.n	d5d78 <__adddf3+0x138>
   d5efa:	bf00      	nop

000d5efc <__aeabi_f2d>:
   d5efc:	0042      	lsls	r2, r0, #1
   d5efe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5f02:	ea4f 0131 	mov.w	r1, r1, rrx
   d5f06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5f0a:	bf1f      	itttt	ne
   d5f0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5f10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5f14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5f18:	4770      	bxne	lr
   d5f1a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5f1e:	bf08      	it	eq
   d5f20:	4770      	bxeq	lr
   d5f22:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5f26:	bf04      	itt	eq
   d5f28:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5f2c:	4770      	bxeq	lr
   d5f2e:	b530      	push	{r4, r5, lr}
   d5f30:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5f34:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5f38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5f3c:	e71c      	b.n	d5d78 <__adddf3+0x138>
   d5f3e:	bf00      	nop

000d5f40 <__aeabi_ul2d>:
   d5f40:	ea50 0201 	orrs.w	r2, r0, r1
   d5f44:	bf08      	it	eq
   d5f46:	4770      	bxeq	lr
   d5f48:	b530      	push	{r4, r5, lr}
   d5f4a:	f04f 0500 	mov.w	r5, #0
   d5f4e:	e00a      	b.n	d5f66 <__aeabi_l2d+0x16>

000d5f50 <__aeabi_l2d>:
   d5f50:	ea50 0201 	orrs.w	r2, r0, r1
   d5f54:	bf08      	it	eq
   d5f56:	4770      	bxeq	lr
   d5f58:	b530      	push	{r4, r5, lr}
   d5f5a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5f5e:	d502      	bpl.n	d5f66 <__aeabi_l2d+0x16>
   d5f60:	4240      	negs	r0, r0
   d5f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5f66:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5f6a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5f6e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5f72:	f43f aed8 	beq.w	d5d26 <__adddf3+0xe6>
   d5f76:	f04f 0203 	mov.w	r2, #3
   d5f7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f7e:	bf18      	it	ne
   d5f80:	3203      	addne	r2, #3
   d5f82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5f86:	bf18      	it	ne
   d5f88:	3203      	addne	r2, #3
   d5f8a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5f8e:	f1c2 0320 	rsb	r3, r2, #32
   d5f92:	fa00 fc03 	lsl.w	ip, r0, r3
   d5f96:	fa20 f002 	lsr.w	r0, r0, r2
   d5f9a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5f9e:	ea40 000e 	orr.w	r0, r0, lr
   d5fa2:	fa21 f102 	lsr.w	r1, r1, r2
   d5fa6:	4414      	add	r4, r2
   d5fa8:	e6bd      	b.n	d5d26 <__adddf3+0xe6>
   d5faa:	bf00      	nop

000d5fac <__aeabi_d2iz>:
   d5fac:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d5fb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d5fb4:	d215      	bcs.n	d5fe2 <__aeabi_d2iz+0x36>
   d5fb6:	d511      	bpl.n	d5fdc <__aeabi_d2iz+0x30>
   d5fb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d5fbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d5fc0:	d912      	bls.n	d5fe8 <__aeabi_d2iz+0x3c>
   d5fc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d5fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d5fca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d5fce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5fd2:	fa23 f002 	lsr.w	r0, r3, r2
   d5fd6:	bf18      	it	ne
   d5fd8:	4240      	negne	r0, r0
   d5fda:	4770      	bx	lr
   d5fdc:	f04f 0000 	mov.w	r0, #0
   d5fe0:	4770      	bx	lr
   d5fe2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d5fe6:	d105      	bne.n	d5ff4 <__aeabi_d2iz+0x48>
   d5fe8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d5fec:	bf08      	it	eq
   d5fee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d5ff2:	4770      	bx	lr
   d5ff4:	f04f 0000 	mov.w	r0, #0
   d5ff8:	4770      	bx	lr
   d5ffa:	bf00      	nop

000d5ffc <__cxa_atexit>:
   d5ffc:	b510      	push	{r4, lr}
   d5ffe:	4c05      	ldr	r4, [pc, #20]	; (d6014 <__cxa_atexit+0x18>)
   d6000:	4613      	mov	r3, r2
   d6002:	b12c      	cbz	r4, d6010 <__cxa_atexit+0x14>
   d6004:	460a      	mov	r2, r1
   d6006:	4601      	mov	r1, r0
   d6008:	2002      	movs	r0, #2
   d600a:	f3af 8000 	nop.w
   d600e:	bd10      	pop	{r4, pc}
   d6010:	4620      	mov	r0, r4
   d6012:	e7fc      	b.n	d600e <__cxa_atexit+0x12>
   d6014:	00000000 	.word	0x00000000

000d6018 <memcpy>:
   d6018:	440a      	add	r2, r1
   d601a:	4291      	cmp	r1, r2
   d601c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d6020:	d100      	bne.n	d6024 <memcpy+0xc>
   d6022:	4770      	bx	lr
   d6024:	b510      	push	{r4, lr}
   d6026:	f811 4b01 	ldrb.w	r4, [r1], #1
   d602a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d602e:	4291      	cmp	r1, r2
   d6030:	d1f9      	bne.n	d6026 <memcpy+0xe>
   d6032:	bd10      	pop	{r4, pc}

000d6034 <memset>:
   d6034:	4402      	add	r2, r0
   d6036:	4603      	mov	r3, r0
   d6038:	4293      	cmp	r3, r2
   d603a:	d100      	bne.n	d603e <memset+0xa>
   d603c:	4770      	bx	lr
   d603e:	f803 1b01 	strb.w	r1, [r3], #1
   d6042:	e7f9      	b.n	d6038 <memset+0x4>

000d6044 <srand>:
   d6044:	b538      	push	{r3, r4, r5, lr}
   d6046:	4b0d      	ldr	r3, [pc, #52]	; (d607c <srand+0x38>)
   d6048:	681d      	ldr	r5, [r3, #0]
   d604a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d604c:	4604      	mov	r4, r0
   d604e:	b97b      	cbnz	r3, d6070 <srand+0x2c>
   d6050:	2018      	movs	r0, #24
   d6052:	f7fe fd1f 	bl	d4a94 <malloc>
   d6056:	4a0a      	ldr	r2, [pc, #40]	; (d6080 <srand+0x3c>)
   d6058:	4b0a      	ldr	r3, [pc, #40]	; (d6084 <srand+0x40>)
   d605a:	63a8      	str	r0, [r5, #56]	; 0x38
   d605c:	e9c0 2300 	strd	r2, r3, [r0]
   d6060:	4b09      	ldr	r3, [pc, #36]	; (d6088 <srand+0x44>)
   d6062:	6083      	str	r3, [r0, #8]
   d6064:	230b      	movs	r3, #11
   d6066:	8183      	strh	r3, [r0, #12]
   d6068:	2201      	movs	r2, #1
   d606a:	2300      	movs	r3, #0
   d606c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6070:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6072:	2200      	movs	r2, #0
   d6074:	611c      	str	r4, [r3, #16]
   d6076:	615a      	str	r2, [r3, #20]
   d6078:	bd38      	pop	{r3, r4, r5, pc}
   d607a:	bf00      	nop
   d607c:	2003e560 	.word	0x2003e560
   d6080:	abcd330e 	.word	0xabcd330e
   d6084:	e66d1234 	.word	0xe66d1234
   d6088:	0005deec 	.word	0x0005deec

000d608c <strcpy>:
   d608c:	4603      	mov	r3, r0
   d608e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6092:	f803 2b01 	strb.w	r2, [r3], #1
   d6096:	2a00      	cmp	r2, #0
   d6098:	d1f9      	bne.n	d608e <strcpy+0x2>
   d609a:	4770      	bx	lr

000d609c <strlen>:
   d609c:	4603      	mov	r3, r0
   d609e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d60a2:	2a00      	cmp	r2, #0
   d60a4:	d1fb      	bne.n	d609e <strlen+0x2>
   d60a6:	1a18      	subs	r0, r3, r0
   d60a8:	3801      	subs	r0, #1
   d60aa:	4770      	bx	lr

000d60ac <dynalib_user>:
   d60ac:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d60bc:	0000 0000 5241 4f47 204e 5049 2820 4844     ....ARGON IP (DH
   d60cc:	5043 3a29 0020 742f 756f 6863 4900 6d27     CP): ./touch.I'm
   d60dc:	7020 6572 7373 6e69 0067 2d2d 2d2d 2d2d      pressing.------
   d60ec:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d60fc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 002d 694d     -------------.Mi
   d610c:	7473 6b61 6e65 5220 6165 696c 6974 7365     staken Realities
   d611c:	4300 6d6f 6c70 7465 6465 7620 696f 2064     .Completed void 
   d612c:	6573 7574 0070 0000                         setup...

000d6134 <_ZTVN5spark13EthernetClassE>:
	...
   d613c:	4b85 000d 4b7b 000d 4b71 000d 4b67 000d     .K..{K..qK..gK..
   d614c:	4b5b 000d 4b4f 000d 4b43 000d 4b3b 000d     [K..OK..CK..;K..
   d615c:	4b31 000d 4b27 000d 4dd9 000d               1K..'K...M..

000d6168 <_ZTV7TwoWire>:
	...
   d6170:	4ba5 000d 4bef 000d 4bc7 000d 4ba7 000d     .K...K...K...K..
   d6180:	4bcf 000d 4bd7 000d 4bdf 000d 4be7 000d     .K...K...K...K..

000d6190 <_ZTV9IPAddress>:
	...
   d6198:	4c49 000d 40ab 000d 40cd 000d 7061 0070     IL...@...@..app.

000d61a8 <_ZTVN5spark12NetworkClassE>:
	...
   d61b0:	4d71 000d 4d7b 000d 4d85 000d 4d8f 000d     qM..{M...M...M..
   d61c0:	4d99 000d 4da5 000d 4db1 000d 4dbd 000d     .M...M...M...M..
   d61d0:	4dc5 000d 4dcf 000d 4dd9 000d 5925 252d     .M...M...M..%Y-%
   d61e0:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d61f0:	7361 7463 6d69 0065                         asctime.

000d61f8 <_ZTV3UDP>:
	...
   d6200:	40ad 000d 40db 000d 519d 000d 52c5 000d     .@...@...Q...R..
   d6210:	5195 000d 51b5 000d 51d3 000d 51ed 000d     .Q...Q...Q...Q..
   d6220:	5211 000d 52a9 000d 55a7 000d 534d 000d     .R...R...U..MS..
   d6230:	54c5 000d 517d 000d 5691 000d 544d 000d     .T..}Q...V..MT..
   d6240:	5385 000d 56bf 000d 52ef 000d 518b 000d     .S...V...R...Q..
   d6250:	532d 000d 5191 000d 51ef 000d fff0 ffff     -S...Q...Q......
   d6260:	0000 0000 5209 000d                         .....R..

000d6268 <_ZTV11USARTSerial>:
	...
   d6270:	56ff 000d 576b 000d 5743 000d 4ec1 000d     .V..kW..CW...N..
   d6280:	5713 000d 572f 000d 5721 000d 573d 000d     .W../W..!W..=W..
   d6290:	5701 000d 5705 000d                         .W...W..

000d6298 <_ZTV9USBSerial>:
	...
   d62a0:	57fd 000d 5865 000d 583b 000d 4ec1 000d     .W..eX..;X...N..
   d62b0:	582d 000d 57ff 000d 580f 000d 585f 000d     -X...W...X.._X..
   d62c0:	581f 000d 57f9 000d                         .X...W..

000d62c8 <_ZTVN5spark9WiFiClassE>:
	...
   d62d0:	5967 000d 595d 000d 5953 000d 5909 000d     gY..]Y..SY...Y..
   d62e0:	5947 000d 593b 000d 592f 000d 5927 000d     GY..;Y../Y..'Y..
   d62f0:	591d 000d 5913 000d 4dd9 000d               .Y...Y...M..

000d62fc <_ZSt7nothrow>:
	...

000d62fd <link_const_variable_data_end>:
   d62fd:	00          	.byte	0x00
	...

000d6300 <link_constructors_location>:
   d6300:	000d4419 	.word	0x000d4419
   d6304:	000d4aed 	.word	0x000d4aed
   d6308:	000d4b91 	.word	0x000d4b91
   d630c:	000d4d61 	.word	0x000d4d61
   d6310:	000d4ead 	.word	0x000d4ead
   d6314:	000d4fb5 	.word	0x000d4fb5
   d6318:	000d512d 	.word	0x000d512d
   d631c:	000d5169 	.word	0x000d5169
   d6320:	000d5971 	.word	0x000d5971

000d6324 <link_constructors_end>:
	...
