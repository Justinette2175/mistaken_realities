
/Users/justinegagnepain/Documents/concordia_classes/CART_461_Tangible_Media_Studio/mistaken_realities_latest/target/2.0.1/argon/mistaken_realities_latest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001c14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d5c30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e550  000d5c34  0001e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000238  2003e5b8  2003e5b8  0002e5b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5c9c  000d5c9c  00025c9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d5cc4  000d5cc4  00025cc4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00128f1a  00000000  00000000  00025cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013fdc  00000000  00000000  0014ebe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00026c49  00000000  00000000  00162bbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002540  00000000  00000000  00189807  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006f40  00000000  00000000  0018bd47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035b13  00000000  00000000  00192c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000321cb  00000000  00000000  001c879a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b213  00000000  00000000  001fa965  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000061d8  00000000  00000000  00305b78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fc8b 	bl	d5948 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fc93 	bl	d5964 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e550 	.word	0x2003e550
   d4048:	000d5c34 	.word	0x000d5c34
   d404c:	2003e5b8 	.word	0x2003e5b8
   d4050:	2003e5b8 	.word	0x2003e5b8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 fb6d 	bl	d573c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5c0c 	.word	0x000d5c0c
   d407c:	000d5c30 	.word	0x000d5c30

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b982 	b.w	d4388 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f893 	bl	d41b0 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f001 bb17 	b.w	d56c0 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bbeb 	b.w	d486c <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bbf1 	b.w	d487c <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d40aa:	4770      	bx	lr

000d40ac <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d40ac:	b510      	push	{r4, lr}
   d40ae:	4b06      	ldr	r3, [pc, #24]	; (d40c8 <_ZN3UDPD1Ev+0x1c>)
   d40b0:	6003      	str	r3, [r0, #0]
   d40b2:	3364      	adds	r3, #100	; 0x64
   d40b4:	4604      	mov	r4, r0
   d40b6:	6103      	str	r3, [r0, #16]
   d40b8:	f000 ff72 	bl	d4fa0 <_ZN3UDP4stopEv>
   d40bc:	4620      	mov	r0, r4
   d40be:	f001 f935 	bl	d532c <_ZN3UDP13releaseBufferEv>
   d40c2:	4620      	mov	r0, r4
   d40c4:	bd10      	pop	{r4, pc}
   d40c6:	bf00      	nop
   d40c8:	000d5b0c 	.word	0x000d5b0c

000d40cc <_ZN9IPAddressD0Ev>:
   d40cc:	b510      	push	{r4, lr}
   d40ce:	2118      	movs	r1, #24
   d40d0:	4604      	mov	r4, r0
   d40d2:	f001 fc26 	bl	d5922 <_ZdlPvj>
   d40d6:	4620      	mov	r0, r4
   d40d8:	bd10      	pop	{r4, pc}

000d40da <_ZN3UDPD0Ev>:
   d40da:	b510      	push	{r4, lr}
   d40dc:	4604      	mov	r4, r0
   d40de:	f7ff ffe5 	bl	d40ac <_ZN3UDPD1Ev>
   d40e2:	4620      	mov	r0, r4
   d40e4:	214c      	movs	r1, #76	; 0x4c
   d40e6:	f001 fc1c 	bl	d5922 <_ZdlPvj>
   d40ea:	4620      	mov	r0, r4
   d40ec:	bd10      	pop	{r4, pc}
	...

000d40f0 <_Z12connectToLANv>:
IPAddress remoteIP(192, 168, 1, 9);
/* PORTS FOR INCOMING & OUTGOIN9 DATA */
unsigned int outPort = 8000;

void connectToLAN()
{
   d40f0:	b530      	push	{r4, r5, lr}
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d40f2:	4c14      	ldr	r4, [pc, #80]	; (d4144 <_Z12connectToLANv+0x54>)
   d40f4:	2300      	movs	r3, #0
   d40f6:	6860      	ldr	r0, [r4, #4]
   d40f8:	b087      	sub	sp, #28
   d40fa:	461a      	mov	r2, r3
   d40fc:	4619      	mov	r1, r3
   d40fe:	f000 fb65 	bl	d47cc <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4102:	2200      	movs	r2, #0
   d4104:	6860      	ldr	r0, [r4, #4]
   d4106:	4611      	mov	r1, r2
   d4108:	f000 fb78 	bl	d47fc <network_ready>
    /* IF ARGON ALREADY CONFIGURED FOR SSID/ROUTER - THEN THIS */
    /* TRY CONNECT TO SSID - ROUTER */
    WiFi.connect();
    /* WAIT UNTIL DHCP SERVICE ASSIGNS ARGON IPADDRESS */
    while (!WiFi.ready())
   d410c:	2800      	cmp	r0, #0
   d410e:	d0f8      	beq.n	d4102 <_Z12connectToLANv+0x12>
        ;

    delay(5);
   d4110:	2005      	movs	r0, #5
   d4112:	f000 fbc3 	bl	d489c <delay>
    /* GET HOST (ARGON) ASSIGNED IP */
    Serial.print("ARGON IP (DHCP): ");
   d4116:	f001 fa49 	bl	d55ac <_Z16_fetch_usbserialv>
   d411a:	490b      	ldr	r1, [pc, #44]	; (d4148 <_Z12connectToLANv+0x58>)
   d411c:	f000 fe08 	bl	d4d30 <_ZN5Print5printEPKc>
    //argonIP = WiFi.localIP();
    //sprintf(argonIPAddress, "%d.%d.%d.%d", argonIP[0], argonIP[1], argonIP[2], argonIP[3]);
    Serial.println(WiFi.localIP());
   d4120:	f001 fa44 	bl	d55ac <_Z16_fetch_usbserialv>
        return (WLanConfig*)network_config(*this, 0, NULL);
   d4124:	2200      	movs	r2, #0
   d4126:	4611      	mov	r1, r2
   d4128:	4605      	mov	r5, r0
   d412a:	6860      	ldr	r0, [r4, #4]
   d412c:	f000 fb46 	bl	d47bc <network_config>
        return IPAddress(wifi_config()->nw.aucIP);
   d4130:	1c81      	adds	r1, r0, #2
   d4132:	4668      	mov	r0, sp
   d4134:	f000 fcd8 	bl	d4ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4138:	4669      	mov	r1, sp
   d413a:	4628      	mov	r0, r5
   d413c:	f000 fe1b 	bl	d4d76 <_ZN5Print7printlnERK9Printable>
}
   d4140:	b007      	add	sp, #28
   d4142:	bd30      	pop	{r4, r5, pc}
   d4144:	2003e7b8 	.word	0x2003e7b8
   d4148:	000d59e0 	.word	0x000d59e0

000d414c <_Z14checkInterrupti>:

    set_register(address, ELE_CFG, 0x0C);
}

boolean checkInterrupt(int pin)
{
   d414c:	b508      	push	{r3, lr}
    return digitalRead(pin);
   d414e:	b280      	uxth	r0, r0
   d4150:	f001 fb8e 	bl	d5870 <digitalRead>
}
   d4154:	3800      	subs	r0, #0
   d4156:	bf18      	it	ne
   d4158:	2001      	movne	r0, #1
   d415a:	bd08      	pop	{r3, pc}

000d415c <_Z15readTouchInputsv>:
{
   d415c:	b538      	push	{r3, r4, r5, lr}
    if (!checkInterrupt(irqpin))
   d415e:	2007      	movs	r0, #7
   d4160:	f7ff fff4 	bl	d414c <_Z14checkInterrupti>
   d4164:	4605      	mov	r5, r0
   d4166:	b9f8      	cbnz	r0, d41a8 <_Z15readTouchInputsv+0x4c>
        Wire.requestFrom(MPR121_address, 2);
   d4168:	f001 fbae 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d416c:	2202      	movs	r2, #2
   d416e:	215a      	movs	r1, #90	; 0x5a
   d4170:	f000 fc69 	bl	d4a46 <_ZN7TwoWire11requestFromEhj>
        byte LSB = Wire.read();
   d4174:	f001 fba8 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d4178:	6803      	ldr	r3, [r0, #0]
   d417a:	695b      	ldr	r3, [r3, #20]
   d417c:	4798      	blx	r3
   d417e:	4604      	mov	r4, r0
        byte MSB = Wire.read();
   d4180:	f001 fba2 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d4184:	6803      	ldr	r3, [r0, #0]
   d4186:	695b      	ldr	r3, [r3, #20]
   d4188:	4798      	blx	r3
        uint16_t touched = ((MSB << 8) | LSB); //16bits that make up the touch states
   d418a:	b2e4      	uxtb	r4, r4
   d418c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
   d4190:	4a06      	ldr	r2, [pc, #24]	; (d41ac <_Z15readTouchInputsv+0x50>)
   d4192:	b2a4      	uxth	r4, r4
        for (int i = 0; i < 12; i++)
   d4194:	4628      	mov	r0, r5
            if (touched & (1 << i))
   d4196:	fa44 f300 	asr.w	r3, r4, r0
        for (int i = 0; i < 12; i++)
   d419a:	3001      	adds	r0, #1
            if (touched & (1 << i))
   d419c:	f003 0301 	and.w	r3, r3, #1
        for (int i = 0; i < 12; i++)
   d41a0:	280c      	cmp	r0, #12
            if (touched & (1 << i))
   d41a2:	f802 3b01 	strb.w	r3, [r2], #1
        for (int i = 0; i < 12; i++)
   d41a6:	d1f6      	bne.n	d4196 <_Z15readTouchInputsv+0x3a>
}
   d41a8:	bd38      	pop	{r3, r4, r5, pc}
   d41aa:	bf00      	nop
   d41ac:	2003e638 	.word	0x2003e638

000d41b0 <loop>:
{
   d41b0:	b508      	push	{r3, lr}
    readTouchInputs();
   d41b2:	f7ff ffd3 	bl	d415c <_Z15readTouchInputsv>
}
   d41b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(50);
   d41ba:	2032      	movs	r0, #50	; 0x32
   d41bc:	f000 bb6e 	b.w	d489c <delay>

000d41c0 <_Z12set_registerihh>:

void set_register(int address, unsigned char r, unsigned char v)
{
   d41c0:	b570      	push	{r4, r5, r6, lr}
   d41c2:	4606      	mov	r6, r0
   d41c4:	4614      	mov	r4, r2
   d41c6:	460d      	mov	r5, r1
    Wire.beginTransmission(address);
   d41c8:	f001 fb7e 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d41cc:	4631      	mov	r1, r6
   d41ce:	f000 fc41 	bl	d4a54 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(r);
   d41d2:	f001 fb79 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d41d6:	6803      	ldr	r3, [r0, #0]
   d41d8:	4629      	mov	r1, r5
   d41da:	689b      	ldr	r3, [r3, #8]
   d41dc:	4798      	blx	r3
    Wire.write(v);
   d41de:	f001 fb73 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d41e2:	6803      	ldr	r3, [r0, #0]
   d41e4:	4621      	mov	r1, r4
   d41e6:	689b      	ldr	r3, [r3, #8]
   d41e8:	4798      	blx	r3
    Wire.endTransmission();
   d41ea:	f001 fb6d 	bl	d58c8 <_Z19__fetch_global_Wirev>
}
   d41ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d41f2:	f000 bc36 	b.w	d4a62 <_ZN7TwoWire15endTransmissionEv>

000d41f6 <_Z12mpr121_setuph>:
{
   d41f6:	b510      	push	{r4, lr}
    set_register(address, ELE_CFG, 0x00);
   d41f8:	2200      	movs	r2, #0
{
   d41fa:	4604      	mov	r4, r0
    set_register(address, ELE_CFG, 0x00);
   d41fc:	215e      	movs	r1, #94	; 0x5e
   d41fe:	f7ff ffdf 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, MHD_R, 0x01);
   d4202:	4620      	mov	r0, r4
   d4204:	2201      	movs	r2, #1
   d4206:	212b      	movs	r1, #43	; 0x2b
   d4208:	f7ff ffda 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, NHD_R, 0x01);
   d420c:	4620      	mov	r0, r4
   d420e:	2201      	movs	r2, #1
   d4210:	212c      	movs	r1, #44	; 0x2c
   d4212:	f7ff ffd5 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, NCL_R, 0x00);
   d4216:	4620      	mov	r0, r4
   d4218:	2200      	movs	r2, #0
   d421a:	212d      	movs	r1, #45	; 0x2d
   d421c:	f7ff ffd0 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, FDL_R, 0x00);
   d4220:	4620      	mov	r0, r4
   d4222:	2200      	movs	r2, #0
   d4224:	212e      	movs	r1, #46	; 0x2e
   d4226:	f7ff ffcb 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, MHD_F, 0x01);
   d422a:	4620      	mov	r0, r4
   d422c:	2201      	movs	r2, #1
   d422e:	212f      	movs	r1, #47	; 0x2f
   d4230:	f7ff ffc6 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, NHD_F, 0x01);
   d4234:	4620      	mov	r0, r4
   d4236:	2201      	movs	r2, #1
   d4238:	2130      	movs	r1, #48	; 0x30
   d423a:	f7ff ffc1 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, NCL_F, 0xFF);
   d423e:	4620      	mov	r0, r4
   d4240:	22ff      	movs	r2, #255	; 0xff
   d4242:	2131      	movs	r1, #49	; 0x31
   d4244:	f7ff ffbc 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, FDL_F, 0x02);
   d4248:	4620      	mov	r0, r4
   d424a:	2202      	movs	r2, #2
   d424c:	2132      	movs	r1, #50	; 0x32
   d424e:	f7ff ffb7 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE0_T, TOU_THRESH);
   d4252:	4620      	mov	r0, r4
   d4254:	2206      	movs	r2, #6
   d4256:	2141      	movs	r1, #65	; 0x41
   d4258:	f7ff ffb2 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE0_R, REL_THRESH);
   d425c:	4620      	mov	r0, r4
   d425e:	220a      	movs	r2, #10
   d4260:	2142      	movs	r1, #66	; 0x42
   d4262:	f7ff ffad 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE1_T, TOU_THRESH);
   d4266:	4620      	mov	r0, r4
   d4268:	2206      	movs	r2, #6
   d426a:	2143      	movs	r1, #67	; 0x43
   d426c:	f7ff ffa8 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE1_R, REL_THRESH);
   d4270:	4620      	mov	r0, r4
   d4272:	220a      	movs	r2, #10
   d4274:	2144      	movs	r1, #68	; 0x44
   d4276:	f7ff ffa3 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE2_T, TOU_THRESH);
   d427a:	4620      	mov	r0, r4
   d427c:	2206      	movs	r2, #6
   d427e:	2145      	movs	r1, #69	; 0x45
   d4280:	f7ff ff9e 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE2_R, REL_THRESH);
   d4284:	4620      	mov	r0, r4
   d4286:	220a      	movs	r2, #10
   d4288:	2146      	movs	r1, #70	; 0x46
   d428a:	f7ff ff99 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE3_T, TOU_THRESH);
   d428e:	4620      	mov	r0, r4
   d4290:	2206      	movs	r2, #6
   d4292:	2147      	movs	r1, #71	; 0x47
   d4294:	f7ff ff94 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE3_R, REL_THRESH);
   d4298:	4620      	mov	r0, r4
   d429a:	220a      	movs	r2, #10
   d429c:	2148      	movs	r1, #72	; 0x48
   d429e:	f7ff ff8f 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE4_T, TOU_THRESH);
   d42a2:	4620      	mov	r0, r4
   d42a4:	2206      	movs	r2, #6
   d42a6:	2149      	movs	r1, #73	; 0x49
   d42a8:	f7ff ff8a 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE4_R, REL_THRESH);
   d42ac:	4620      	mov	r0, r4
   d42ae:	220a      	movs	r2, #10
   d42b0:	214a      	movs	r1, #74	; 0x4a
   d42b2:	f7ff ff85 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE5_T, TOU_THRESH);
   d42b6:	4620      	mov	r0, r4
   d42b8:	2206      	movs	r2, #6
   d42ba:	214b      	movs	r1, #75	; 0x4b
   d42bc:	f7ff ff80 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE5_R, REL_THRESH);
   d42c0:	4620      	mov	r0, r4
   d42c2:	220a      	movs	r2, #10
   d42c4:	214c      	movs	r1, #76	; 0x4c
   d42c6:	f7ff ff7b 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE6_T, TOU_THRESH);
   d42ca:	4620      	mov	r0, r4
   d42cc:	2206      	movs	r2, #6
   d42ce:	214d      	movs	r1, #77	; 0x4d
   d42d0:	f7ff ff76 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE6_R, REL_THRESH);
   d42d4:	4620      	mov	r0, r4
   d42d6:	220a      	movs	r2, #10
   d42d8:	214e      	movs	r1, #78	; 0x4e
   d42da:	f7ff ff71 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE7_T, TOU_THRESH);
   d42de:	4620      	mov	r0, r4
   d42e0:	2206      	movs	r2, #6
   d42e2:	214f      	movs	r1, #79	; 0x4f
   d42e4:	f7ff ff6c 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE7_R, REL_THRESH);
   d42e8:	4620      	mov	r0, r4
   d42ea:	220a      	movs	r2, #10
   d42ec:	2150      	movs	r1, #80	; 0x50
   d42ee:	f7ff ff67 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE8_T, TOU_THRESH);
   d42f2:	4620      	mov	r0, r4
   d42f4:	2206      	movs	r2, #6
   d42f6:	2151      	movs	r1, #81	; 0x51
   d42f8:	f7ff ff62 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE8_R, REL_THRESH);
   d42fc:	4620      	mov	r0, r4
   d42fe:	220a      	movs	r2, #10
   d4300:	2152      	movs	r1, #82	; 0x52
   d4302:	f7ff ff5d 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE9_T, TOU_THRESH);
   d4306:	4620      	mov	r0, r4
   d4308:	2206      	movs	r2, #6
   d430a:	2153      	movs	r1, #83	; 0x53
   d430c:	f7ff ff58 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE9_R, REL_THRESH);
   d4310:	4620      	mov	r0, r4
   d4312:	220a      	movs	r2, #10
   d4314:	2154      	movs	r1, #84	; 0x54
   d4316:	f7ff ff53 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE10_T, TOU_THRESH);
   d431a:	4620      	mov	r0, r4
   d431c:	2206      	movs	r2, #6
   d431e:	2155      	movs	r1, #85	; 0x55
   d4320:	f7ff ff4e 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE10_R, REL_THRESH);
   d4324:	4620      	mov	r0, r4
   d4326:	220a      	movs	r2, #10
   d4328:	2156      	movs	r1, #86	; 0x56
   d432a:	f7ff ff49 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE11_T, TOU_THRESH);
   d432e:	4620      	mov	r0, r4
   d4330:	2206      	movs	r2, #6
   d4332:	2157      	movs	r1, #87	; 0x57
   d4334:	f7ff ff44 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE11_R, REL_THRESH);
   d4338:	4620      	mov	r0, r4
   d433a:	220a      	movs	r2, #10
   d433c:	2158      	movs	r1, #88	; 0x58
   d433e:	f7ff ff3f 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, FIL_CFG, 0x04);
   d4342:	4620      	mov	r0, r4
   d4344:	2204      	movs	r2, #4
   d4346:	215d      	movs	r1, #93	; 0x5d
   d4348:	f7ff ff3a 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE_CFG, 0x0C); // Enables all 12 Electrodes
   d434c:	4620      	mov	r0, r4
   d434e:	220c      	movs	r2, #12
   d4350:	215e      	movs	r1, #94	; 0x5e
   d4352:	f7ff ff35 	bl	d41c0 <_Z12set_registerihh>
    set_register(address, ELE_CFG, 0x0C);
   d4356:	4620      	mov	r0, r4
   d4358:	220c      	movs	r2, #12
}
   d435a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    set_register(address, ELE_CFG, 0x0C);
   d435e:	215e      	movs	r1, #94	; 0x5e
   d4360:	f7ff bf2e 	b.w	d41c0 <_Z12set_registerihh>

000d4364 <_Z17setupTouchDevicesv>:
{
   d4364:	b508      	push	{r3, lr}
    pinMode(irqpin, INPUT);
   d4366:	2100      	movs	r1, #0
   d4368:	2007      	movs	r0, #7
   d436a:	f001 fa57 	bl	d581c <pinMode>
    digitalWrite(irqpin, HIGH);
   d436e:	2101      	movs	r1, #1
   d4370:	2007      	movs	r0, #7
   d4372:	f001 fa64 	bl	d583e <digitalWrite>
    Wire.begin();
   d4376:	f001 faa7 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d437a:	f000 fb35 	bl	d49e8 <_ZN7TwoWire5beginEv>
}
   d437e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    mpr121_setup(0x5A);
   d4382:	205a      	movs	r0, #90	; 0x5a
   d4384:	f7ff bf37 	b.w	d41f6 <_Z12mpr121_setuph>

000d4388 <setup>:
{
   d4388:	b510      	push	{r4, lr}
    Serial.begin(9600);
   d438a:	f001 f90f 	bl	d55ac <_Z16_fetch_usbserialv>
    Serial.println("-----------------------------------");
   d438e:	4c15      	ldr	r4, [pc, #84]	; (d43e4 <setup+0x5c>)
    Serial.begin(9600);
   d4390:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4394:	f001 f8fe 	bl	d5594 <_ZN9USBSerial5beginEl>
    Serial.println();
   d4398:	f001 f908 	bl	d55ac <_Z16_fetch_usbserialv>
   d439c:	f000 fcd5 	bl	d4d4a <_ZN5Print7printlnEv>
    Serial.println("-----------------------------------");
   d43a0:	f001 f904 	bl	d55ac <_Z16_fetch_usbserialv>
   d43a4:	4621      	mov	r1, r4
   d43a6:	f000 fcdc 	bl	d4d62 <_ZN5Print7printlnEPKc>
    Serial.println("Mistaken Realities");
   d43aa:	f001 f8ff 	bl	d55ac <_Z16_fetch_usbserialv>
   d43ae:	490e      	ldr	r1, [pc, #56]	; (d43e8 <setup+0x60>)
   d43b0:	f000 fcd7 	bl	d4d62 <_ZN5Print7printlnEPKc>
    Serial.println("-----------------------------------");
   d43b4:	f001 f8fa 	bl	d55ac <_Z16_fetch_usbserialv>
   d43b8:	4621      	mov	r1, r4
   d43ba:	f000 fcd2 	bl	d4d62 <_ZN5Print7printlnEPKc>
    pinMode(B_TN, INPUT_PULLUP); // NO RESISTOR
   d43be:	2102      	movs	r1, #2
   d43c0:	4608      	mov	r0, r1
   d43c2:	f001 fa2b 	bl	d581c <pinMode>
    setupTouchDevices();
   d43c6:	f7ff ffcd 	bl	d4364 <_Z17setupTouchDevicesv>
    connectToLAN();
   d43ca:	f7ff fe91 	bl	d40f0 <_Z12connectToLANv>
    delay(5); // Force Serial.println in void setup()
   d43ce:	2005      	movs	r0, #5
   d43d0:	f000 fa64 	bl	d489c <delay>
    Serial.println("Completed void setup");
   d43d4:	f001 f8ea 	bl	d55ac <_Z16_fetch_usbserialv>
}
   d43d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println("Completed void setup");
   d43dc:	4903      	ldr	r1, [pc, #12]	; (d43ec <setup+0x64>)
   d43de:	f000 bcc0 	b.w	d4d62 <_ZN5Print7printlnEPKc>
   d43e2:	bf00      	nop
   d43e4:	000d59f2 	.word	0x000d59f2
   d43e8:	000d5a16 	.word	0x000d5a16
   d43ec:	000d5a29 	.word	0x000d5a29

000d43f0 <_GLOBAL__sub_I_touchStates>:
}
   d43f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
UDP Udp;
   d43f2:	4d12      	ldr	r5, [pc, #72]	; (d443c <_GLOBAL__sub_I_touchStates+0x4c>)
   d43f4:	4c12      	ldr	r4, [pc, #72]	; (d4440 <_GLOBAL__sub_I_touchStates+0x50>)
IPAddress argonIP;
   d43f6:	4e13      	ldr	r6, [pc, #76]	; (d4444 <_GLOBAL__sub_I_touchStates+0x54>)
UDP Udp;
   d43f8:	4628      	mov	r0, r5
   d43fa:	f000 ff77 	bl	d52ec <_ZN3UDPC1Ev>
   d43fe:	4628      	mov	r0, r5
IPAddress argonIP;
   d4400:	4d11      	ldr	r5, [pc, #68]	; (d4448 <_GLOBAL__sub_I_touchStates+0x58>)
UDP Udp;
   d4402:	4912      	ldr	r1, [pc, #72]	; (d444c <_GLOBAL__sub_I_touchStates+0x5c>)
   d4404:	4622      	mov	r2, r4
   d4406:	f001 fa87 	bl	d5918 <__aeabi_atexit>
IPAddress argonIP;
   d440a:	4628      	mov	r0, r5
   d440c:	f000 fb5e 	bl	d4acc <_ZN9IPAddressC1Ev>
   d4410:	4622      	mov	r2, r4
   d4412:	4631      	mov	r1, r6
   d4414:	4628      	mov	r0, r5
IPAddress remoteIP(192, 168, 1, 9);
   d4416:	4d0e      	ldr	r5, [pc, #56]	; (d4450 <_GLOBAL__sub_I_touchStates+0x60>)
IPAddress argonIP;
   d4418:	f001 fa7e 	bl	d5918 <__aeabi_atexit>
IPAddress remoteIP(192, 168, 1, 9);
   d441c:	2309      	movs	r3, #9
   d441e:	9300      	str	r3, [sp, #0]
   d4420:	22a8      	movs	r2, #168	; 0xa8
   d4422:	2301      	movs	r3, #1
   d4424:	21c0      	movs	r1, #192	; 0xc0
   d4426:	4628      	mov	r0, r5
   d4428:	f000 fb94 	bl	d4b54 <_ZN9IPAddressC1Ehhhh>
   d442c:	4622      	mov	r2, r4
   d442e:	4631      	mov	r1, r6
   d4430:	4628      	mov	r0, r5
}
   d4432:	b002      	add	sp, #8
   d4434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
IPAddress remoteIP(192, 168, 1, 9);
   d4438:	f001 ba6e 	b.w	d5918 <__aeabi_atexit>
   d443c:	2003e5bc 	.word	0x2003e5bc
   d4440:	2003e5b8 	.word	0x2003e5b8
   d4444:	000d40ab 	.word	0x000d40ab
   d4448:	2003e608 	.word	0x2003e608
   d444c:	000d40ad 	.word	0x000d40ad
   d4450:	2003e620 	.word	0x2003e620

000d4454 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <os_mutex_recursive_create+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	00030248 	.word	0x00030248

000d4464 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <os_mutex_recursive_destroy+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	00030248 	.word	0x00030248

000d4474 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_RNG_GetRandomNumber+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	685b      	ldr	r3, [r3, #4]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	00030218 	.word	0x00030218

000d4484 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	695b      	ldr	r3, [r3, #20]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	00030218 	.word	0x00030218

000d4494 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_Pin_Mode+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	689b      	ldr	r3, [r3, #8]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003022c 	.word	0x0003022c

000d44a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_Get_Pin_Mode+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	68db      	ldr	r3, [r3, #12]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003022c 	.word	0x0003022c

000d44b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_GPIO_Write+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	691b      	ldr	r3, [r3, #16]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003022c 	.word	0x0003022c

000d44c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_GPIO_Read+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	695b      	ldr	r3, [r3, #20]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003022c 	.word	0x0003022c

000d44d4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <hal_i2c_begin+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	68db      	ldr	r3, [r3, #12]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030228 	.word	0x00030228

000d44e4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <hal_i2c_begin_transmission+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	699b      	ldr	r3, [r3, #24]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030228 	.word	0x00030228

000d44f4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <hal_i2c_end_transmission+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	69db      	ldr	r3, [r3, #28]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030228 	.word	0x00030228

000d4504 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <hal_i2c_write+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	6a1b      	ldr	r3, [r3, #32]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030228 	.word	0x00030228

000d4514 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <hal_i2c_available+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030228 	.word	0x00030228

000d4524 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <hal_i2c_read+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030228 	.word	0x00030228

000d4534 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <hal_i2c_peek+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030228 	.word	0x00030228

000d4544 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <hal_i2c_flush+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030228 	.word	0x00030228

000d4554 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <hal_i2c_is_enabled+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030228 	.word	0x00030228

000d4564 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <hal_i2c_init+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030228 	.word	0x00030228

000d4574 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <hal_i2c_request_ex+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	00030228 	.word	0x00030228

000d4584 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <if_index_to_name+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	695b      	ldr	r3, [r3, #20]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003026c 	.word	0x0003026c

000d4594 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <inet_inet_ntop+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	695b      	ldr	r3, [r3, #20]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	00030264 	.word	0x00030264

000d45a4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <inet_htonl+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6a1b      	ldr	r3, [r3, #32]
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	00030264 	.word	0x00030264

000d45b4 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <inet_ntohs+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	00030264 	.word	0x00030264

000d45c4 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d45c4:	b508      	push	{r3, lr}
   d45c6:	4b02      	ldr	r3, [pc, #8]	; (d45d0 <inet_htons+0xc>)
   d45c8:	681b      	ldr	r3, [r3, #0]
   d45ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d45cc:	9301      	str	r3, [sp, #4]
   d45ce:	bd08      	pop	{r3, pc}
   d45d0:	00030264 	.word	0x00030264

000d45d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d45d4:	b508      	push	{r3, lr}
   d45d6:	4b02      	ldr	r3, [pc, #8]	; (d45e0 <netdb_freeaddrinfo+0xc>)
   d45d8:	681b      	ldr	r3, [r3, #0]
   d45da:	689b      	ldr	r3, [r3, #8]
   d45dc:	9301      	str	r3, [sp, #4]
   d45de:	bd08      	pop	{r3, pc}
   d45e0:	00030268 	.word	0x00030268

000d45e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d45e4:	b508      	push	{r3, lr}
   d45e6:	4b02      	ldr	r3, [pc, #8]	; (d45f0 <netdb_getaddrinfo+0xc>)
   d45e8:	681b      	ldr	r3, [r3, #0]
   d45ea:	68db      	ldr	r3, [r3, #12]
   d45ec:	9301      	str	r3, [sp, #4]
   d45ee:	bd08      	pop	{r3, pc}
   d45f0:	00030268 	.word	0x00030268

000d45f4 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d45f4:	b508      	push	{r3, lr}
   d45f6:	4b02      	ldr	r3, [pc, #8]	; (d4600 <sock_bind+0xc>)
   d45f8:	681b      	ldr	r3, [r3, #0]
   d45fa:	685b      	ldr	r3, [r3, #4]
   d45fc:	9301      	str	r3, [sp, #4]
   d45fe:	bd08      	pop	{r3, pc}
   d4600:	00030238 	.word	0x00030238

000d4604 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4604:	b508      	push	{r3, lr}
   d4606:	4b02      	ldr	r3, [pc, #8]	; (d4610 <sock_setsockopt+0xc>)
   d4608:	681b      	ldr	r3, [r3, #0]
   d460a:	699b      	ldr	r3, [r3, #24]
   d460c:	9301      	str	r3, [sp, #4]
   d460e:	bd08      	pop	{r3, pc}
   d4610:	00030238 	.word	0x00030238

000d4614 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4614:	b508      	push	{r3, lr}
   d4616:	4b02      	ldr	r3, [pc, #8]	; (d4620 <sock_close+0xc>)
   d4618:	681b      	ldr	r3, [r3, #0]
   d461a:	69db      	ldr	r3, [r3, #28]
   d461c:	9301      	str	r3, [sp, #4]
   d461e:	bd08      	pop	{r3, pc}
   d4620:	00030238 	.word	0x00030238

000d4624 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4624:	b508      	push	{r3, lr}
   d4626:	4b02      	ldr	r3, [pc, #8]	; (d4630 <sock_recvfrom+0xc>)
   d4628:	681b      	ldr	r3, [r3, #0]
   d462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d462c:	9301      	str	r3, [sp, #4]
   d462e:	bd08      	pop	{r3, pc}
   d4630:	00030238 	.word	0x00030238

000d4634 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4634:	b508      	push	{r3, lr}
   d4636:	4b02      	ldr	r3, [pc, #8]	; (d4640 <sock_sendto+0xc>)
   d4638:	681b      	ldr	r3, [r3, #0]
   d463a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d463c:	9301      	str	r3, [sp, #4]
   d463e:	bd08      	pop	{r3, pc}
   d4640:	00030238 	.word	0x00030238

000d4644 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4644:	b508      	push	{r3, lr}
   d4646:	4b02      	ldr	r3, [pc, #8]	; (d4650 <sock_socket+0xc>)
   d4648:	681b      	ldr	r3, [r3, #0]
   d464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d464c:	9301      	str	r3, [sp, #4]
   d464e:	bd08      	pop	{r3, pc}
   d4650:	00030238 	.word	0x00030238

000d4654 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4654:	b508      	push	{r3, lr}
   d4656:	4b02      	ldr	r3, [pc, #8]	; (d4660 <hal_spi_init+0xc>)
   d4658:	681b      	ldr	r3, [r3, #0]
   d465a:	69db      	ldr	r3, [r3, #28]
   d465c:	9301      	str	r3, [sp, #4]
   d465e:	bd08      	pop	{r3, pc}
   d4660:	00030230 	.word	0x00030230

000d4664 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4664:	b508      	push	{r3, lr}
   d4666:	4b02      	ldr	r3, [pc, #8]	; (d4670 <hal_spi_is_enabled+0xc>)
   d4668:	681b      	ldr	r3, [r3, #0]
   d466a:	6a1b      	ldr	r3, [r3, #32]
   d466c:	9301      	str	r3, [sp, #4]
   d466e:	bd08      	pop	{r3, pc}
   d4670:	00030230 	.word	0x00030230

000d4674 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <hal_usart_init+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	681b      	ldr	r3, [r3, #0]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	0003023c 	.word	0x0003023c

000d4684 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <hal_usart_write+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	68db      	ldr	r3, [r3, #12]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	0003023c 	.word	0x0003023c

000d4694 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <hal_usart_available+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	691b      	ldr	r3, [r3, #16]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003023c 	.word	0x0003023c

000d46a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <hal_usart_read+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	695b      	ldr	r3, [r3, #20]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003023c 	.word	0x0003023c

000d46b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <hal_usart_peek+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	699b      	ldr	r3, [r3, #24]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003023c 	.word	0x0003023c

000d46c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <hal_usart_flush+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	69db      	ldr	r3, [r3, #28]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003023c 	.word	0x0003023c

000d46d4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <hal_usart_is_enabled+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	6a1b      	ldr	r3, [r3, #32]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003023c 	.word	0x0003023c

000d46e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <hal_usart_available_data_for_write+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003023c 	.word	0x0003023c

000d46f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_USB_USART_Init+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	681b      	ldr	r3, [r3, #0]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	0003024c 	.word	0x0003024c

000d4704 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_USB_USART_Begin+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	685b      	ldr	r3, [r3, #4]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	0003024c 	.word	0x0003024c

000d4714 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <HAL_USB_USART_Available_Data+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	691b      	ldr	r3, [r3, #16]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003024c 	.word	0x0003024c

000d4724 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	695b      	ldr	r3, [r3, #20]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	0003024c 	.word	0x0003024c

000d4734 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_USB_USART_Receive_Data+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	699b      	ldr	r3, [r3, #24]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	0003024c 	.word	0x0003024c

000d4744 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <HAL_USB_USART_Send_Data+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	69db      	ldr	r3, [r3, #28]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	0003024c 	.word	0x0003024c

000d4754 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <HAL_USB_USART_Flush_Data+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	6a1b      	ldr	r3, [r3, #32]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	0003024c 	.word	0x0003024c

000d4764 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <set_system_mode+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	685b      	ldr	r3, [r3, #4]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030220 	.word	0x00030220

000d4774 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <system_delay_ms+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	695b      	ldr	r3, [r3, #20]
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030220 	.word	0x00030220

000d4784 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b03      	ldr	r3, [pc, #12]	; (d4794 <system_ctrl_set_app_request_handler+0x10>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d478e:	9301      	str	r3, [sp, #4]
   d4790:	bd08      	pop	{r3, pc}
   d4792:	0000      	.short	0x0000
   d4794:	00030220 	.word	0x00030220

000d4798 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b03      	ldr	r3, [pc, #12]	; (d47a8 <system_ctrl_set_result+0x10>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d47a2:	9301      	str	r3, [sp, #4]
   d47a4:	bd08      	pop	{r3, pc}
   d47a6:	0000      	.short	0x0000
   d47a8:	00030220 	.word	0x00030220

000d47ac <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d47ac:	b508      	push	{r3, lr}
   d47ae:	4b02      	ldr	r3, [pc, #8]	; (d47b8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d47b0:	681b      	ldr	r3, [r3, #0]
   d47b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d47b4:	9301      	str	r3, [sp, #4]
   d47b6:	bd08      	pop	{r3, pc}
   d47b8:	00030244 	.word	0x00030244

000d47bc <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   d47bc:	b508      	push	{r3, lr}
   d47be:	4b02      	ldr	r3, [pc, #8]	; (d47c8 <network_config+0xc>)
   d47c0:	681b      	ldr	r3, [r3, #0]
   d47c2:	681b      	ldr	r3, [r3, #0]
   d47c4:	9301      	str	r3, [sp, #4]
   d47c6:	bd08      	pop	{r3, pc}
   d47c8:	00030240 	.word	0x00030240

000d47cc <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d47cc:	b508      	push	{r3, lr}
   d47ce:	4b02      	ldr	r3, [pc, #8]	; (d47d8 <network_connect+0xc>)
   d47d0:	681b      	ldr	r3, [r3, #0]
   d47d2:	685b      	ldr	r3, [r3, #4]
   d47d4:	9301      	str	r3, [sp, #4]
   d47d6:	bd08      	pop	{r3, pc}
   d47d8:	00030240 	.word	0x00030240

000d47dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d47dc:	b508      	push	{r3, lr}
   d47de:	4b02      	ldr	r3, [pc, #8]	; (d47e8 <network_connecting+0xc>)
   d47e0:	681b      	ldr	r3, [r3, #0]
   d47e2:	689b      	ldr	r3, [r3, #8]
   d47e4:	9301      	str	r3, [sp, #4]
   d47e6:	bd08      	pop	{r3, pc}
   d47e8:	00030240 	.word	0x00030240

000d47ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d47ec:	b508      	push	{r3, lr}
   d47ee:	4b02      	ldr	r3, [pc, #8]	; (d47f8 <network_disconnect+0xc>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	68db      	ldr	r3, [r3, #12]
   d47f4:	9301      	str	r3, [sp, #4]
   d47f6:	bd08      	pop	{r3, pc}
   d47f8:	00030240 	.word	0x00030240

000d47fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d47fc:	b508      	push	{r3, lr}
   d47fe:	4b02      	ldr	r3, [pc, #8]	; (d4808 <network_ready+0xc>)
   d4800:	681b      	ldr	r3, [r3, #0]
   d4802:	691b      	ldr	r3, [r3, #16]
   d4804:	9301      	str	r3, [sp, #4]
   d4806:	bd08      	pop	{r3, pc}
   d4808:	00030240 	.word	0x00030240

000d480c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d480c:	b508      	push	{r3, lr}
   d480e:	4b02      	ldr	r3, [pc, #8]	; (d4818 <network_on+0xc>)
   d4810:	681b      	ldr	r3, [r3, #0]
   d4812:	695b      	ldr	r3, [r3, #20]
   d4814:	9301      	str	r3, [sp, #4]
   d4816:	bd08      	pop	{r3, pc}
   d4818:	00030240 	.word	0x00030240

000d481c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d481c:	b508      	push	{r3, lr}
   d481e:	4b02      	ldr	r3, [pc, #8]	; (d4828 <network_off+0xc>)
   d4820:	681b      	ldr	r3, [r3, #0]
   d4822:	699b      	ldr	r3, [r3, #24]
   d4824:	9301      	str	r3, [sp, #4]
   d4826:	bd08      	pop	{r3, pc}
   d4828:	00030240 	.word	0x00030240

000d482c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d482c:	b508      	push	{r3, lr}
   d482e:	4b02      	ldr	r3, [pc, #8]	; (d4838 <network_listen+0xc>)
   d4830:	681b      	ldr	r3, [r3, #0]
   d4832:	69db      	ldr	r3, [r3, #28]
   d4834:	9301      	str	r3, [sp, #4]
   d4836:	bd08      	pop	{r3, pc}
   d4838:	00030240 	.word	0x00030240

000d483c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d483c:	b508      	push	{r3, lr}
   d483e:	4b02      	ldr	r3, [pc, #8]	; (d4848 <network_listening+0xc>)
   d4840:	681b      	ldr	r3, [r3, #0]
   d4842:	6a1b      	ldr	r3, [r3, #32]
   d4844:	9301      	str	r3, [sp, #4]
   d4846:	bd08      	pop	{r3, pc}
   d4848:	00030240 	.word	0x00030240

000d484c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d484c:	b508      	push	{r3, lr}
   d484e:	4b02      	ldr	r3, [pc, #8]	; (d4858 <network_set_listen_timeout+0xc>)
   d4850:	681b      	ldr	r3, [r3, #0]
   d4852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4854:	9301      	str	r3, [sp, #4]
   d4856:	bd08      	pop	{r3, pc}
   d4858:	00030240 	.word	0x00030240

000d485c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d485c:	b508      	push	{r3, lr}
   d485e:	4b02      	ldr	r3, [pc, #8]	; (d4868 <network_get_listen_timeout+0xc>)
   d4860:	681b      	ldr	r3, [r3, #0]
   d4862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4864:	9301      	str	r3, [sp, #4]
   d4866:	bd08      	pop	{r3, pc}
   d4868:	00030240 	.word	0x00030240

000d486c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d486c:	b508      	push	{r3, lr}
   d486e:	4b02      	ldr	r3, [pc, #8]	; (d4878 <malloc+0xc>)
   d4870:	681b      	ldr	r3, [r3, #0]
   d4872:	681b      	ldr	r3, [r3, #0]
   d4874:	9301      	str	r3, [sp, #4]
   d4876:	bd08      	pop	{r3, pc}
   d4878:	0003021c 	.word	0x0003021c

000d487c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d487c:	b508      	push	{r3, lr}
   d487e:	4b02      	ldr	r3, [pc, #8]	; (d4888 <free+0xc>)
   d4880:	681b      	ldr	r3, [r3, #0]
   d4882:	685b      	ldr	r3, [r3, #4]
   d4884:	9301      	str	r3, [sp, #4]
   d4886:	bd08      	pop	{r3, pc}
   d4888:	0003021c 	.word	0x0003021c

000d488c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d488c:	b508      	push	{r3, lr}
   d488e:	4b02      	ldr	r3, [pc, #8]	; (d4898 <newlib_impure_ptr_callback+0xc>)
   d4890:	681b      	ldr	r3, [r3, #0]
   d4892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4894:	9301      	str	r3, [sp, #4]
   d4896:	bd08      	pop	{r3, pc}
   d4898:	0003021c 	.word	0x0003021c

000d489c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d489c:	2100      	movs	r1, #0
   d489e:	f7ff bf69 	b.w	d4774 <system_delay_ms>

000d48a2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d48a2:	b510      	push	{r4, lr}
   d48a4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d48a6:	6800      	ldr	r0, [r0, #0]
   d48a8:	b108      	cbz	r0, d48ae <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d48aa:	f7ff fddb 	bl	d4464 <os_mutex_recursive_destroy>
    }
   d48ae:	4620      	mov	r0, r4
   d48b0:	bd10      	pop	{r4, pc}
	...

000d48b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d48b4:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d48b6:	4c06      	ldr	r4, [pc, #24]	; (d48d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d48b8:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d48ba:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d48bc:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d48be:	f7ff fdc9 	bl	d4454 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d48c2:	4620      	mov	r0, r4
   d48c4:	4a03      	ldr	r2, [pc, #12]	; (d48d4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d48c6:	4904      	ldr	r1, [pc, #16]	; (d48d8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d48c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d48cc:	f001 b824 	b.w	d5918 <__aeabi_atexit>
   d48d0:	2003e644 	.word	0x2003e644
   d48d4:	2003e5b8 	.word	0x2003e5b8
   d48d8:	000d48a3 	.word	0x000d48a3

000d48dc <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d48dc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d48de:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d48e0:	4604      	mov	r4, r0
      if (_M_manager)
   d48e2:	b113      	cbz	r3, d48ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d48e4:	2203      	movs	r2, #3
   d48e6:	4601      	mov	r1, r0
   d48e8:	4798      	blx	r3
    }
   d48ea:	4620      	mov	r0, r4
   d48ec:	bd10      	pop	{r4, pc}

000d48ee <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d48ee:	2200      	movs	r2, #0
   d48f0:	6840      	ldr	r0, [r0, #4]
   d48f2:	4611      	mov	r1, r2
   d48f4:	f7ff bfa2 	b.w	d483c <network_listening>

000d48f8 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d48f8:	2200      	movs	r2, #0
   d48fa:	6840      	ldr	r0, [r0, #4]
   d48fc:	4611      	mov	r1, r2
   d48fe:	f7ff bfad 	b.w	d485c <network_get_listen_timeout>

000d4902 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4902:	6840      	ldr	r0, [r0, #4]
   d4904:	2200      	movs	r2, #0
   d4906:	f7ff bfa1 	b.w	d484c <network_set_listen_timeout>

000d490a <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d490a:	6840      	ldr	r0, [r0, #4]
   d490c:	2200      	movs	r2, #0
   d490e:	f081 0101 	eor.w	r1, r1, #1
   d4912:	f7ff bf8b 	b.w	d482c <network_listen>

000d4916 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4916:	2300      	movs	r3, #0
   d4918:	6840      	ldr	r0, [r0, #4]
   d491a:	461a      	mov	r2, r3
   d491c:	4619      	mov	r1, r3
   d491e:	f7ff bf7d 	b.w	d481c <network_off>

000d4922 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4922:	2300      	movs	r3, #0
   d4924:	6840      	ldr	r0, [r0, #4]
   d4926:	461a      	mov	r2, r3
   d4928:	4619      	mov	r1, r3
   d492a:	f7ff bf6f 	b.w	d480c <network_on>

000d492e <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d492e:	2200      	movs	r2, #0
   d4930:	6840      	ldr	r0, [r0, #4]
   d4932:	4611      	mov	r1, r2
   d4934:	f7ff bf62 	b.w	d47fc <network_ready>

000d4938 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4938:	2200      	movs	r2, #0
   d493a:	6840      	ldr	r0, [r0, #4]
   d493c:	4611      	mov	r1, r2
   d493e:	f7ff bf4d 	b.w	d47dc <network_connecting>

000d4942 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4942:	6840      	ldr	r0, [r0, #4]
   d4944:	2200      	movs	r2, #0
   d4946:	2102      	movs	r1, #2
   d4948:	f7ff bf50 	b.w	d47ec <network_disconnect>

000d494c <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d494c:	2300      	movs	r3, #0
   d494e:	6840      	ldr	r0, [r0, #4]
   d4950:	461a      	mov	r2, r3
   d4952:	f7ff bf3b 	b.w	d47cc <network_connect>
	...

000d4958 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4958:	4b02      	ldr	r3, [pc, #8]	; (d4964 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d495a:	2203      	movs	r2, #3
   d495c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d495e:	4a02      	ldr	r2, [pc, #8]	; (d4968 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4960:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4962:	4770      	bx	lr
   d4964:	2003e648 	.word	0x2003e648
   d4968:	000d5a48 	.word	0x000d5a48

000d496c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d496c:	4770      	bx	lr

000d496e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d496e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4970:	4606      	mov	r6, r0
   d4972:	4615      	mov	r5, r2
   d4974:	460c      	mov	r4, r1
   d4976:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4978:	42bc      	cmp	r4, r7
   d497a:	d006      	beq.n	d498a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d497c:	6833      	ldr	r3, [r6, #0]
   d497e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4982:	689b      	ldr	r3, [r3, #8]
   d4984:	4630      	mov	r0, r6
   d4986:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4988:	e7f6      	b.n	d4978 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d498a:	4628      	mov	r0, r5
   d498c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d498e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d498e:	7c00      	ldrb	r0, [r0, #16]
   d4990:	2200      	movs	r2, #0
   d4992:	f7ff bdb7 	b.w	d4504 <hal_i2c_write>

000d4996 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4996:	7c00      	ldrb	r0, [r0, #16]
   d4998:	2100      	movs	r1, #0
   d499a:	f7ff bdbb 	b.w	d4514 <hal_i2c_available>

000d499e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d499e:	7c00      	ldrb	r0, [r0, #16]
   d49a0:	2100      	movs	r1, #0
   d49a2:	f7ff bdbf 	b.w	d4524 <hal_i2c_read>

000d49a6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d49a6:	7c00      	ldrb	r0, [r0, #16]
   d49a8:	2100      	movs	r1, #0
   d49aa:	f7ff bdc3 	b.w	d4534 <hal_i2c_peek>

000d49ae <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d49ae:	7c00      	ldrb	r0, [r0, #16]
   d49b0:	2100      	movs	r1, #0
   d49b2:	f7ff bdc7 	b.w	d4544 <hal_i2c_flush>

000d49b6 <_ZN7TwoWireD0Ev>:
   d49b6:	b510      	push	{r4, lr}
   d49b8:	2114      	movs	r1, #20
   d49ba:	4604      	mov	r4, r0
   d49bc:	f000 ffb1 	bl	d5922 <_ZdlPvj>
   d49c0:	4620      	mov	r0, r4
   d49c2:	bd10      	pop	{r4, pc}

000d49c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d49c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d49c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d49ca:	4604      	mov	r4, r0
   d49cc:	4608      	mov	r0, r1
   d49ce:	2100      	movs	r1, #0
   d49d0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d49d4:	4b03      	ldr	r3, [pc, #12]	; (d49e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d49d6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d49d8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d49da:	4611      	mov	r1, r2
   d49dc:	f7ff fdc2 	bl	d4564 <hal_i2c_init>
}
   d49e0:	4620      	mov	r0, r4
   d49e2:	bd10      	pop	{r4, pc}
   d49e4:	000d5a7c 	.word	0x000d5a7c

000d49e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d49e8:	2300      	movs	r3, #0
   d49ea:	7c00      	ldrb	r0, [r0, #16]
   d49ec:	461a      	mov	r2, r3
   d49ee:	4619      	mov	r1, r3
   d49f0:	f7ff bd70 	b.w	d44d4 <hal_i2c_begin>

000d49f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d49f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d49f6:	2200      	movs	r2, #0
   d49f8:	2314      	movs	r3, #20
   d49fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d49fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d4a02:	780b      	ldrb	r3, [r1, #0]
   d4a04:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a08:	684b      	ldr	r3, [r1, #4]
   d4a0a:	9303      	str	r3, [sp, #12]
   d4a0c:	68cb      	ldr	r3, [r1, #12]
   d4a0e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d4a10:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d4a12:	7a0b      	ldrb	r3, [r1, #8]
   d4a14:	9305      	str	r3, [sp, #20]
   d4a16:	a901      	add	r1, sp, #4
   d4a18:	f7ff fdac 	bl	d4574 <hal_i2c_request_ex>
}
   d4a1c:	b007      	add	sp, #28
   d4a1e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a22 <_ZN7TwoWire11requestFromEhjh>:
{
   d4a22:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d4a24:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d4a26:	f88d 1000 	strb.w	r1, [sp]
   d4a2a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d4a2e:	9103      	str	r1, [sp, #12]
   d4a30:	bf18      	it	ne
   d4a32:	2301      	movne	r3, #1
   d4a34:	4669      	mov	r1, sp
    size_ = size;
   d4a36:	9201      	str	r2, [sp, #4]
   d4a38:	f88d 3008 	strb.w	r3, [sp, #8]
   d4a3c:	f7ff ffda 	bl	d49f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d4a40:	b005      	add	sp, #20
   d4a42:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a46 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d4a46:	2301      	movs	r3, #1
   d4a48:	f7ff bfeb 	b.w	d4a22 <_ZN7TwoWire11requestFromEhjh>

000d4a4c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d4a4c:	7c00      	ldrb	r0, [r0, #16]
   d4a4e:	2200      	movs	r2, #0
   d4a50:	f7ff bd48 	b.w	d44e4 <hal_i2c_begin_transmission>

000d4a54 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d4a54:	b2c9      	uxtb	r1, r1
   d4a56:	f7ff bff9 	b.w	d4a4c <_ZN7TwoWire17beginTransmissionEh>

000d4a5a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d4a5a:	7c00      	ldrb	r0, [r0, #16]
   d4a5c:	2200      	movs	r2, #0
   d4a5e:	f7ff bd49 	b.w	d44f4 <hal_i2c_end_transmission>

000d4a62 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d4a62:	2101      	movs	r1, #1
   d4a64:	f7ff bff9 	b.w	d4a5a <_ZN7TwoWire15endTransmissionEh>

000d4a68 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4a68:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4a6a:	7d03      	ldrb	r3, [r0, #20]
   d4a6c:	2b06      	cmp	r3, #6
{
   d4a6e:	b08d      	sub	sp, #52	; 0x34
   d4a70:	460e      	mov	r6, r1
   d4a72:	f100 0704 	add.w	r7, r0, #4
   d4a76:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d4a7a:	d012      	beq.n	d4aa2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d4a7c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4a80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4a84:	220a      	movs	r2, #10
   d4a86:	4630      	mov	r0, r6
   d4a88:	f000 f97f 	bl	d4d8a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4a8c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4a8e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d4a90:	d019      	beq.n	d4ac6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d4a92:	2c00      	cmp	r4, #0
   d4a94:	d0f4      	beq.n	d4a80 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d4a96:	212e      	movs	r1, #46	; 0x2e
   d4a98:	4630      	mov	r0, r6
   d4a9a:	f000 f94d 	bl	d4d38 <_ZN5Print5printEc>
   d4a9e:	4404      	add	r4, r0
   d4aa0:	e7ee      	b.n	d4a80 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4aa2:	232f      	movs	r3, #47	; 0x2f
   d4aa4:	466a      	mov	r2, sp
   d4aa6:	4639      	mov	r1, r7
   d4aa8:	200a      	movs	r0, #10
		buf[0] = 0;
   d4aaa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4aae:	f7ff fd71 	bl	d4594 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4ab2:	4668      	mov	r0, sp
   d4ab4:	f000 ff82 	bl	d59bc <strlen>
   d4ab8:	6833      	ldr	r3, [r6, #0]
   d4aba:	4602      	mov	r2, r0
   d4abc:	68db      	ldr	r3, [r3, #12]
   d4abe:	4669      	mov	r1, sp
   d4ac0:	4630      	mov	r0, r6
   d4ac2:	4798      	blx	r3
   d4ac4:	4604      	mov	r4, r0
    }
    return n;
}
   d4ac6:	4620      	mov	r0, r4
   d4ac8:	b00d      	add	sp, #52	; 0x34
   d4aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4acc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4acc:	b510      	push	{r4, lr}
   d4ace:	4b05      	ldr	r3, [pc, #20]	; (d4ae4 <_ZN9IPAddressC1Ev+0x18>)
   d4ad0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4ad2:	2211      	movs	r2, #17
   d4ad4:	f840 3b04 	str.w	r3, [r0], #4
   d4ad8:	2100      	movs	r1, #0
   d4ada:	f000 ff43 	bl	d5964 <memset>
}
   d4ade:	4620      	mov	r0, r4
   d4ae0:	bd10      	pop	{r4, pc}
   d4ae2:	bf00      	nop
   d4ae4:	000d5aa4 	.word	0x000d5aa4

000d4ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4ae8:	4603      	mov	r3, r0
   d4aea:	4a07      	ldr	r2, [pc, #28]	; (d4b08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4aec:	b510      	push	{r4, lr}
   d4aee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4af2:	f101 0210 	add.w	r2, r1, #16
   d4af6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4afa:	f843 4b04 	str.w	r4, [r3], #4
   d4afe:	4291      	cmp	r1, r2
   d4b00:	d1f9      	bne.n	d4af6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4b02:	780a      	ldrb	r2, [r1, #0]
   d4b04:	701a      	strb	r2, [r3, #0]
}
   d4b06:	bd10      	pop	{r4, pc}
   d4b08:	000d5aa4 	.word	0x000d5aa4

000d4b0c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d4b0c:	7d03      	ldrb	r3, [r0, #20]
   d4b0e:	2b04      	cmp	r3, #4
   d4b10:	d104      	bne.n	d4b1c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d4b12:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4b14:	3800      	subs	r0, #0
   d4b16:	bf18      	it	ne
   d4b18:	2001      	movne	r0, #1
   d4b1a:	4770      	bx	lr
    } else if (version() == 6) {
   d4b1c:	2b06      	cmp	r3, #6
   d4b1e:	d107      	bne.n	d4b30 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4b20:	6843      	ldr	r3, [r0, #4]
   d4b22:	b93b      	cbnz	r3, d4b34 <_ZNK9IPAddresscvbEv+0x28>
   d4b24:	6883      	ldr	r3, [r0, #8]
   d4b26:	b92b      	cbnz	r3, d4b34 <_ZNK9IPAddresscvbEv+0x28>
   d4b28:	68c3      	ldr	r3, [r0, #12]
   d4b2a:	b91b      	cbnz	r3, d4b34 <_ZNK9IPAddresscvbEv+0x28>
   d4b2c:	6900      	ldr	r0, [r0, #16]
   d4b2e:	e7f1      	b.n	d4b14 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d4b30:	2000      	movs	r0, #0
   d4b32:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d4b34:	2001      	movs	r0, #1
}
   d4b36:	4770      	bx	lr

000d4b38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4b38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4b3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4b3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4b42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4b46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4b4a:	2304      	movs	r3, #4
   d4b4c:	6041      	str	r1, [r0, #4]
   d4b4e:	7503      	strb	r3, [r0, #20]
}
   d4b50:	bd10      	pop	{r4, pc}
	...

000d4b54 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d4b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4b56:	4d04      	ldr	r5, [pc, #16]	; (d4b68 <_ZN9IPAddressC1Ehhhh+0x14>)
   d4b58:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d4b5a:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d4b5e:	9500      	str	r5, [sp, #0]
   d4b60:	f7ff ffea 	bl	d4b38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4b64:	b003      	add	sp, #12
   d4b66:	bd30      	pop	{r4, r5, pc}
   d4b68:	000d5aa4 	.word	0x000d5aa4

000d4b6c <_ZN9IPAddressaSEPKh>:
{
   d4b6c:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4b6e:	78cb      	ldrb	r3, [r1, #3]
   d4b70:	9300      	str	r3, [sp, #0]
   d4b72:	788b      	ldrb	r3, [r1, #2]
   d4b74:	784a      	ldrb	r2, [r1, #1]
   d4b76:	7809      	ldrb	r1, [r1, #0]
   d4b78:	f7ff ffde 	bl	d4b38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4b7c:	b002      	add	sp, #8
   d4b7e:	bd10      	pop	{r4, pc}

000d4b80 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4b80:	4b01      	ldr	r3, [pc, #4]	; (d4b88 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4b82:	4a02      	ldr	r2, [pc, #8]	; (d4b8c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4b84:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4b86:	4770      	bx	lr
   d4b88:	2003e650 	.word	0x2003e650
   d4b8c:	000d5ab0 	.word	0x000d5ab0

000d4b90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4b90:	2300      	movs	r3, #0
   d4b92:	6840      	ldr	r0, [r0, #4]
   d4b94:	461a      	mov	r2, r3
   d4b96:	f7ff be19 	b.w	d47cc <network_connect>

000d4b9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4b9a:	6840      	ldr	r0, [r0, #4]
   d4b9c:	2200      	movs	r2, #0
   d4b9e:	2102      	movs	r1, #2
   d4ba0:	f7ff be24 	b.w	d47ec <network_disconnect>

000d4ba4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4ba4:	2200      	movs	r2, #0
   d4ba6:	6840      	ldr	r0, [r0, #4]
   d4ba8:	4611      	mov	r1, r2
   d4baa:	f7ff be17 	b.w	d47dc <network_connecting>

000d4bae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4bae:	2200      	movs	r2, #0
   d4bb0:	6840      	ldr	r0, [r0, #4]
   d4bb2:	4611      	mov	r1, r2
   d4bb4:	f7ff be22 	b.w	d47fc <network_ready>

000d4bb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4bb8:	2300      	movs	r3, #0
   d4bba:	6840      	ldr	r0, [r0, #4]
   d4bbc:	461a      	mov	r2, r3
   d4bbe:	4619      	mov	r1, r3
   d4bc0:	f7ff be24 	b.w	d480c <network_on>

000d4bc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4bc4:	2300      	movs	r3, #0
   d4bc6:	6840      	ldr	r0, [r0, #4]
   d4bc8:	461a      	mov	r2, r3
   d4bca:	4619      	mov	r1, r3
   d4bcc:	f7ff be26 	b.w	d481c <network_off>

000d4bd0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4bd0:	6840      	ldr	r0, [r0, #4]
   d4bd2:	2200      	movs	r2, #0
   d4bd4:	f081 0101 	eor.w	r1, r1, #1
   d4bd8:	f7ff be28 	b.w	d482c <network_listen>

000d4bdc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4bdc:	6840      	ldr	r0, [r0, #4]
   d4bde:	2200      	movs	r2, #0
   d4be0:	f7ff be34 	b.w	d484c <network_set_listen_timeout>

000d4be4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4be4:	2200      	movs	r2, #0
   d4be6:	6840      	ldr	r0, [r0, #4]
   d4be8:	4611      	mov	r1, r2
   d4bea:	f7ff be37 	b.w	d485c <network_get_listen_timeout>

000d4bee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4bee:	2200      	movs	r2, #0
   d4bf0:	6840      	ldr	r0, [r0, #4]
   d4bf2:	4611      	mov	r1, r2
   d4bf4:	f7ff be22 	b.w	d483c <network_listening>

000d4bf8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4bfc:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4bfe:	b095      	sub	sp, #84	; 0x54
   d4c00:	4616      	mov	r6, r2
   d4c02:	460d      	mov	r5, r1
   d4c04:	4607      	mov	r7, r0
    IPAddress addr;
   d4c06:	f7ff ff61 	bl	d4acc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4c0a:	4621      	mov	r1, r4
   d4c0c:	2218      	movs	r2, #24
   d4c0e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4c10:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4c12:	f000 fea7 	bl	d5964 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4c16:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4c18:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4c1c:	4621      	mov	r1, r4
   d4c1e:	466b      	mov	r3, sp
   d4c20:	aa0c      	add	r2, sp, #48	; 0x30
   d4c22:	4630      	mov	r0, r6
   d4c24:	f7ff fcde 	bl	d45e4 <netdb_getaddrinfo>
    if (!r) {
   d4c28:	4604      	mov	r4, r0
   d4c2a:	2800      	cmp	r0, #0
   d4c2c:	d146      	bne.n	d4cbc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c2e:	4602      	mov	r2, r0
   d4c30:	2101      	movs	r1, #1
   d4c32:	6868      	ldr	r0, [r5, #4]
   d4c34:	f7ff fde2 	bl	d47fc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c38:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4c3a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c3c:	4622      	mov	r2, r4
   d4c3e:	6868      	ldr	r0, [r5, #4]
   d4c40:	f7ff fddc 	bl	d47fc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c44:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4c46:	4681      	mov	r9, r0
        bool ok = false;
   d4c48:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c4a:	2e00      	cmp	r6, #0
   d4c4c:	d036      	beq.n	d4cbc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4c4e:	2900      	cmp	r1, #0
   d4c50:	d134      	bne.n	d4cbc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4c52:	6873      	ldr	r3, [r6, #4]
   d4c54:	2b02      	cmp	r3, #2
   d4c56:	d003      	beq.n	d4c60 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4c58:	2b0a      	cmp	r3, #10
   d4c5a:	d00b      	beq.n	d4c74 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4c5c:	69f6      	ldr	r6, [r6, #28]
   d4c5e:	e7f4      	b.n	d4c4a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4c60:	f1b8 0f00 	cmp.w	r8, #0
   d4c64:	d004      	beq.n	d4c70 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4c66:	6971      	ldr	r1, [r6, #20]
   d4c68:	4638      	mov	r0, r7
   d4c6a:	3104      	adds	r1, #4
   d4c6c:	f7ff ff7e 	bl	d4b6c <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4c70:	4641      	mov	r1, r8
   d4c72:	e7f3      	b.n	d4c5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4c74:	f1b9 0f00 	cmp.w	r9, #0
   d4c78:	d101      	bne.n	d4c7e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4c7a:	4649      	mov	r1, r9
   d4c7c:	e7ee      	b.n	d4c5c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4c7e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4c80:	2210      	movs	r2, #16
   d4c82:	a801      	add	r0, sp, #4
   d4c84:	f000 fe6e 	bl	d5964 <memset>
                    a.v = 6;
   d4c88:	2306      	movs	r3, #6
   d4c8a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4c8e:	ad01      	add	r5, sp, #4
   d4c90:	f104 0308 	add.w	r3, r4, #8
   d4c94:	3418      	adds	r4, #24
   d4c96:	6818      	ldr	r0, [r3, #0]
   d4c98:	6859      	ldr	r1, [r3, #4]
   d4c9a:	462a      	mov	r2, r5
   d4c9c:	c203      	stmia	r2!, {r0, r1}
   d4c9e:	3308      	adds	r3, #8
   d4ca0:	42a3      	cmp	r3, r4
   d4ca2:	4615      	mov	r5, r2
   d4ca4:	d1f7      	bne.n	d4c96 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4ca6:	a901      	add	r1, sp, #4
   d4ca8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4caa:	ad07      	add	r5, sp, #28
   d4cac:	f7ff ff1c 	bl	d4ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4cb2:	1d3c      	adds	r4, r7, #4
   d4cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4cb6:	682b      	ldr	r3, [r5, #0]
   d4cb8:	7023      	strb	r3, [r4, #0]
   d4cba:	e7de      	b.n	d4c7a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4cbc:	9800      	ldr	r0, [sp, #0]
   d4cbe:	f7ff fc89 	bl	d45d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4cc2:	4638      	mov	r0, r7
   d4cc4:	b015      	add	sp, #84	; 0x54
   d4cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4ccc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4ccc:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4cce:	4a03      	ldr	r2, [pc, #12]	; (d4cdc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4cd0:	601a      	str	r2, [r3, #0]
   d4cd2:	2200      	movs	r2, #0
   d4cd4:	605a      	str	r2, [r3, #4]

} // spark
   d4cd6:	4770      	bx	lr
   d4cd8:	2003e654 	.word	0x2003e654
   d4cdc:	000d5abc 	.word	0x000d5abc

000d4ce0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ce2:	4606      	mov	r6, r0
   d4ce4:	460d      	mov	r5, r1
  size_t n = 0;
   d4ce6:	188f      	adds	r7, r1, r2
   d4ce8:	2400      	movs	r4, #0
  while (size--) {
   d4cea:	42bd      	cmp	r5, r7
   d4cec:	d00c      	beq.n	d4d08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cee:	6833      	ldr	r3, [r6, #0]
   d4cf0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cf4:	689b      	ldr	r3, [r3, #8]
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	4798      	blx	r3
     if (chunk>=0)
   d4cfa:	1e03      	subs	r3, r0, #0
   d4cfc:	db01      	blt.n	d4d02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cfe:	441c      	add	r4, r3
  while (size--) {
   d4d00:	e7f3      	b.n	d4cea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d02:	2c00      	cmp	r4, #0
   d4d04:	bf08      	it	eq
   d4d06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d0c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d4d0c:	b513      	push	{r0, r1, r4, lr}
   d4d0e:	4604      	mov	r4, r0
    }
   d4d10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d12:	b159      	cbz	r1, d4d2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d14:	9101      	str	r1, [sp, #4]
   d4d16:	f000 fe51 	bl	d59bc <strlen>
   d4d1a:	6823      	ldr	r3, [r4, #0]
   d4d1c:	9901      	ldr	r1, [sp, #4]
   d4d1e:	68db      	ldr	r3, [r3, #12]
   d4d20:	4602      	mov	r2, r0
   d4d22:	4620      	mov	r0, r4
    }
   d4d24:	b002      	add	sp, #8
   d4d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4d2a:	4718      	bx	r3
    }
   d4d2c:	b002      	add	sp, #8
   d4d2e:	bd10      	pop	{r4, pc}

000d4d30 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4d30:	b508      	push	{r3, lr}
  return write(str);
   d4d32:	f7ff ffeb 	bl	d4d0c <_ZN5Print5writeEPKc>
}
   d4d36:	bd08      	pop	{r3, pc}

000d4d38 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4d38:	6803      	ldr	r3, [r0, #0]
   d4d3a:	689b      	ldr	r3, [r3, #8]
   d4d3c:	4718      	bx	r3

000d4d3e <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d4d3e:	680a      	ldr	r2, [r1, #0]
 {
   d4d40:	460b      	mov	r3, r1
   return x.printTo(*this);
   d4d42:	6812      	ldr	r2, [r2, #0]
   d4d44:	4601      	mov	r1, r0
   d4d46:	4618      	mov	r0, r3
   d4d48:	4710      	bx	r2

000d4d4a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d4a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d4c:	210d      	movs	r1, #13
{
   d4d4e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d50:	f7ff fff2 	bl	d4d38 <_ZN5Print5printEc>
  n += print('\n');
   d4d54:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4d56:	4604      	mov	r4, r0
  n += print('\n');
   d4d58:	4628      	mov	r0, r5
   d4d5a:	f7ff ffed 	bl	d4d38 <_ZN5Print5printEc>
  return n;
}
   d4d5e:	4420      	add	r0, r4
   d4d60:	bd38      	pop	{r3, r4, r5, pc}

000d4d62 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4d62:	b538      	push	{r3, r4, r5, lr}
   d4d64:	4605      	mov	r5, r0
  return write(str);
   d4d66:	f7ff ffd1 	bl	d4d0c <_ZN5Print5writeEPKc>
   d4d6a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d4d6c:	4628      	mov	r0, r5
   d4d6e:	f7ff ffec 	bl	d4d4a <_ZN5Print7printlnEv>
  return n;
}
   d4d72:	4420      	add	r0, r4
   d4d74:	bd38      	pop	{r3, r4, r5, pc}

000d4d76 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

 size_t Print::println(const Printable& x)
 {
   d4d76:	b538      	push	{r3, r4, r5, lr}
   d4d78:	4605      	mov	r5, r0
   size_t n = print(x);
   d4d7a:	f7ff ffe0 	bl	d4d3e <_ZN5Print5printERK9Printable>
   d4d7e:	4604      	mov	r4, r0
   n += println();
   d4d80:	4628      	mov	r0, r5
   d4d82:	f7ff ffe2 	bl	d4d4a <_ZN5Print7printlnEv>
   return n;
 }
   d4d86:	4420      	add	r0, r4
   d4d88:	bd38      	pop	{r3, r4, r5, pc}

000d4d8a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d8a:	b530      	push	{r4, r5, lr}
   d4d8c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d8e:	2300      	movs	r3, #0
   d4d90:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d94:	2a01      	cmp	r2, #1
   d4d96:	bf98      	it	ls
   d4d98:	220a      	movls	r2, #10
   d4d9a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d9c:	460d      	mov	r5, r1
   d4d9e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4da2:	fb01 5312 	mls	r3, r1, r2, r5
   d4da6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4daa:	2b09      	cmp	r3, #9
   d4dac:	bf94      	ite	ls
   d4dae:	3330      	addls	r3, #48	; 0x30
   d4db0:	3337      	addhi	r3, #55	; 0x37
   d4db2:	b2db      	uxtb	r3, r3
  } while(n);
   d4db4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4db6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4dba:	d9ef      	bls.n	d4d9c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4dbc:	4621      	mov	r1, r4
   d4dbe:	f7ff ffa5 	bl	d4d0c <_ZN5Print5writeEPKc>
}
   d4dc2:	b00b      	add	sp, #44	; 0x2c
   d4dc4:	bd30      	pop	{r4, r5, pc}

000d4dc6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4dc6:	b510      	push	{r4, lr}
   d4dc8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4dca:	f7ff fd87 	bl	d48dc <_ZNSt14_Function_baseD1Ev>
   d4dce:	4620      	mov	r0, r4
   d4dd0:	bd10      	pop	{r4, pc}
	...

000d4dd4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4dd4:	4803      	ldr	r0, [pc, #12]	; (d4de4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4dd6:	4a04      	ldr	r2, [pc, #16]	; (d4de8 <_GLOBAL__sub_I_RGB+0x14>)
   d4dd8:	4904      	ldr	r1, [pc, #16]	; (d4dec <_GLOBAL__sub_I_RGB+0x18>)
   d4dda:	2300      	movs	r3, #0
   d4ddc:	6083      	str	r3, [r0, #8]
   d4dde:	f000 bd9b 	b.w	d5918 <__aeabi_atexit>
   d4de2:	bf00      	nop
   d4de4:	2003e65c 	.word	0x2003e65c
   d4de8:	2003e5b8 	.word	0x2003e5b8
   d4dec:	000d4dc7 	.word	0x000d4dc7

000d4df0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4df0:	b510      	push	{r4, lr}
   d4df2:	4604      	mov	r4, r0
   d4df4:	4608      	mov	r0, r1
{
    _spi = spi;
   d4df6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4df8:	f7ff fc2c 	bl	d4654 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4dfc:	2300      	movs	r3, #0
   d4dfe:	6063      	str	r3, [r4, #4]
}
   d4e00:	4620      	mov	r0, r4
   d4e02:	bd10      	pop	{r4, pc}

000d4e04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4e04:	b510      	push	{r4, lr}
   d4e06:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4e08:	6800      	ldr	r0, [r0, #0]
   d4e0a:	b118      	cbz	r0, d4e14 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4e0c:	f7ff fd36 	bl	d487c <free>
            wakeupSource_ = nullptr;
   d4e10:	2300      	movs	r3, #0
   d4e12:	6023      	str	r3, [r4, #0]
        }
    }
   d4e14:	bd10      	pop	{r4, pc}

000d4e16 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4e16:	b510      	push	{r4, lr}
   d4e18:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d4e1a:	f7ff fff3 	bl	d4e04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d4e1e:	4620      	mov	r0, r4
   d4e20:	bd10      	pop	{r4, pc}
	...

000d4e24 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4e24:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4e26:	4b09      	ldr	r3, [pc, #36]	; (d4e4c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d4e28:	4c09      	ldr	r4, [pc, #36]	; (d4e50 <_GLOBAL__sub_I_System+0x2c>)
   d4e2a:	2202      	movs	r2, #2
   d4e2c:	2000      	movs	r0, #0
   d4e2e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4e30:	4b08      	ldr	r3, [pc, #32]	; (d4e54 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4e32:	6020      	str	r0, [r4, #0]
   d4e34:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4e36:	71a0      	strb	r0, [r4, #6]
   d4e38:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4e3a:	f7ff fc93 	bl	d4764 <set_system_mode>
SystemClass System;
   d4e3e:	4620      	mov	r0, r4
   d4e40:	4a05      	ldr	r2, [pc, #20]	; (d4e58 <_GLOBAL__sub_I_System+0x34>)
   d4e42:	4906      	ldr	r1, [pc, #24]	; (d4e5c <_GLOBAL__sub_I_System+0x38>)
   d4e44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4e48:	f000 bd66 	b.w	d5918 <__aeabi_atexit>
   d4e4c:	2003e678 	.word	0x2003e678
   d4e50:	2003e66c 	.word	0x2003e66c
   d4e54:	ffff0000 	.word	0xffff0000
   d4e58:	2003e5b8 	.word	0x2003e5b8
   d4e5c:	000d4e17 	.word	0x000d4e17

000d4e60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4e60:	4b02      	ldr	r3, [pc, #8]	; (d4e6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4e62:	681a      	ldr	r2, [r3, #0]
   d4e64:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4e66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4e68:	4770      	bx	lr
   d4e6a:	bf00      	nop
   d4e6c:	2003e550 	.word	0x2003e550
   d4e70:	2003e67c 	.word	0x2003e67c

000d4e74 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d4e74:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4e76:	6804      	ldr	r4, [r0, #0]
   d4e78:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d4e7a:	46a4      	mov	ip, r4
    }
   d4e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d4e80:	4760      	bx	ip

000d4e82 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d4e82:	6803      	ldr	r3, [r0, #0]
   d4e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4e86:	4718      	bx	r3

000d4e88 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d4e88:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d4e8a:	4770      	bx	lr

000d4e8c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d4e8c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d4e8e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d4e90:	1a10      	subs	r0, r2, r0
   d4e92:	4770      	bx	lr

000d4e94 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d4e94:	b507      	push	{r0, r1, r2, lr}
    return write(&byte, 1);
   d4e96:	6803      	ldr	r3, [r0, #0]
size_t UDP::write(uint8_t byte) {
   d4e98:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&byte, 1);
   d4e9c:	68db      	ldr	r3, [r3, #12]
   d4e9e:	2201      	movs	r2, #1
   d4ea0:	f10d 0107 	add.w	r1, sp, #7
   d4ea4:	4798      	blx	r3
}
   d4ea6:	b003      	add	sp, #12
   d4ea8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4eac <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d4eac:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d4eae:	6803      	ldr	r3, [r0, #0]
   d4eb0:	691b      	ldr	r3, [r3, #16]
int UDP::read() {
   d4eb2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d4eb4:	4798      	blx	r3
   d4eb6:	b128      	cbz	r0, d4ec4 <_ZN3UDP4readEv+0x18>
   d4eb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4eba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4ebc:	1c59      	adds	r1, r3, #1
   d4ebe:	86e1      	strh	r1, [r4, #54]	; 0x36
   d4ec0:	5cd0      	ldrb	r0, [r2, r3]
}
   d4ec2:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset++] : -1;
   d4ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4ec8:	e7fb      	b.n	d4ec2 <_ZN3UDP4readEv+0x16>

000d4eca <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d4eca:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d4ecc:	6803      	ldr	r3, [r0, #0]
   d4ece:	691b      	ldr	r3, [r3, #16]
int UDP::peek() {
   d4ed0:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d4ed2:	4798      	blx	r3
   d4ed4:	b118      	cbz	r0, d4ede <_ZN3UDP4peekEv+0x14>
   d4ed6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d4ed8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d4eda:	5cd0      	ldrb	r0, [r2, r3]
}
   d4edc:	bd10      	pop	{r4, pc}
    return available() ? _buffer[_offset] : -1;
   d4ede:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d4ee2:	e7fb      	b.n	d4edc <_ZN3UDP4peekEv+0x12>

000d4ee4 <_ZN3UDP5flushEv>:

void UDP::flush() {
}
   d4ee4:	4770      	bx	lr

000d4ee6 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d4ee6:	b410      	push	{r4}
   d4ee8:	4603      	mov	r3, r0
   d4eea:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d4eec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    int size = _total - _offset;
   d4eee:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   d4ef0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    return p.write(_buffer + _offset, size);
   d4ef2:	6803      	ldr	r3, [r0, #0]
   d4ef4:	1a52      	subs	r2, r2, r1
   d4ef6:	68db      	ldr	r3, [r3, #12]
   d4ef8:	4421      	add	r1, r4
}
   d4efa:	f85d 4b04 	ldr.w	r4, [sp], #4
    return p.write(_buffer + _offset, size);
   d4efe:	4718      	bx	r3

000d4f00 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d4f00:	f1a0 0010 	sub.w	r0, r0, #16
   d4f04:	f7ff bfef 	b.w	d4ee6 <_ZNK3UDP7printToER5Print>

000d4f08 <_ZN3UDP5beginEtm>:
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4f08:	b570      	push	{r4, r5, r6, lr}
    stop();
   d4f0a:	6803      	ldr	r3, [r0, #0]
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4f0c:	b08c      	sub	sp, #48	; 0x30
    stop();
   d4f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d4f10:	4604      	mov	r4, r0
   d4f12:	460e      	mov	r6, r1
   d4f14:	4615      	mov	r5, r2
    stop();
   d4f16:	4798      	blx	r3
    const int one = 1;
   d4f18:	2301      	movs	r3, #1
    struct sockaddr_in6 saddr = {};
   d4f1a:	221c      	movs	r2, #28
   d4f1c:	2100      	movs	r1, #0
   d4f1e:	a805      	add	r0, sp, #20
    const int one = 1;
   d4f20:	9302      	str	r3, [sp, #8]
    struct sockaddr_in6 saddr = {};
   d4f22:	f000 fd1f 	bl	d5964 <memset>
    saddr.sin6_len = sizeof(saddr);
   d4f26:	f640 231c 	movw	r3, #2588	; 0xa1c
    saddr.sin6_port = htons(port);
   d4f2a:	4630      	mov	r0, r6
    saddr.sin6_len = sizeof(saddr);
   d4f2c:	f8ad 3014 	strh.w	r3, [sp, #20]
    saddr.sin6_port = htons(port);
   d4f30:	f7ff fb48 	bl	d45c4 <inet_htons>
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4f34:	2211      	movs	r2, #17
    saddr.sin6_port = htons(port);
   d4f36:	f8ad 0016 	strh.w	r0, [sp, #22]
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4f3a:	2102      	movs	r1, #2
   d4f3c:	200a      	movs	r0, #10
   d4f3e:	f7ff fb81 	bl	d4644 <sock_socket>
    if (_sock < 0) {
   d4f42:	2800      	cmp	r0, #0
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d4f44:	6160      	str	r0, [r4, #20]
    if (_sock < 0) {
   d4f46:	db25      	blt.n	d4f94 <_ZN3UDP5beginEtm+0x8c>
    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d4f48:	2204      	movs	r2, #4
   d4f4a:	9200      	str	r2, [sp, #0]
   d4f4c:	ab02      	add	r3, sp, #8
   d4f4e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4f52:	f7ff fb57 	bl	d4604 <sock_setsockopt>
   d4f56:	b9e8      	cbnz	r0, d4f94 <_ZN3UDP5beginEtm+0x8c>
    if (nif != 0) {
   d4f58:	b195      	cbz	r5, d4f80 <_ZN3UDP5beginEtm+0x78>
        struct ifreq ifr = {};
   d4f5a:	9003      	str	r0, [sp, #12]
   d4f5c:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d4f60:	a903      	add	r1, sp, #12
   d4f62:	b2e8      	uxtb	r0, r5
   d4f64:	f7ff fb0e 	bl	d4584 <if_index_to_name>
   d4f68:	b9a0      	cbnz	r0, d4f94 <_ZN3UDP5beginEtm+0x8c>
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d4f6a:	2306      	movs	r3, #6
   d4f6c:	9300      	str	r3, [sp, #0]
   d4f6e:	6960      	ldr	r0, [r4, #20]
   d4f70:	ab03      	add	r3, sp, #12
   d4f72:	f241 020b 	movw	r2, #4107	; 0x100b
   d4f76:	f640 71ff 	movw	r1, #4095	; 0xfff
   d4f7a:	f7ff fb43 	bl	d4604 <sock_setsockopt>
   d4f7e:	b948      	cbnz	r0, d4f94 <_ZN3UDP5beginEtm+0x8c>
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d4f80:	6960      	ldr	r0, [r4, #20]
   d4f82:	221c      	movs	r2, #28
   d4f84:	a905      	add	r1, sp, #20
   d4f86:	f7ff fb35 	bl	d45f4 <sock_bind>
   d4f8a:	b918      	cbnz	r0, d4f94 <_ZN3UDP5beginEtm+0x8c>
    _nif = nif;
   d4f8c:	6465      	str	r5, [r4, #68]	; 0x44
    bound = true;
   d4f8e:	2001      	movs	r0, #1
}
   d4f90:	b00c      	add	sp, #48	; 0x30
   d4f92:	bd70      	pop	{r4, r5, r6, pc}
        stop();
   d4f94:	6823      	ldr	r3, [r4, #0]
   d4f96:	4620      	mov	r0, r4
   d4f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4f9a:	4798      	blx	r3
   d4f9c:	2000      	movs	r0, #0
   d4f9e:	e7f7      	b.n	d4f90 <_ZN3UDP5beginEtm+0x88>

000d4fa0 <_ZN3UDP4stopEv>:
void UDP::stop() {
   d4fa0:	b510      	push	{r4, lr}
   d4fa2:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d4fa4:	6940      	ldr	r0, [r0, #20]
   d4fa6:	2800      	cmp	r0, #0
   d4fa8:	db01      	blt.n	d4fae <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d4faa:	f7ff fb33 	bl	d4614 <sock_close>
    _sock = -1;
   d4fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4fb2:	6163      	str	r3, [r4, #20]
    _offset = 0;
   d4fb4:	2300      	movs	r3, #0
   d4fb6:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d4fb8:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d4fba:	bd10      	pop	{r4, pc}

000d4fbc <_ZN3UDP5writeEPKhj>:
size_t UDP::write(const uint8_t *buffer, size_t size) {
   d4fbc:	b570      	push	{r4, r5, r6, lr}
   d4fbe:	4605      	mov	r5, r0
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4fc0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d4fc2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
   d4fc4:	b168      	cbz	r0, d4fe2 <_ZN3UDP5writeEPKhj+0x26>
   d4fc6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   d4fc8:	1b9c      	subs	r4, r3, r6
    if (size > available) {
   d4fca:	4294      	cmp	r4, r2
   d4fcc:	bf28      	it	cs
   d4fce:	4614      	movcs	r4, r2
    memcpy(_buffer + _offset, buffer, size);
   d4fd0:	4622      	mov	r2, r4
   d4fd2:	4430      	add	r0, r6
   d4fd4:	f000 fcb8 	bl	d5948 <memcpy>
    _offset += size;
   d4fd8:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d4fda:	4423      	add	r3, r4
   d4fdc:	86eb      	strh	r3, [r5, #54]	; 0x36
}
   d4fde:	4620      	mov	r0, r4
   d4fe0:	bd70      	pop	{r4, r5, r6, pc}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d4fe2:	4604      	mov	r4, r0
   d4fe4:	e7f1      	b.n	d4fca <_ZN3UDP5writeEPKhj+0xe>

000d4fe6 <_ZN3UDP4readEPhj>:
int UDP::read(unsigned char* buffer, size_t len) {
   d4fe6:	b5d0      	push	{r4, r6, r7, lr}
    if (available()) {
   d4fe8:	6803      	ldr	r3, [r0, #0]
   d4fea:	691b      	ldr	r3, [r3, #16]
int UDP::read(unsigned char* buffer, size_t len) {
   d4fec:	4604      	mov	r4, r0
   d4fee:	460f      	mov	r7, r1
   d4ff0:	4616      	mov	r6, r2
    if (available()) {
   d4ff2:	4798      	blx	r3
   d4ff4:	b190      	cbz	r0, d501c <_ZN3UDP4readEPhj+0x36>
        read = min(int(len), available());
   d4ff6:	6823      	ldr	r3, [r4, #0]
   d4ff8:	4620      	mov	r0, r4
   d4ffa:	691b      	ldr	r3, [r3, #16]
   d4ffc:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d4ffe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5000:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5002:	4286      	cmp	r6, r0
   d5004:	bfa8      	it	ge
   d5006:	4606      	movge	r6, r0
   d5008:	4419      	add	r1, r3
   d500a:	4632      	mov	r2, r6
   d500c:	4638      	mov	r0, r7
   d500e:	f000 fc9b 	bl	d5948 <memcpy>
        _offset += read;
   d5012:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5014:	4433      	add	r3, r6
   d5016:	86e3      	strh	r3, [r4, #54]	; 0x36
}
   d5018:	4630      	mov	r0, r6
   d501a:	bdd0      	pop	{r4, r6, r7, pc}
    int read = -1;
   d501c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    return read;
   d5020:	e7fa      	b.n	d5018 <_ZN3UDP4readEPhj+0x32>
	...

000d5024 <_ZN3UDP8remoteIPEv>:
    virtual IPAddress remoteIP() { return _remoteIP; };
   d5024:	b570      	push	{r4, r5, r6, lr}
   d5026:	4604      	mov	r4, r0
   d5028:	4b05      	ldr	r3, [pc, #20]	; (d5040 <_ZN3UDP8remoteIPEv+0x1c>)
   d502a:	f844 3b04 	str.w	r3, [r4], #4
   d502e:	f101 0520 	add.w	r5, r1, #32
   d5032:	4606      	mov	r6, r0
   d5034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5038:	682b      	ldr	r3, [r5, #0]
   d503a:	7023      	strb	r3, [r4, #0]
   d503c:	4630      	mov	r0, r6
   d503e:	bd70      	pop	{r4, r5, r6, pc}
   d5040:	000d5aa4 	.word	0x000d5aa4

000d5044 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5044:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5046:	4696      	mov	lr, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5048:	6802      	ldr	r2, [r0, #0]
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d504a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d504c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d504e:	4a0a      	ldr	r2, [pc, #40]	; (d5078 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5050:	9202      	str	r2, [sp, #8]
   d5052:	1d1c      	adds	r4, r3, #4
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5054:	468c      	mov	ip, r1
   d5056:	4606      	mov	r6, r0
   d5058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d505a:	ad03      	add	r5, sp, #12
   d505c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d505e:	6823      	ldr	r3, [r4, #0]
   d5060:	702b      	strb	r3, [r5, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5062:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5066:	9300      	str	r3, [sp, #0]
   d5068:	4672      	mov	r2, lr
   d506a:	ab02      	add	r3, sp, #8
   d506c:	4661      	mov	r1, ip
   d506e:	4630      	mov	r0, r6
   d5070:	47b8      	blx	r7
    }
   d5072:	b009      	add	sp, #36	; 0x24
   d5074:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5076:	bf00      	nop
   d5078:	000d5aa4 	.word	0x000d5aa4

000d507c <_ZN3UDP9endPacketEv>:
int UDP::endPacket() {
   d507c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d507e:	6803      	ldr	r3, [r0, #0]
int UDP::endPacket() {
   d5080:	b089      	sub	sp, #36	; 0x24
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5082:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5084:	4b0c      	ldr	r3, [pc, #48]	; (d50b8 <_ZN3UDP9endPacketEv+0x3c>)
   d5086:	9302      	str	r3, [sp, #8]
   d5088:	f100 0620 	add.w	r6, r0, #32
int UDP::endPacket() {
   d508c:	4604      	mov	r4, r0
   d508e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5090:	ad03      	add	r5, sp, #12
   d5092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5094:	6833      	ldr	r3, [r6, #0]
   d5096:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5098:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d509a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   d509c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d509e:	9300      	str	r3, [sp, #0]
   d50a0:	4620      	mov	r0, r4
   d50a2:	ab02      	add	r3, sp, #8
   d50a4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d50a6:	6823      	ldr	r3, [r4, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d50a8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d50aa:	69db      	ldr	r3, [r3, #28]
   d50ac:	4620      	mov	r0, r4
   d50ae:	4798      	blx	r3
}
   d50b0:	4628      	mov	r0, r5
   d50b2:	b009      	add	sp, #36	; 0x24
   d50b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d50b6:	bf00      	nop
   d50b8:	000d5aa4 	.word	0x000d5aa4

000d50bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d50bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d50be:	7843      	ldrb	r3, [r0, #1]
   d50c0:	2b02      	cmp	r3, #2
inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d50c2:	b08d      	sub	sp, #52	; 0x34
   d50c4:	4605      	mov	r5, r0
   d50c6:	460c      	mov	r4, r1
   d50c8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d50ca:	d104      	bne.n	d50d6 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x1a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d50cc:	1d01      	adds	r1, r0, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d50ce:	4620      	mov	r0, r4
   d50d0:	f7ff fd4c 	bl	d4b6c <_ZN9IPAddressaSEPKh>
   d50d4:	e022      	b.n	d511c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x60>
    else if (saddr->sa_family == AF_INET6) {
   d50d6:	2b0a      	cmp	r3, #10
   d50d8:	d125      	bne.n	d5126 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
        HAL_IPAddress a = {};
   d50da:	2211      	movs	r2, #17
   d50dc:	2100      	movs	r1, #0
   d50de:	a801      	add	r0, sp, #4
   d50e0:	f000 fc40 	bl	d5964 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d50e4:	68ab      	ldr	r3, [r5, #8]
   d50e6:	b303      	cbz	r3, d512a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6e>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d50e8:	f105 0308 	add.w	r3, r5, #8
   d50ec:	ae01      	add	r6, sp, #4
   d50ee:	f105 0c18 	add.w	ip, r5, #24
   d50f2:	6818      	ldr	r0, [r3, #0]
   d50f4:	6859      	ldr	r1, [r3, #4]
   d50f6:	4632      	mov	r2, r6
   d50f8:	c203      	stmia	r2!, {r0, r1}
   d50fa:	3308      	adds	r3, #8
   d50fc:	4563      	cmp	r3, ip
   d50fe:	4616      	mov	r6, r2
   d5100:	d1f7      	bne.n	d50f2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x36>
            a.v = 6;
   d5102:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5104:	a901      	add	r1, sp, #4
   d5106:	a806      	add	r0, sp, #24
   d5108:	ae07      	add	r6, sp, #28
            a.v = 6;
   d510a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d510e:	f7ff fceb 	bl	d4ae8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5112:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5114:	3404      	adds	r4, #4
   d5116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5118:	6833      	ldr	r3, [r6, #0]
   d511a:	7023      	strb	r3, [r4, #0]
        }
        if (port) {
   d511c:	b11f      	cbz	r7, d5126 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6a>
            *port = ntohs(in6addr->sin6_port);
   d511e:	8868      	ldrh	r0, [r5, #2]
   d5120:	f7ff fa48 	bl	d45b4 <inet_ntohs>
   d5124:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5126:	b00d      	add	sp, #52	; 0x34
   d5128:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d512a:	68eb      	ldr	r3, [r5, #12]
   d512c:	2b00      	cmp	r3, #0
   d512e:	d1db      	bne.n	d50e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
   d5130:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5134:	692e      	ldr	r6, [r5, #16]
   d5136:	f7ff fa35 	bl	d45a4 <inet_htonl>
   d513a:	4286      	cmp	r6, r0
   d513c:	d1d4      	bne.n	d50e8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x2c>
            addr = (const uint8_t*)(&ptr[3]);
   d513e:	f105 0114 	add.w	r1, r5, #20
   d5142:	e7c4      	b.n	d50ce <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x12>

000d5144 <_ZN3UDP11beginPacketEPKct>:
int UDP::beginPacket(const char *host, uint16_t port) {
   d5144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5148:	4617      	mov	r7, r2
   d514a:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d514c:	2200      	movs	r2, #0
int UDP::beginPacket(const char *host, uint16_t port) {
   d514e:	4606      	mov	r6, r0
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5150:	ab01      	add	r3, sp, #4
int UDP::beginPacket(const char *host, uint16_t port) {
   d5152:	4608      	mov	r0, r1
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5154:	4611      	mov	r1, r2
    struct addrinfo* ais = nullptr;
   d5156:	9201      	str	r2, [sp, #4]
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5158:	f7ff fa44 	bl	d45e4 <netdb_getaddrinfo>
   d515c:	1e04      	subs	r4, r0, #0
   d515e:	db20      	blt.n	d51a2 <_ZN3UDP11beginPacketEPKct+0x5e>
    if (ais && ais->ai_addr) {
   d5160:	9b01      	ldr	r3, [sp, #4]
   d5162:	b32b      	cbz	r3, d51b0 <_ZN3UDP11beginPacketEPKct+0x6c>
   d5164:	695b      	ldr	r3, [r3, #20]
   d5166:	b31b      	cbz	r3, d51b0 <_ZN3UDP11beginPacketEPKct+0x6c>
        IPAddress addr;
   d5168:	a802      	add	r0, sp, #8
   d516a:	f7ff fcaf 	bl	d4acc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d516e:	9b01      	ldr	r3, [sp, #4]
   d5170:	2200      	movs	r2, #0
   d5172:	6958      	ldr	r0, [r3, #20]
   d5174:	a902      	add	r1, sp, #8
   d5176:	f7ff ffa1 	bl	d50bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
        return static_cast<const IPAddress*>(this)->operator bool();
   d517a:	a802      	add	r0, sp, #8
   d517c:	f7ff fcc6 	bl	d4b0c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5180:	b1b0      	cbz	r0, d51b0 <_ZN3UDP11beginPacketEPKct+0x6c>
            return beginPacket(addr, port);
   d5182:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d5184:	ad03      	add	r5, sp, #12
   d5186:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d518a:	4b0b      	ldr	r3, [pc, #44]	; (d51b8 <_ZN3UDP11beginPacketEPKct+0x74>)
   d518c:	9308      	str	r3, [sp, #32]
   d518e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5190:	ac09      	add	r4, sp, #36	; 0x24
   d5192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5194:	682b      	ldr	r3, [r5, #0]
   d5196:	7023      	strb	r3, [r4, #0]
   d5198:	463a      	mov	r2, r7
   d519a:	a908      	add	r1, sp, #32
   d519c:	4630      	mov	r0, r6
   d519e:	47c0      	blx	r8
   d51a0:	4604      	mov	r4, r0
    SCOPE_GUARD({
   d51a2:	9801      	ldr	r0, [sp, #4]
   d51a4:	f7ff fa16 	bl	d45d4 <netdb_freeaddrinfo>
}
   d51a8:	4620      	mov	r0, r4
   d51aa:	b00e      	add	sp, #56	; 0x38
   d51ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return -1;
   d51b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d51b4:	e7f5      	b.n	d51a2 <_ZN3UDP11beginPacketEPKct+0x5e>
   d51b6:	bf00      	nop
   d51b8:	000d5aa4 	.word	0x000d5aa4

000d51bc <_ZN3UDP13receivePacketEPhjm>:
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d51bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (isOpen(_sock) && buffer) {
   d51c0:	f8d0 9014 	ldr.w	r9, [r0, #20]
   d51c4:	f1b9 0f00 	cmp.w	r9, #0
int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d51c8:	b090      	sub	sp, #64	; 0x40
   d51ca:	4605      	mov	r5, r0
   d51cc:	460e      	mov	r6, r1
   d51ce:	4690      	mov	r8, r2
   d51d0:	461c      	mov	r4, r3
    if (isOpen(_sock) && buffer) {
   d51d2:	db3c      	blt.n	d524e <_ZN3UDP13receivePacketEPhjm+0x92>
   d51d4:	2900      	cmp	r1, #0
   d51d6:	d03a      	beq.n	d524e <_ZN3UDP13receivePacketEPhjm+0x92>
        sockaddr_storage saddr = {};
   d51d8:	f04f 0a1c 	mov.w	sl, #28
   d51dc:	af09      	add	r7, sp, #36	; 0x24
   d51de:	4652      	mov	r2, sl
   d51e0:	2100      	movs	r1, #0
   d51e2:	4638      	mov	r0, r7
   d51e4:	f000 fbbe 	bl	d5964 <memset>
        socklen_t slen = sizeof(saddr);
   d51e8:	f8cd a00c 	str.w	sl, [sp, #12]
        if (timeout == 0) {
   d51ec:	b1dc      	cbz	r4, d5226 <_ZN3UDP13receivePacketEPhjm+0x6a>
            struct timeval tv = {};
   d51ee:	2200      	movs	r2, #0
            tv.tv_sec = timeout / 1000;
   d51f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d51f4:	fbb4 f3f0 	udiv	r3, r4, r0
   d51f8:	e9cd 3204 	strd	r3, r2, [sp, #16]
            tv.tv_usec = (timeout % 1000) * 1000;
   d51fc:	fb00 4313 	mls	r3, r0, r3, r4
   d5200:	4358      	muls	r0, r3
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5202:	2310      	movs	r3, #16
            struct timeval tv = {};
   d5204:	9207      	str	r2, [sp, #28]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5206:	9006      	str	r0, [sp, #24]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5208:	9300      	str	r3, [sp, #0]
   d520a:	f241 0206 	movw	r2, #4102	; 0x1006
   d520e:	446b      	add	r3, sp
   d5210:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5214:	4648      	mov	r0, r9
   d5216:	f7ff f9f5 	bl	d4604 <sock_setsockopt>
            if (ret) {
   d521a:	4604      	mov	r4, r0
   d521c:	b120      	cbz	r0, d5228 <_ZN3UDP13receivePacketEPhjm+0x6c>
}
   d521e:	4620      	mov	r0, r4
   d5220:	b010      	add	sp, #64	; 0x40
   d5222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            flags = MSG_DONTWAIT;
   d5226:	2408      	movs	r4, #8
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5228:	ab03      	add	r3, sp, #12
   d522a:	e9cd 7300 	strd	r7, r3, [sp]
   d522e:	6968      	ldr	r0, [r5, #20]
   d5230:	4623      	mov	r3, r4
   d5232:	4642      	mov	r2, r8
   d5234:	4631      	mov	r1, r6
   d5236:	f7ff f9f5 	bl	d4624 <sock_recvfrom>
        if (ret >= 0) {
   d523a:	1e04      	subs	r4, r0, #0
   d523c:	dbef      	blt.n	d521e <_ZN3UDP13receivePacketEPhjm+0x62>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d523e:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5242:	f105 011c 	add.w	r1, r5, #28
   d5246:	4638      	mov	r0, r7
   d5248:	f7ff ff38 	bl	d50bc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
   d524c:	e7e7      	b.n	d521e <_ZN3UDP13receivePacketEPhjm+0x62>
    int ret = -1;
   d524e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d5252:	e7e4      	b.n	d521e <_ZN3UDP13receivePacketEPhjm+0x62>

000d5254 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5254:	b538      	push	{r3, r4, r5, lr}
   d5256:	4605      	mov	r5, r0
   d5258:	4614      	mov	r4, r2
    if (addr.version() == 6) {
   d525a:	7d2b      	ldrb	r3, [r5, #20]
   d525c:	2b06      	cmp	r3, #6
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d525e:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5260:	d110      	bne.n	d5284 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x30>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5262:	f640 231c 	movw	r3, #2588	; 0xa1c
   d5266:	8013      	strh	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5268:	f7ff f9ac 	bl	d45c4 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d526c:	3408      	adds	r4, #8
   d526e:	1d2b      	adds	r3, r5, #4
        in6addr->sin6_port = htons(port);
   d5270:	f824 0c06 	strh.w	r0, [r4, #-6]
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5274:	3514      	adds	r5, #20
   d5276:	f853 2b04 	ldr.w	r2, [r3], #4
   d527a:	f844 2b04 	str.w	r2, [r4], #4
   d527e:	42ab      	cmp	r3, r5
   d5280:	d1f9      	bne.n	d5276 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x22>
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
    }
#endif // HAL_IPv6
}
   d5282:	bd38      	pop	{r3, r4, r5, pc}
    else if (addr.version() == 4) {
   d5284:	2b04      	cmp	r3, #4
   d5286:	d1fc      	bne.n	d5282 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>
        inaddr->sin_len = sizeof(sockaddr_in);
   d5288:	f44f 7304 	mov.w	r3, #528	; 0x210
   d528c:	8013      	strh	r3, [r2, #0]
        inaddr->sin_port = htons(port);
   d528e:	f7ff f999 	bl	d45c4 <inet_htons>
   d5292:	8060      	strh	r0, [r4, #2]
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5294:	6868      	ldr	r0, [r5, #4]
   d5296:	f7ff f985 	bl	d45a4 <inet_htonl>
   d529a:	6060      	str	r0, [r4, #4]
}
   d529c:	e7f1      	b.n	d5282 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x2e>

000d529e <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d529e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d52a2:	b08b      	sub	sp, #44	; 0x2c
	sockaddr_storage s = {};
   d52a4:	af03      	add	r7, sp, #12
   d52a6:	f04f 091c 	mov.w	r9, #28
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d52aa:	4698      	mov	r8, r3
   d52ac:	4604      	mov	r4, r0
   d52ae:	460d      	mov	r5, r1
   d52b0:	4616      	mov	r6, r2
	sockaddr_storage s = {};
   d52b2:	2100      	movs	r1, #0
   d52b4:	464a      	mov	r2, r9
   d52b6:	4638      	mov	r0, r7
   d52b8:	f000 fb54 	bl	d5964 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d52bc:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d52c0:	463a      	mov	r2, r7
   d52c2:	4640      	mov	r0, r8
   d52c4:	f7ff ffc6 	bl	d5254 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d52c8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d52cc:	b153      	cbz	r3, d52e4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x46>
    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d52ce:	e9cd 7900 	strd	r7, r9, [sp]
   d52d2:	6960      	ldr	r0, [r4, #20]
   d52d4:	2300      	movs	r3, #0
   d52d6:	4632      	mov	r2, r6
   d52d8:	4629      	mov	r1, r5
   d52da:	f7ff f9ab 	bl	d4634 <sock_sendto>
}
   d52de:	b00b      	add	sp, #44	; 0x2c
   d52e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
   d52e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d52e8:	e7f9      	b.n	d52de <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
	...

000d52ec <_ZN3UDPC1Ev>:
UDP::UDP()
   d52ec:	b538      	push	{r3, r4, r5, lr}
   d52ee:	2500      	movs	r5, #0
   d52f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d52f4:	e9c0 5301 	strd	r5, r3, [r0, #4]
          _buffer_allocated(false) {
   d52f8:	4b0b      	ldr	r3, [pc, #44]	; (d5328 <_ZN3UDPC1Ev+0x3c>)
   d52fa:	f103 0208 	add.w	r2, r3, #8
   d52fe:	336c      	adds	r3, #108	; 0x6c
   d5300:	6103      	str	r3, [r0, #16]
   d5302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
UDP::UDP()
   d5306:	4604      	mov	r4, r0
          _buffer_allocated(false) {
   d5308:	6002      	str	r2, [r0, #0]
   d530a:	6143      	str	r3, [r0, #20]
   d530c:	301c      	adds	r0, #28
   d530e:	f7ff fbdd 	bl	d4acc <_ZN9IPAddressC1Ev>
   d5312:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5316:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
   d531a:	86e5      	strh	r5, [r4, #54]	; 0x36
   d531c:	8725      	strh	r5, [r4, #56]	; 0x38
   d531e:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5320:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
}
   d5324:	4620      	mov	r0, r4
   d5326:	bd38      	pop	{r3, r4, r5, pc}
   d5328:	000d5b04 	.word	0x000d5b04

000d532c <_ZN3UDP13releaseBufferEv>:
void UDP::releaseBuffer() {
   d532c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d532e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
void UDP::releaseBuffer() {
   d5332:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d5334:	b123      	cbz	r3, d5340 <_ZN3UDP13releaseBufferEv+0x14>
   d5336:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d5338:	b110      	cbz	r0, d5340 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   d533a:	2101      	movs	r1, #1
   d533c:	f000 faf1 	bl	d5922 <_ZdlPvj>
    _buffer = NULL;
   d5340:	2300      	movs	r3, #0
   d5342:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d5344:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d5348:	6423      	str	r3, [r4, #64]	; 0x40
    _offset = 0;
   d534a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d534c:	8723      	strh	r3, [r4, #56]	; 0x38
}
   d534e:	bd10      	pop	{r4, pc}

000d5350 <_ZN3UDP9setBufferEjPh>:
bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d5350:	b570      	push	{r4, r5, r6, lr}
   d5352:	4604      	mov	r4, r0
   d5354:	4616      	mov	r6, r2
   d5356:	460d      	mov	r5, r1
    releaseBuffer();
   d5358:	f7ff ffe8 	bl	d532c <_ZN3UDP13releaseBufferEv>
    _buffer_size = 0;
   d535c:	2300      	movs	r3, #0
    _buffer = buffer;
   d535e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d5360:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d5362:	b12e      	cbz	r6, d5370 <_ZN3UDP9setBufferEjPh+0x20>
        _buffer_size = buf_size;
   d5364:	6425      	str	r5, [r4, #64]	; 0x40
    return _buffer_size;
   d5366:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d5368:	3800      	subs	r0, #0
   d536a:	bf18      	it	ne
   d536c:	2001      	movne	r0, #1
   d536e:	bd70      	pop	{r4, r5, r6, pc}
    if (!_buffer && buf_size) {         // requested allocation
   d5370:	2d00      	cmp	r5, #0
   d5372:	d0f8      	beq.n	d5366 <_ZN3UDP9setBufferEjPh+0x16>
        _buffer = new uint8_t[buf_size];
   d5374:	4628      	mov	r0, r5
   d5376:	f7fe fe8c 	bl	d4092 <_Znaj>
        _buffer_allocated = true;
   d537a:	2301      	movs	r3, #1
        _buffer = new uint8_t[buf_size];
   d537c:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d537e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    if (_buffer) {
   d5382:	2800      	cmp	r0, #0
   d5384:	d0ef      	beq.n	d5366 <_ZN3UDP9setBufferEjPh+0x16>
   d5386:	e7ed      	b.n	d5364 <_ZN3UDP9setBufferEjPh+0x14>

000d5388 <_ZN3UDP11beginPacketE9IPAddresst>:
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d5388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d538a:	4617      	mov	r7, r2
    if (!_buffer && _buffer_size) {
   d538c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d538e:	4605      	mov	r5, r0
   d5390:	460c      	mov	r4, r1
    if (!_buffer && _buffer_size) {
   d5392:	b91a      	cbnz	r2, d539c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d5394:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d5396:	b109      	cbz	r1, d539c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d5398:	f7ff ffda 	bl	d5350 <_ZN3UDP9setBufferEjPh>
   d539c:	3404      	adds	r4, #4
   d539e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d53a0:	f105 0620 	add.w	r6, r5, #32
   d53a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d53a6:	6823      	ldr	r3, [r4, #0]
   d53a8:	7033      	strb	r3, [r6, #0]
    _offset = 0;
   d53aa:	2300      	movs	r3, #0
}
   d53ac:	6c28      	ldr	r0, [r5, #64]	; 0x40
    _remotePort = port;
   d53ae:	86af      	strh	r7, [r5, #52]	; 0x34
    _offset = 0;
   d53b0:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d53b2:	872b      	strh	r3, [r5, #56]	; 0x38
}
   d53b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53b6 <_ZN3UDP11parsePacketEm>:
int UDP::parsePacket(system_tick_t timeout) {
   d53b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!_buffer && _buffer_size) {
   d53b8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
int UDP::parsePacket(system_tick_t timeout) {
   d53ba:	4604      	mov	r4, r0
   d53bc:	460b      	mov	r3, r1
    if (!_buffer && _buffer_size) {
   d53be:	b92a      	cbnz	r2, d53cc <_ZN3UDP11parsePacketEm+0x16>
   d53c0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d53c2:	b119      	cbz	r1, d53cc <_ZN3UDP11parsePacketEm+0x16>
   d53c4:	9301      	str	r3, [sp, #4]
        setBuffer(_buffer_size);
   d53c6:	f7ff ffc3 	bl	d5350 <_ZN3UDP9setBufferEjPh>
   d53ca:	9b01      	ldr	r3, [sp, #4]
    if (_buffer && _buffer_size) {
   d53cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    _offset = 0;
   d53ce:	2200      	movs	r2, #0
   d53d0:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d53d2:	8722      	strh	r2, [r4, #56]	; 0x38
    if (_buffer && _buffer_size) {
   d53d4:	b141      	cbz	r1, d53e8 <_ZN3UDP11parsePacketEm+0x32>
   d53d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d53d8:	b132      	cbz	r2, d53e8 <_ZN3UDP11parsePacketEm+0x32>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d53da:	6820      	ldr	r0, [r4, #0]
   d53dc:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d53de:	4620      	mov	r0, r4
   d53e0:	47a8      	blx	r5
        if (result > 0) {
   d53e2:	2800      	cmp	r0, #0
            _total = result;
   d53e4:	bfc8      	it	gt
   d53e6:	8720      	strhgt	r0, [r4, #56]	; 0x38
    return available();
   d53e8:	6823      	ldr	r3, [r4, #0]
   d53ea:	691b      	ldr	r3, [r3, #16]
   d53ec:	4620      	mov	r0, r4
}
   d53ee:	b003      	add	sp, #12
   d53f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return available();
   d53f4:	4718      	bx	r3

000d53f6 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d53f6:	4770      	bx	lr

000d53f8 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d53f8:	7441      	strb	r1, [r0, #17]
}
   d53fa:	4770      	bx	lr

000d53fc <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d53fc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d53fe:	7c00      	ldrb	r0, [r0, #16]
   d5400:	f7ff f970 	bl	d46e4 <hal_usart_available_data_for_write>
}
   d5404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5408:	bd08      	pop	{r3, pc}

000d540a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d540a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d540c:	7c00      	ldrb	r0, [r0, #16]
   d540e:	f7ff f941 	bl	d4694 <hal_usart_available>
}
   d5412:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5416:	bd08      	pop	{r3, pc}

000d5418 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5418:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d541a:	7c00      	ldrb	r0, [r0, #16]
   d541c:	f7ff f94a 	bl	d46b4 <hal_usart_peek>
}
   d5420:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5424:	bd08      	pop	{r3, pc}

000d5426 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5426:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d5428:	7c00      	ldrb	r0, [r0, #16]
   d542a:	f7ff f93b 	bl	d46a4 <hal_usart_read>
}
   d542e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5432:	bd08      	pop	{r3, pc}

000d5434 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7ff b945 	b.w	d46c4 <hal_usart_flush>

000d543a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d543a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d543c:	7c45      	ldrb	r5, [r0, #17]
{
   d543e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d5440:	b12d      	cbz	r5, d544e <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5442:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5444:	b003      	add	sp, #12
   d5446:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d544a:	f7ff b91b 	b.w	d4684 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d544e:	7c00      	ldrb	r0, [r0, #16]
   d5450:	9101      	str	r1, [sp, #4]
   d5452:	f7ff f947 	bl	d46e4 <hal_usart_available_data_for_write>
   d5456:	2800      	cmp	r0, #0
   d5458:	9901      	ldr	r1, [sp, #4]
   d545a:	dcf2      	bgt.n	d5442 <_ZN11USARTSerial5writeEh+0x8>
}
   d545c:	4628      	mov	r0, r5
   d545e:	b003      	add	sp, #12
   d5460:	bd30      	pop	{r4, r5, pc}

000d5462 <_ZN11USARTSerialD0Ev>:
   d5462:	b510      	push	{r4, lr}
   d5464:	2114      	movs	r1, #20
   d5466:	4604      	mov	r4, r0
   d5468:	f000 fa5b 	bl	d5922 <_ZdlPvj>
   d546c:	4620      	mov	r0, r4
   d546e:	bd10      	pop	{r4, pc}

000d5470 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5470:	b510      	push	{r4, lr}
   d5472:	f04f 0c00 	mov.w	ip, #0
   d5476:	4604      	mov	r4, r0
   d5478:	4608      	mov	r0, r1
   d547a:	4611      	mov	r1, r2
   d547c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5480:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5484:	4a04      	ldr	r2, [pc, #16]	; (d5498 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5486:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5488:	2201      	movs	r2, #1
  _serial = serial;
   d548a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d548c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d548e:	461a      	mov	r2, r3
   d5490:	f7ff f8f0 	bl	d4674 <hal_usart_init>
}
   d5494:	4620      	mov	r0, r4
   d5496:	bd10      	pop	{r4, pc}
   d5498:	000d5b7c 	.word	0x000d5b7c

000d549c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d549c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d549e:	4c0e      	ldr	r4, [pc, #56]	; (d54d8 <_Z22__fetch_global_Serial1v+0x3c>)
   d54a0:	7821      	ldrb	r1, [r4, #0]
   d54a2:	f3bf 8f5b 	dmb	ish
   d54a6:	f011 0101 	ands.w	r1, r1, #1
   d54aa:	d112      	bne.n	d54d2 <_Z22__fetch_global_Serial1v+0x36>
   d54ac:	4620      	mov	r0, r4
   d54ae:	9101      	str	r1, [sp, #4]
   d54b0:	f7fe fdf3 	bl	d409a <__cxa_guard_acquire>
   d54b4:	9901      	ldr	r1, [sp, #4]
   d54b6:	b160      	cbz	r0, d54d2 <_Z22__fetch_global_Serial1v+0x36>
   d54b8:	4a08      	ldr	r2, [pc, #32]	; (d54dc <_Z22__fetch_global_Serial1v+0x40>)
   d54ba:	4b09      	ldr	r3, [pc, #36]	; (d54e0 <_Z22__fetch_global_Serial1v+0x44>)
   d54bc:	4809      	ldr	r0, [pc, #36]	; (d54e4 <_Z22__fetch_global_Serial1v+0x48>)
   d54be:	f7ff ffd7 	bl	d5470 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d54c2:	4620      	mov	r0, r4
   d54c4:	f7fe fdee 	bl	d40a4 <__cxa_guard_release>
   d54c8:	4a07      	ldr	r2, [pc, #28]	; (d54e8 <_Z22__fetch_global_Serial1v+0x4c>)
   d54ca:	4908      	ldr	r1, [pc, #32]	; (d54ec <_Z22__fetch_global_Serial1v+0x50>)
   d54cc:	4805      	ldr	r0, [pc, #20]	; (d54e4 <_Z22__fetch_global_Serial1v+0x48>)
   d54ce:	f000 fa23 	bl	d5918 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d54d2:	4804      	ldr	r0, [pc, #16]	; (d54e4 <_Z22__fetch_global_Serial1v+0x48>)
   d54d4:	b002      	add	sp, #8
   d54d6:	bd10      	pop	{r4, pc}
   d54d8:	2003e680 	.word	0x2003e680
   d54dc:	2003e684 	.word	0x2003e684
   d54e0:	2003e708 	.word	0x2003e708
   d54e4:	2003e78c 	.word	0x2003e78c
   d54e8:	2003e5b8 	.word	0x2003e5b8
   d54ec:	000d53f7 	.word	0x000d53f7

000d54f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d54f0:	7441      	strb	r1, [r0, #17]
}
   d54f2:	4770      	bx	lr

000d54f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d54f4:	4770      	bx	lr

000d54f6 <_ZN9USBSerial4readEv>:
{
   d54f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d54f8:	2100      	movs	r1, #0
   d54fa:	7c00      	ldrb	r0, [r0, #16]
   d54fc:	f7ff f91a 	bl	d4734 <HAL_USB_USART_Receive_Data>
}
   d5500:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5504:	bd08      	pop	{r3, pc}

000d5506 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d5506:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5508:	2101      	movs	r1, #1
   d550a:	7c00      	ldrb	r0, [r0, #16]
   d550c:	f7ff f912 	bl	d4734 <HAL_USB_USART_Receive_Data>
}
   d5510:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5514:	bd08      	pop	{r3, pc}

000d5516 <_ZN9USBSerial17availableForWriteEv>:
{
   d5516:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5518:	7c00      	ldrb	r0, [r0, #16]
   d551a:	f7ff f903 	bl	d4724 <HAL_USB_USART_Available_Data_For_Write>
}
   d551e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5522:	bd08      	pop	{r3, pc}

000d5524 <_ZN9USBSerial9availableEv>:
{
   d5524:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5526:	7c00      	ldrb	r0, [r0, #16]
   d5528:	f7ff f8f4 	bl	d4714 <HAL_USB_USART_Available_Data>
}
   d552c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5530:	bd08      	pop	{r3, pc}

000d5532 <_ZN9USBSerial5writeEh>:
{
   d5532:	b513      	push	{r0, r1, r4, lr}
   d5534:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5536:	7c00      	ldrb	r0, [r0, #16]
{
   d5538:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d553a:	f7ff f8f3 	bl	d4724 <HAL_USB_USART_Available_Data_For_Write>
   d553e:	2800      	cmp	r0, #0
   d5540:	9901      	ldr	r1, [sp, #4]
   d5542:	dc01      	bgt.n	d5548 <_ZN9USBSerial5writeEh+0x16>
   d5544:	7c60      	ldrb	r0, [r4, #17]
   d5546:	b120      	cbz	r0, d5552 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5548:	7c20      	ldrb	r0, [r4, #16]
   d554a:	f7ff f8fb 	bl	d4744 <HAL_USB_USART_Send_Data>
   d554e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5552:	b002      	add	sp, #8
   d5554:	bd10      	pop	{r4, pc}

000d5556 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d5556:	7c00      	ldrb	r0, [r0, #16]
   d5558:	f7ff b8fc 	b.w	d4754 <HAL_USB_USART_Flush_Data>

000d555c <_ZN9USBSerialD0Ev>:
   d555c:	b510      	push	{r4, lr}
   d555e:	2114      	movs	r1, #20
   d5560:	4604      	mov	r4, r0
   d5562:	f000 f9de 	bl	d5922 <_ZdlPvj>
   d5566:	4620      	mov	r0, r4
   d5568:	bd10      	pop	{r4, pc}
	...

000d556c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d556c:	b510      	push	{r4, lr}
   d556e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5572:	4604      	mov	r4, r0
   d5574:	4608      	mov	r0, r1
   d5576:	2100      	movs	r1, #0
   d5578:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d557c:	4b04      	ldr	r3, [pc, #16]	; (d5590 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d557e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5580:	2301      	movs	r3, #1
  _serial = serial;
   d5582:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5584:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d5586:	4611      	mov	r1, r2
   d5588:	f7ff f8b4 	bl	d46f4 <HAL_USB_USART_Init>
}
   d558c:	4620      	mov	r0, r4
   d558e:	bd10      	pop	{r4, pc}
   d5590:	000d5bac 	.word	0x000d5bac

000d5594 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5594:	7c00      	ldrb	r0, [r0, #16]
   d5596:	2200      	movs	r2, #0
   d5598:	f7ff b8b4 	b.w	d4704 <HAL_USB_USART_Begin>

000d559c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d559c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d559e:	2214      	movs	r2, #20
{
   d55a0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d55a2:	2100      	movs	r1, #0
   d55a4:	f000 f9de 	bl	d5964 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d55a8:	4620      	mov	r0, r4
   d55aa:	bd10      	pop	{r4, pc}

000d55ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d55ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55ae:	4c10      	ldr	r4, [pc, #64]	; (d55f0 <_Z16_fetch_usbserialv+0x44>)
{
   d55b0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d55b2:	a803      	add	r0, sp, #12
   d55b4:	f7ff fff2 	bl	d559c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d55b8:	7821      	ldrb	r1, [r4, #0]
   d55ba:	f3bf 8f5b 	dmb	ish
   d55be:	f011 0101 	ands.w	r1, r1, #1
   d55c2:	d111      	bne.n	d55e8 <_Z16_fetch_usbserialv+0x3c>
   d55c4:	4620      	mov	r0, r4
   d55c6:	9101      	str	r1, [sp, #4]
   d55c8:	f7fe fd67 	bl	d409a <__cxa_guard_acquire>
   d55cc:	9901      	ldr	r1, [sp, #4]
   d55ce:	b158      	cbz	r0, d55e8 <_Z16_fetch_usbserialv+0x3c>
   d55d0:	aa03      	add	r2, sp, #12
   d55d2:	4808      	ldr	r0, [pc, #32]	; (d55f4 <_Z16_fetch_usbserialv+0x48>)
   d55d4:	f7ff ffca 	bl	d556c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d55d8:	4620      	mov	r0, r4
   d55da:	f7fe fd63 	bl	d40a4 <__cxa_guard_release>
   d55de:	4a06      	ldr	r2, [pc, #24]	; (d55f8 <_Z16_fetch_usbserialv+0x4c>)
   d55e0:	4906      	ldr	r1, [pc, #24]	; (d55fc <_Z16_fetch_usbserialv+0x50>)
   d55e2:	4804      	ldr	r0, [pc, #16]	; (d55f4 <_Z16_fetch_usbserialv+0x48>)
   d55e4:	f000 f998 	bl	d5918 <__aeabi_atexit>
	return _usbserial;
}
   d55e8:	4802      	ldr	r0, [pc, #8]	; (d55f4 <_Z16_fetch_usbserialv+0x48>)
   d55ea:	b008      	add	sp, #32
   d55ec:	bd10      	pop	{r4, pc}
   d55ee:	bf00      	nop
   d55f0:	2003e7a0 	.word	0x2003e7a0
   d55f4:	2003e7a4 	.word	0x2003e7a4
   d55f8:	2003e5b8 	.word	0x2003e5b8
   d55fc:	000d54f5 	.word	0x000d54f5

000d5600 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d5600:	2200      	movs	r2, #0
   d5602:	6840      	ldr	r0, [r0, #4]
   d5604:	4611      	mov	r1, r2
   d5606:	f7ff b8f9 	b.w	d47fc <network_ready>

000d560a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d560a:	2200      	movs	r2, #0
   d560c:	6840      	ldr	r0, [r0, #4]
   d560e:	4611      	mov	r1, r2
   d5610:	f7ff b914 	b.w	d483c <network_listening>

000d5614 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5614:	2200      	movs	r2, #0
   d5616:	6840      	ldr	r0, [r0, #4]
   d5618:	4611      	mov	r1, r2
   d561a:	f7ff b91f 	b.w	d485c <network_get_listen_timeout>

000d561e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d561e:	6840      	ldr	r0, [r0, #4]
   d5620:	2200      	movs	r2, #0
   d5622:	f7ff b913 	b.w	d484c <network_set_listen_timeout>

000d5626 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5626:	6840      	ldr	r0, [r0, #4]
   d5628:	2200      	movs	r2, #0
   d562a:	f081 0101 	eor.w	r1, r1, #1
   d562e:	f7ff b8fd 	b.w	d482c <network_listen>

000d5632 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5632:	2300      	movs	r3, #0
   d5634:	6840      	ldr	r0, [r0, #4]
   d5636:	461a      	mov	r2, r3
   d5638:	4619      	mov	r1, r3
   d563a:	f7ff b8ef 	b.w	d481c <network_off>

000d563e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d563e:	2300      	movs	r3, #0
   d5640:	6840      	ldr	r0, [r0, #4]
   d5642:	461a      	mov	r2, r3
   d5644:	4619      	mov	r1, r3
   d5646:	f7ff b8e1 	b.w	d480c <network_on>

000d564a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d564a:	2200      	movs	r2, #0
   d564c:	6840      	ldr	r0, [r0, #4]
   d564e:	4611      	mov	r1, r2
   d5650:	f7ff b8c4 	b.w	d47dc <network_connecting>

000d5654 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5654:	6840      	ldr	r0, [r0, #4]
   d5656:	2200      	movs	r2, #0
   d5658:	2102      	movs	r1, #2
   d565a:	f7ff b8c7 	b.w	d47ec <network_disconnect>

000d565e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d565e:	2300      	movs	r3, #0
   d5660:	6840      	ldr	r0, [r0, #4]
   d5662:	461a      	mov	r2, r3
   d5664:	f7ff b8b2 	b.w	d47cc <network_connect>

000d5668 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5668:	4b02      	ldr	r3, [pc, #8]	; (d5674 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d566a:	2204      	movs	r2, #4
   d566c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d566e:	4a02      	ldr	r2, [pc, #8]	; (d5678 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5670:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5672:	4770      	bx	lr
   d5674:	2003e7b8 	.word	0x2003e7b8
   d5678:	000d5bdc 	.word	0x000d5bdc

000d567c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d567c:	4b01      	ldr	r3, [pc, #4]	; (d5684 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d567e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d5680:	4770      	bx	lr
   d5682:	bf00      	nop
   d5684:	2003e554 	.word	0x2003e554

000d5688 <serialEventRun>:
{
   d5688:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d568a:	4b0b      	ldr	r3, [pc, #44]	; (d56b8 <serialEventRun+0x30>)
   d568c:	b143      	cbz	r3, d56a0 <serialEventRun+0x18>
   d568e:	f7ff ff8d 	bl	d55ac <_Z16_fetch_usbserialv>
   d5692:	6803      	ldr	r3, [r0, #0]
   d5694:	691b      	ldr	r3, [r3, #16]
   d5696:	4798      	blx	r3
   d5698:	2800      	cmp	r0, #0
   d569a:	dd01      	ble.n	d56a0 <serialEventRun+0x18>
        serialEvent();
   d569c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d56a0:	4b06      	ldr	r3, [pc, #24]	; (d56bc <serialEventRun+0x34>)
   d56a2:	b143      	cbz	r3, d56b6 <serialEventRun+0x2e>
   d56a4:	f7ff fefa 	bl	d549c <_Z22__fetch_global_Serial1v>
   d56a8:	6803      	ldr	r3, [r0, #0]
   d56aa:	691b      	ldr	r3, [r3, #16]
   d56ac:	4798      	blx	r3
   d56ae:	2800      	cmp	r0, #0
   d56b0:	dd01      	ble.n	d56b6 <serialEventRun+0x2e>
        serialEvent1();
   d56b2:	f3af 8000 	nop.w
}
   d56b6:	bd08      	pop	{r3, pc}
	...

000d56c0 <_post_loop>:
{
   d56c0:	b508      	push	{r3, lr}
	serialEventRun();
   d56c2:	f7ff ffe1 	bl	d5688 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d56c6:	f7fe fedd 	bl	d4484 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d56ca:	4b01      	ldr	r3, [pc, #4]	; (d56d0 <_post_loop+0x10>)
   d56cc:	6018      	str	r0, [r3, #0]
}
   d56ce:	bd08      	pop	{r3, pc}
   d56d0:	2003e7d4 	.word	0x2003e7d4

000d56d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d56d4:	4802      	ldr	r0, [pc, #8]	; (d56e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d56d6:	4a03      	ldr	r2, [pc, #12]	; (d56e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d56d8:	4903      	ldr	r1, [pc, #12]	; (d56e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d56da:	1a12      	subs	r2, r2, r0
   d56dc:	f000 b934 	b.w	d5948 <memcpy>
   d56e0:	2003f400 	.word	0x2003f400
   d56e4:	2003f404 	.word	0x2003f404
   d56e8:	000d5c30 	.word	0x000d5c30

000d56ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d56ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d56ee:	2300      	movs	r3, #0
   d56f0:	9300      	str	r3, [sp, #0]
   d56f2:	461a      	mov	r2, r3
   d56f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d56f8:	f7ff f84e 	bl	d4798 <system_ctrl_set_result>
}
   d56fc:	b003      	add	sp, #12
   d56fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5704 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d5704:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d5706:	8843      	ldrh	r3, [r0, #2]
   d5708:	2b0a      	cmp	r3, #10
   d570a:	d008      	beq.n	d571e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d570c:	2b50      	cmp	r3, #80	; 0x50
   d570e:	d10b      	bne.n	d5728 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5710:	4b09      	ldr	r3, [pc, #36]	; (d5738 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5712:	681b      	ldr	r3, [r3, #0]
   d5714:	b14b      	cbz	r3, d572a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d5716:	b003      	add	sp, #12
   d5718:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d571c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d571e:	f7ff ffe5 	bl	d56ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d5722:	b003      	add	sp, #12
   d5724:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5728:	2300      	movs	r3, #0
   d572a:	9300      	str	r3, [sp, #0]
   d572c:	461a      	mov	r2, r3
   d572e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5732:	f7ff f831 	bl	d4798 <system_ctrl_set_result>
}
   d5736:	e7f4      	b.n	d5722 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5738:	2003e7c4 	.word	0x2003e7c4

000d573c <module_user_init_hook>:
{
   d573c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d573e:	4c12      	ldr	r4, [pc, #72]	; (d5788 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5740:	4812      	ldr	r0, [pc, #72]	; (d578c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5742:	4d13      	ldr	r5, [pc, #76]	; (d5790 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5744:	2100      	movs	r1, #0
   d5746:	f7ff f8a1 	bl	d488c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d574a:	6823      	ldr	r3, [r4, #0]
   d574c:	42ab      	cmp	r3, r5
   d574e:	4b11      	ldr	r3, [pc, #68]	; (d5794 <module_user_init_hook+0x58>)
   d5750:	bf0c      	ite	eq
   d5752:	2201      	moveq	r2, #1
   d5754:	2200      	movne	r2, #0
   d5756:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5758:	d002      	beq.n	d5760 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d575a:	f7ff ffbb 	bl	d56d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d575e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5760:	f7fe fe88 	bl	d4474 <HAL_RNG_GetRandomNumber>
   d5764:	4604      	mov	r4, r0
    srand(seed);
   d5766:	f000 f905 	bl	d5974 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d576a:	4b0b      	ldr	r3, [pc, #44]	; (d5798 <module_user_init_hook+0x5c>)
   d576c:	b113      	cbz	r3, d5774 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d576e:	4620      	mov	r0, r4
   d5770:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5774:	2100      	movs	r1, #0
   d5776:	4808      	ldr	r0, [pc, #32]	; (d5798 <module_user_init_hook+0x5c>)
   d5778:	f7ff f818 	bl	d47ac <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d577c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5780:	4806      	ldr	r0, [pc, #24]	; (d579c <module_user_init_hook+0x60>)
   d5782:	2100      	movs	r1, #0
   d5784:	f7fe bffe 	b.w	d4784 <system_ctrl_set_app_request_handler>
   d5788:	2003f400 	.word	0x2003f400
   d578c:	000d567d 	.word	0x000d567d
   d5790:	9a271c1e 	.word	0x9a271c1e
   d5794:	2003e7c0 	.word	0x2003e7c0
   d5798:	00000000 	.word	0x00000000
   d579c:	000d5705 	.word	0x000d5705

000d57a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d57a0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d57a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d57a4:	d902      	bls.n	d57ac <pinAvailable+0xc>
    return false;
   d57a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d57a8:	b002      	add	sp, #8
   d57aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d57ac:	f1a0 030b 	sub.w	r3, r0, #11
   d57b0:	2b02      	cmp	r3, #2
   d57b2:	d81a      	bhi.n	d57ea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d57b4:	4c17      	ldr	r4, [pc, #92]	; (d5814 <pinAvailable+0x74>)
   d57b6:	7821      	ldrb	r1, [r4, #0]
   d57b8:	f3bf 8f5b 	dmb	ish
   d57bc:	f011 0101 	ands.w	r1, r1, #1
   d57c0:	d10b      	bne.n	d57da <pinAvailable+0x3a>
   d57c2:	4620      	mov	r0, r4
   d57c4:	9101      	str	r1, [sp, #4]
   d57c6:	f7fe fc68 	bl	d409a <__cxa_guard_acquire>
   d57ca:	9901      	ldr	r1, [sp, #4]
   d57cc:	b128      	cbz	r0, d57da <pinAvailable+0x3a>
   d57ce:	4812      	ldr	r0, [pc, #72]	; (d5818 <pinAvailable+0x78>)
   d57d0:	f7ff fb0e 	bl	d4df0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d57d4:	4620      	mov	r0, r4
   d57d6:	f7fe fc65 	bl	d40a4 <__cxa_guard_release>
   d57da:	4b0f      	ldr	r3, [pc, #60]	; (d5818 <pinAvailable+0x78>)
   d57dc:	7818      	ldrb	r0, [r3, #0]
   d57de:	f7fe ff41 	bl	d4664 <hal_spi_is_enabled>
   d57e2:	2800      	cmp	r0, #0
   d57e4:	d1df      	bne.n	d57a6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d57e6:	2001      	movs	r0, #1
   d57e8:	e7de      	b.n	d57a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d57ea:	2801      	cmp	r0, #1
   d57ec:	d809      	bhi.n	d5802 <pinAvailable+0x62>
   d57ee:	f000 f86b 	bl	d58c8 <_Z19__fetch_global_Wirev>
   d57f2:	2100      	movs	r1, #0
   d57f4:	7c00      	ldrb	r0, [r0, #16]
   d57f6:	f7fe fead 	bl	d4554 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d57fa:	f080 0001 	eor.w	r0, r0, #1
   d57fe:	b2c0      	uxtb	r0, r0
   d5800:	e7d2      	b.n	d57a8 <pinAvailable+0x8>
   d5802:	3809      	subs	r0, #9
   d5804:	2801      	cmp	r0, #1
   d5806:	d8ee      	bhi.n	d57e6 <pinAvailable+0x46>
   d5808:	f7ff fe48 	bl	d549c <_Z22__fetch_global_Serial1v>
   d580c:	7c00      	ldrb	r0, [r0, #16]
   d580e:	f7fe ff61 	bl	d46d4 <hal_usart_is_enabled>
   d5812:	e7f2      	b.n	d57fa <pinAvailable+0x5a>
   d5814:	2003e7c8 	.word	0x2003e7c8
   d5818:	2003e7cc 	.word	0x2003e7cc

000d581c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d581c:	2823      	cmp	r0, #35	; 0x23
{
   d581e:	b538      	push	{r3, r4, r5, lr}
   d5820:	4604      	mov	r4, r0
   d5822:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5824:	d80a      	bhi.n	d583c <pinMode+0x20>
   d5826:	29ff      	cmp	r1, #255	; 0xff
   d5828:	d008      	beq.n	d583c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d582a:	f7ff ffb9 	bl	d57a0 <pinAvailable>
   d582e:	b128      	cbz	r0, d583c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5830:	4629      	mov	r1, r5
   d5832:	4620      	mov	r0, r4
}
   d5834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5838:	f7fe be2c 	b.w	d4494 <HAL_Pin_Mode>
}
   d583c:	bd38      	pop	{r3, r4, r5, pc}

000d583e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d583e:	b538      	push	{r3, r4, r5, lr}
   d5840:	4604      	mov	r4, r0
   d5842:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5844:	f7fe fe2e 	bl	d44a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5848:	28ff      	cmp	r0, #255	; 0xff
   d584a:	d010      	beq.n	d586e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d584c:	2806      	cmp	r0, #6
   d584e:	d804      	bhi.n	d585a <digitalWrite+0x1c>
   d5850:	234d      	movs	r3, #77	; 0x4d
   d5852:	fa23 f000 	lsr.w	r0, r3, r0
   d5856:	07c3      	lsls	r3, r0, #31
   d5858:	d409      	bmi.n	d586e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d585a:	4620      	mov	r0, r4
   d585c:	f7ff ffa0 	bl	d57a0 <pinAvailable>
   d5860:	b128      	cbz	r0, d586e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5862:	4629      	mov	r1, r5
   d5864:	4620      	mov	r0, r4
}
   d5866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d586a:	f7fe be23 	b.w	d44b4 <HAL_GPIO_Write>
}
   d586e:	bd38      	pop	{r3, r4, r5, pc}

000d5870 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5870:	b510      	push	{r4, lr}
   d5872:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5874:	f7fe fe16 	bl	d44a4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d5878:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d587a:	b2db      	uxtb	r3, r3
   d587c:	2b01      	cmp	r3, #1
   d587e:	d908      	bls.n	d5892 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5880:	4620      	mov	r0, r4
   d5882:	f7ff ff8d 	bl	d57a0 <pinAvailable>
   d5886:	b120      	cbz	r0, d5892 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5888:	4620      	mov	r0, r4
}
   d588a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d588e:	f7fe be19 	b.w	d44c4 <HAL_GPIO_Read>
}
   d5892:	2000      	movs	r0, #0
   d5894:	bd10      	pop	{r4, pc}
	...

000d5898 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5898:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d589a:	2300      	movs	r3, #0
   d589c:	2520      	movs	r5, #32
   d589e:	8043      	strh	r3, [r0, #2]
   d58a0:	2314      	movs	r3, #20
{
   d58a2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d58a4:	8003      	strh	r3, [r0, #0]
   d58a6:	6085      	str	r5, [r0, #8]
   d58a8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d58aa:	4906      	ldr	r1, [pc, #24]	; (d58c4 <_Z17acquireWireBufferv+0x2c>)
   d58ac:	4628      	mov	r0, r5
   d58ae:	f000 f83a 	bl	d5926 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d58b2:	4904      	ldr	r1, [pc, #16]	; (d58c4 <_Z17acquireWireBufferv+0x2c>)
	};
   d58b4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d58b6:	4628      	mov	r0, r5
   d58b8:	f000 f835 	bl	d5926 <_ZnajRKSt9nothrow_t>
	};
   d58bc:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d58be:	4620      	mov	r0, r4
   d58c0:	bd38      	pop	{r3, r4, r5, pc}
   d58c2:	bf00      	nop
   d58c4:	000d5c08 	.word	0x000d5c08

000d58c8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d58c8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58ca:	4d0f      	ldr	r5, [pc, #60]	; (d5908 <_Z19__fetch_global_Wirev+0x40>)
   d58cc:	7829      	ldrb	r1, [r5, #0]
   d58ce:	f3bf 8f5b 	dmb	ish
   d58d2:	f011 0401 	ands.w	r4, r1, #1
{
   d58d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d58d8:	d113      	bne.n	d5902 <_Z19__fetch_global_Wirev+0x3a>
   d58da:	4628      	mov	r0, r5
   d58dc:	f7fe fbdd 	bl	d409a <__cxa_guard_acquire>
   d58e0:	b178      	cbz	r0, d5902 <_Z19__fetch_global_Wirev+0x3a>
   d58e2:	a801      	add	r0, sp, #4
   d58e4:	f7ff ffd8 	bl	d5898 <_Z17acquireWireBufferv>
   d58e8:	aa01      	add	r2, sp, #4
   d58ea:	4621      	mov	r1, r4
   d58ec:	4807      	ldr	r0, [pc, #28]	; (d590c <_Z19__fetch_global_Wirev+0x44>)
   d58ee:	f7ff f869 	bl	d49c4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d58f2:	4628      	mov	r0, r5
   d58f4:	f7fe fbd6 	bl	d40a4 <__cxa_guard_release>
   d58f8:	4a05      	ldr	r2, [pc, #20]	; (d5910 <_Z19__fetch_global_Wirev+0x48>)
   d58fa:	4906      	ldr	r1, [pc, #24]	; (d5914 <_Z19__fetch_global_Wirev+0x4c>)
   d58fc:	4803      	ldr	r0, [pc, #12]	; (d590c <_Z19__fetch_global_Wirev+0x44>)
   d58fe:	f000 f80b 	bl	d5918 <__aeabi_atexit>
	return wire;
}
   d5902:	4802      	ldr	r0, [pc, #8]	; (d590c <_Z19__fetch_global_Wirev+0x44>)
   d5904:	b007      	add	sp, #28
   d5906:	bd30      	pop	{r4, r5, pc}
   d5908:	2003e7d8 	.word	0x2003e7d8
   d590c:	2003e7dc 	.word	0x2003e7dc
   d5910:	2003e5b8 	.word	0x2003e5b8
   d5914:	000d496d 	.word	0x000d496d

000d5918 <__aeabi_atexit>:
   d5918:	460b      	mov	r3, r1
   d591a:	4601      	mov	r1, r0
   d591c:	4618      	mov	r0, r3
   d591e:	f000 b805 	b.w	d592c <__cxa_atexit>

000d5922 <_ZdlPvj>:
   d5922:	f7fe bbb8 	b.w	d4096 <_ZdlPv>

000d5926 <_ZnajRKSt9nothrow_t>:
   d5926:	f7fe bbb4 	b.w	d4092 <_Znaj>
	...

000d592c <__cxa_atexit>:
   d592c:	b510      	push	{r4, lr}
   d592e:	4c05      	ldr	r4, [pc, #20]	; (d5944 <__cxa_atexit+0x18>)
   d5930:	4613      	mov	r3, r2
   d5932:	b12c      	cbz	r4, d5940 <__cxa_atexit+0x14>
   d5934:	460a      	mov	r2, r1
   d5936:	4601      	mov	r1, r0
   d5938:	2002      	movs	r0, #2
   d593a:	f3af 8000 	nop.w
   d593e:	bd10      	pop	{r4, pc}
   d5940:	4620      	mov	r0, r4
   d5942:	e7fc      	b.n	d593e <__cxa_atexit+0x12>
   d5944:	00000000 	.word	0x00000000

000d5948 <memcpy>:
   d5948:	440a      	add	r2, r1
   d594a:	4291      	cmp	r1, r2
   d594c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d5950:	d100      	bne.n	d5954 <memcpy+0xc>
   d5952:	4770      	bx	lr
   d5954:	b510      	push	{r4, lr}
   d5956:	f811 4b01 	ldrb.w	r4, [r1], #1
   d595a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d595e:	4291      	cmp	r1, r2
   d5960:	d1f9      	bne.n	d5956 <memcpy+0xe>
   d5962:	bd10      	pop	{r4, pc}

000d5964 <memset>:
   d5964:	4402      	add	r2, r0
   d5966:	4603      	mov	r3, r0
   d5968:	4293      	cmp	r3, r2
   d596a:	d100      	bne.n	d596e <memset+0xa>
   d596c:	4770      	bx	lr
   d596e:	f803 1b01 	strb.w	r1, [r3], #1
   d5972:	e7f9      	b.n	d5968 <memset+0x4>

000d5974 <srand>:
   d5974:	b538      	push	{r3, r4, r5, lr}
   d5976:	4b0d      	ldr	r3, [pc, #52]	; (d59ac <srand+0x38>)
   d5978:	681d      	ldr	r5, [r3, #0]
   d597a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d597c:	4604      	mov	r4, r0
   d597e:	b97b      	cbnz	r3, d59a0 <srand+0x2c>
   d5980:	2018      	movs	r0, #24
   d5982:	f7fe ff73 	bl	d486c <malloc>
   d5986:	4a0a      	ldr	r2, [pc, #40]	; (d59b0 <srand+0x3c>)
   d5988:	4b0a      	ldr	r3, [pc, #40]	; (d59b4 <srand+0x40>)
   d598a:	63a8      	str	r0, [r5, #56]	; 0x38
   d598c:	e9c0 2300 	strd	r2, r3, [r0]
   d5990:	4b09      	ldr	r3, [pc, #36]	; (d59b8 <srand+0x44>)
   d5992:	6083      	str	r3, [r0, #8]
   d5994:	230b      	movs	r3, #11
   d5996:	8183      	strh	r3, [r0, #12]
   d5998:	2201      	movs	r2, #1
   d599a:	2300      	movs	r3, #0
   d599c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d59a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d59a2:	2200      	movs	r2, #0
   d59a4:	611c      	str	r4, [r3, #16]
   d59a6:	615a      	str	r2, [r3, #20]
   d59a8:	bd38      	pop	{r3, r4, r5, pc}
   d59aa:	bf00      	nop
   d59ac:	2003e554 	.word	0x2003e554
   d59b0:	abcd330e 	.word	0xabcd330e
   d59b4:	e66d1234 	.word	0xe66d1234
   d59b8:	0005deec 	.word	0x0005deec

000d59bc <strlen>:
   d59bc:	4603      	mov	r3, r0
   d59be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d59c2:	2a00      	cmp	r2, #0
   d59c4:	d1fb      	bne.n	d59be <strlen+0x2>
   d59c6:	1a18      	subs	r0, r3, r0
   d59c8:	3801      	subs	r0, #1
   d59ca:	4770      	bx	lr

000d59cc <dynalib_user>:
   d59cc:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d59dc:	0000 0000 5241 4f47 204e 5049 2820 4844     ....ARGON IP (DH
   d59ec:	5043 3a29 0020 2d2d 2d2d 2d2d 2d2d 2d2d     CP): .----------
   d59fc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
   d5a0c:	2d2d 2d2d 2d2d 2d2d 002d 694d 7473 6b61     ---------.Mistak
   d5a1c:	6e65 5220 6165 696c 6974 7365 4300 6d6f     en Realities.Com
   d5a2c:	6c70 7465 6465 7620 696f 2064 6573 7574     pleted void setu
   d5a3c:	0070 0000                                   p...

000d5a40 <_ZTVN5spark13EthernetClassE>:
	...
   d5a48:	494d 000d 4943 000d 4939 000d 492f 000d     MI..CI..9I../I..
   d5a58:	4923 000d 4917 000d 490b 000d 4903 000d     #I...I...I...I..
   d5a68:	48f9 000d 48ef 000d 4bf9 000d               .H...H...K..

000d5a74 <_ZTV7TwoWire>:
	...
   d5a7c:	496d 000d 49b7 000d 498f 000d 496f 000d     mI...I...I..oI..
   d5a8c:	4997 000d 499f 000d 49a7 000d 49af 000d     .I...I...I...I..

000d5a9c <_ZTV9IPAddress>:
	...
   d5aa4:	4a69 000d 40ab 000d 40cd 000d 7061 0070     iJ...@...@..app.

000d5ab4 <_ZTVN5spark12NetworkClassE>:
	...
   d5abc:	4b91 000d 4b9b 000d 4ba5 000d 4baf 000d     .K...K...K...K..
   d5acc:	4bb9 000d 4bc5 000d 4bd1 000d 4bdd 000d     .K...K...K...K..
   d5adc:	4be5 000d 4bef 000d 4bf9 000d 5925 252d     .K...K...K..%Y-%
   d5aec:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   d5afc:	7361 7463 6d69 0065                         asctime.

000d5b04 <_ZTV3UDP>:
	...
   d5b0c:	40ad 000d 40db 000d 4e95 000d 4fbd 000d     .@...@...N...O..
   d5b1c:	4e8d 000d 4ead 000d 4ecb 000d 4ee5 000d     .N...N...N...N..
   d5b2c:	4f09 000d 4fa1 000d 529f 000d 5045 000d     .O...O...R..EP..
   d5b3c:	51bd 000d 4e75 000d 5389 000d 5145 000d     .Q..uN...S..EQ..
   d5b4c:	507d 000d 53b7 000d 4fe7 000d 4e83 000d     }P...S...O...N..
   d5b5c:	5025 000d 4e89 000d 4ee7 000d fff0 ffff     %P...N...N......
   d5b6c:	0000 0000 4f01 000d                         .....O..

000d5b74 <_ZTV11USARTSerial>:
	...
   d5b7c:	53f7 000d 5463 000d 543b 000d 4ce1 000d     .S..cT..;T...L..
   d5b8c:	540b 000d 5427 000d 5419 000d 5435 000d     .T..'T...T..5T..
   d5b9c:	53f9 000d 53fd 000d                         .S...S..

000d5ba4 <_ZTV9USBSerial>:
	...
   d5bac:	54f5 000d 555d 000d 5533 000d 4ce1 000d     .T..]U..3U...L..
   d5bbc:	5525 000d 54f7 000d 5507 000d 5557 000d     %U...T...U..WU..
   d5bcc:	5517 000d 54f1 000d                         .U...T..

000d5bd4 <_ZTVN5spark9WiFiClassE>:
	...
   d5bdc:	565f 000d 5655 000d 564b 000d 5601 000d     _V..UV..KV...V..
   d5bec:	563f 000d 5633 000d 5627 000d 561f 000d     ?V..3V..'V...V..
   d5bfc:	5615 000d 560b 000d 4bf9 000d               .V...V...K..

000d5c08 <_ZSt7nothrow>:
	...

000d5c09 <link_const_variable_data_end>:
   d5c09:	00          	.byte	0x00
	...

000d5c0c <link_constructors_location>:
   d5c0c:	000d43f1 	.word	0x000d43f1
   d5c10:	000d48b5 	.word	0x000d48b5
   d5c14:	000d4959 	.word	0x000d4959
   d5c18:	000d4b81 	.word	0x000d4b81
   d5c1c:	000d4ccd 	.word	0x000d4ccd
   d5c20:	000d4dd5 	.word	0x000d4dd5
   d5c24:	000d4e25 	.word	0x000d4e25
   d5c28:	000d4e61 	.word	0x000d4e61
   d5c2c:	000d5669 	.word	0x000d5669
